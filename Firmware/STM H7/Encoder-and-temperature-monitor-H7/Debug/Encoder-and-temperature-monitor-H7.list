
Encoder-and-temperature-monitor-H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bef8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  0800c1c8  0800c1c8  0001c1c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c774  0800c774  0001c774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c77c  0800c77c  0001c77c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c780  0800c780  0001c780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  24000000  0800c784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001e4  0800c968  000201e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000244  0800c9c8  00020244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000568  240002a8  0800ca28  000202a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24000810  0800ca28  00020810  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002064a  00000000  00000000  000202d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036fc  00000000  00000000  0004091c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d8  00000000  00000000  00044018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001460  00000000  00000000  000455f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003883f  00000000  00000000  00046a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e245  00000000  00000000  0007f28f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016b687  00000000  00000000  0009d4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00208b5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bb0  00000000  00000000  00208bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002a8 	.word	0x240002a8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c1b0 	.word	0x0800c1b0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002ac 	.word	0x240002ac
 800030c:	0800c1b0 	.word	0x0800c1b0

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003d4:	f000 b974 	b.w	80006c0 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468e      	mov	lr, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d14d      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fe:	428a      	cmp	r2, r1
 8000400:	4694      	mov	ip, r2
 8000402:	d969      	bls.n	80004d8 <__udivmoddi4+0xe8>
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	b152      	cbz	r2, 8000420 <__udivmoddi4+0x30>
 800040a:	fa01 f302 	lsl.w	r3, r1, r2
 800040e:	f1c2 0120 	rsb	r1, r2, #32
 8000412:	fa20 f101 	lsr.w	r1, r0, r1
 8000416:	fa0c fc02 	lsl.w	ip, ip, r2
 800041a:	ea41 0e03 	orr.w	lr, r1, r3
 800041e:	4094      	lsls	r4, r2
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	0c21      	lsrs	r1, r4, #16
 8000426:	fbbe f6f8 	udiv	r6, lr, r8
 800042a:	fa1f f78c 	uxth.w	r7, ip
 800042e:	fb08 e316 	mls	r3, r8, r6, lr
 8000432:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000436:	fb06 f107 	mul.w	r1, r6, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000446:	f080 811f 	bcs.w	8000688 <__udivmoddi4+0x298>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 811c 	bls.w	8000688 <__udivmoddi4+0x298>
 8000450:	3e02      	subs	r6, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3310 	mls	r3, r8, r0, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb00 f707 	mul.w	r7, r0, r7
 8000468:	42a7      	cmp	r7, r4
 800046a:	d90a      	bls.n	8000482 <__udivmoddi4+0x92>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000474:	f080 810a 	bcs.w	800068c <__udivmoddi4+0x29c>
 8000478:	42a7      	cmp	r7, r4
 800047a:	f240 8107 	bls.w	800068c <__udivmoddi4+0x29c>
 800047e:	4464      	add	r4, ip
 8000480:	3802      	subs	r0, #2
 8000482:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000486:	1be4      	subs	r4, r4, r7
 8000488:	2600      	movs	r6, #0
 800048a:	b11d      	cbz	r5, 8000494 <__udivmoddi4+0xa4>
 800048c:	40d4      	lsrs	r4, r2
 800048e:	2300      	movs	r3, #0
 8000490:	e9c5 4300 	strd	r4, r3, [r5]
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d909      	bls.n	80004b2 <__udivmoddi4+0xc2>
 800049e:	2d00      	cmp	r5, #0
 80004a0:	f000 80ef 	beq.w	8000682 <__udivmoddi4+0x292>
 80004a4:	2600      	movs	r6, #0
 80004a6:	e9c5 0100 	strd	r0, r1, [r5]
 80004aa:	4630      	mov	r0, r6
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	fab3 f683 	clz	r6, r3
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	d14a      	bne.n	8000550 <__udivmoddi4+0x160>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d302      	bcc.n	80004c4 <__udivmoddi4+0xd4>
 80004be:	4282      	cmp	r2, r0
 80004c0:	f200 80f9 	bhi.w	80006b6 <__udivmoddi4+0x2c6>
 80004c4:	1a84      	subs	r4, r0, r2
 80004c6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ca:	2001      	movs	r0, #1
 80004cc:	469e      	mov	lr, r3
 80004ce:	2d00      	cmp	r5, #0
 80004d0:	d0e0      	beq.n	8000494 <__udivmoddi4+0xa4>
 80004d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004d6:	e7dd      	b.n	8000494 <__udivmoddi4+0xa4>
 80004d8:	b902      	cbnz	r2, 80004dc <__udivmoddi4+0xec>
 80004da:	deff      	udf	#255	; 0xff
 80004dc:	fab2 f282 	clz	r2, r2
 80004e0:	2a00      	cmp	r2, #0
 80004e2:	f040 8092 	bne.w	800060a <__udivmoddi4+0x21a>
 80004e6:	eba1 010c 	sub.w	r1, r1, ip
 80004ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ee:	fa1f fe8c 	uxth.w	lr, ip
 80004f2:	2601      	movs	r6, #1
 80004f4:	0c20      	lsrs	r0, r4, #16
 80004f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004fa:	fb07 1113 	mls	r1, r7, r3, r1
 80004fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000502:	fb0e f003 	mul.w	r0, lr, r3
 8000506:	4288      	cmp	r0, r1
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x12c>
 800050a:	eb1c 0101 	adds.w	r1, ip, r1
 800050e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x12a>
 8000514:	4288      	cmp	r0, r1
 8000516:	f200 80cb 	bhi.w	80006b0 <__udivmoddi4+0x2c0>
 800051a:	4643      	mov	r3, r8
 800051c:	1a09      	subs	r1, r1, r0
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb1 f0f7 	udiv	r0, r1, r7
 8000524:	fb07 1110 	mls	r1, r7, r0, r1
 8000528:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800052c:	fb0e fe00 	mul.w	lr, lr, r0
 8000530:	45a6      	cmp	lr, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x156>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800053c:	d202      	bcs.n	8000544 <__udivmoddi4+0x154>
 800053e:	45a6      	cmp	lr, r4
 8000540:	f200 80bb 	bhi.w	80006ba <__udivmoddi4+0x2ca>
 8000544:	4608      	mov	r0, r1
 8000546:	eba4 040e 	sub.w	r4, r4, lr
 800054a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x9a>
 8000550:	f1c6 0720 	rsb	r7, r6, #32
 8000554:	40b3      	lsls	r3, r6
 8000556:	fa22 fc07 	lsr.w	ip, r2, r7
 800055a:	ea4c 0c03 	orr.w	ip, ip, r3
 800055e:	fa20 f407 	lsr.w	r4, r0, r7
 8000562:	fa01 f306 	lsl.w	r3, r1, r6
 8000566:	431c      	orrs	r4, r3
 8000568:	40f9      	lsrs	r1, r7
 800056a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800056e:	fa00 f306 	lsl.w	r3, r0, r6
 8000572:	fbb1 f8f9 	udiv	r8, r1, r9
 8000576:	0c20      	lsrs	r0, r4, #16
 8000578:	fa1f fe8c 	uxth.w	lr, ip
 800057c:	fb09 1118 	mls	r1, r9, r8, r1
 8000580:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000584:	fb08 f00e 	mul.w	r0, r8, lr
 8000588:	4288      	cmp	r0, r1
 800058a:	fa02 f206 	lsl.w	r2, r2, r6
 800058e:	d90b      	bls.n	80005a8 <__udivmoddi4+0x1b8>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000598:	f080 8088 	bcs.w	80006ac <__udivmoddi4+0x2bc>
 800059c:	4288      	cmp	r0, r1
 800059e:	f240 8085 	bls.w	80006ac <__udivmoddi4+0x2bc>
 80005a2:	f1a8 0802 	sub.w	r8, r8, #2
 80005a6:	4461      	add	r1, ip
 80005a8:	1a09      	subs	r1, r1, r0
 80005aa:	b2a4      	uxth	r4, r4
 80005ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80005b0:	fb09 1110 	mls	r1, r9, r0, r1
 80005b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005bc:	458e      	cmp	lr, r1
 80005be:	d908      	bls.n	80005d2 <__udivmoddi4+0x1e2>
 80005c0:	eb1c 0101 	adds.w	r1, ip, r1
 80005c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80005c8:	d26c      	bcs.n	80006a4 <__udivmoddi4+0x2b4>
 80005ca:	458e      	cmp	lr, r1
 80005cc:	d96a      	bls.n	80006a4 <__udivmoddi4+0x2b4>
 80005ce:	3802      	subs	r0, #2
 80005d0:	4461      	add	r1, ip
 80005d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005d6:	fba0 9402 	umull	r9, r4, r0, r2
 80005da:	eba1 010e 	sub.w	r1, r1, lr
 80005de:	42a1      	cmp	r1, r4
 80005e0:	46c8      	mov	r8, r9
 80005e2:	46a6      	mov	lr, r4
 80005e4:	d356      	bcc.n	8000694 <__udivmoddi4+0x2a4>
 80005e6:	d053      	beq.n	8000690 <__udivmoddi4+0x2a0>
 80005e8:	b15d      	cbz	r5, 8000602 <__udivmoddi4+0x212>
 80005ea:	ebb3 0208 	subs.w	r2, r3, r8
 80005ee:	eb61 010e 	sbc.w	r1, r1, lr
 80005f2:	fa01 f707 	lsl.w	r7, r1, r7
 80005f6:	fa22 f306 	lsr.w	r3, r2, r6
 80005fa:	40f1      	lsrs	r1, r6
 80005fc:	431f      	orrs	r7, r3
 80005fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000602:	2600      	movs	r6, #0
 8000604:	4631      	mov	r1, r6
 8000606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	40d8      	lsrs	r0, r3
 8000610:	fa0c fc02 	lsl.w	ip, ip, r2
 8000614:	fa21 f303 	lsr.w	r3, r1, r3
 8000618:	4091      	lsls	r1, r2
 800061a:	4301      	orrs	r1, r0
 800061c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000620:	fa1f fe8c 	uxth.w	lr, ip
 8000624:	fbb3 f0f7 	udiv	r0, r3, r7
 8000628:	fb07 3610 	mls	r6, r7, r0, r3
 800062c:	0c0b      	lsrs	r3, r1, #16
 800062e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000632:	fb00 f60e 	mul.w	r6, r0, lr
 8000636:	429e      	cmp	r6, r3
 8000638:	fa04 f402 	lsl.w	r4, r4, r2
 800063c:	d908      	bls.n	8000650 <__udivmoddi4+0x260>
 800063e:	eb1c 0303 	adds.w	r3, ip, r3
 8000642:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000646:	d22f      	bcs.n	80006a8 <__udivmoddi4+0x2b8>
 8000648:	429e      	cmp	r6, r3
 800064a:	d92d      	bls.n	80006a8 <__udivmoddi4+0x2b8>
 800064c:	3802      	subs	r0, #2
 800064e:	4463      	add	r3, ip
 8000650:	1b9b      	subs	r3, r3, r6
 8000652:	b289      	uxth	r1, r1
 8000654:	fbb3 f6f7 	udiv	r6, r3, r7
 8000658:	fb07 3316 	mls	r3, r7, r6, r3
 800065c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000660:	fb06 f30e 	mul.w	r3, r6, lr
 8000664:	428b      	cmp	r3, r1
 8000666:	d908      	bls.n	800067a <__udivmoddi4+0x28a>
 8000668:	eb1c 0101 	adds.w	r1, ip, r1
 800066c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000670:	d216      	bcs.n	80006a0 <__udivmoddi4+0x2b0>
 8000672:	428b      	cmp	r3, r1
 8000674:	d914      	bls.n	80006a0 <__udivmoddi4+0x2b0>
 8000676:	3e02      	subs	r6, #2
 8000678:	4461      	add	r1, ip
 800067a:	1ac9      	subs	r1, r1, r3
 800067c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000680:	e738      	b.n	80004f4 <__udivmoddi4+0x104>
 8000682:	462e      	mov	r6, r5
 8000684:	4628      	mov	r0, r5
 8000686:	e705      	b.n	8000494 <__udivmoddi4+0xa4>
 8000688:	4606      	mov	r6, r0
 800068a:	e6e3      	b.n	8000454 <__udivmoddi4+0x64>
 800068c:	4618      	mov	r0, r3
 800068e:	e6f8      	b.n	8000482 <__udivmoddi4+0x92>
 8000690:	454b      	cmp	r3, r9
 8000692:	d2a9      	bcs.n	80005e8 <__udivmoddi4+0x1f8>
 8000694:	ebb9 0802 	subs.w	r8, r9, r2
 8000698:	eb64 0e0c 	sbc.w	lr, r4, ip
 800069c:	3801      	subs	r0, #1
 800069e:	e7a3      	b.n	80005e8 <__udivmoddi4+0x1f8>
 80006a0:	4646      	mov	r6, r8
 80006a2:	e7ea      	b.n	800067a <__udivmoddi4+0x28a>
 80006a4:	4620      	mov	r0, r4
 80006a6:	e794      	b.n	80005d2 <__udivmoddi4+0x1e2>
 80006a8:	4640      	mov	r0, r8
 80006aa:	e7d1      	b.n	8000650 <__udivmoddi4+0x260>
 80006ac:	46d0      	mov	r8, sl
 80006ae:	e77b      	b.n	80005a8 <__udivmoddi4+0x1b8>
 80006b0:	3b02      	subs	r3, #2
 80006b2:	4461      	add	r1, ip
 80006b4:	e732      	b.n	800051c <__udivmoddi4+0x12c>
 80006b6:	4630      	mov	r0, r6
 80006b8:	e709      	b.n	80004ce <__udivmoddi4+0xde>
 80006ba:	4464      	add	r4, ip
 80006bc:	3802      	subs	r0, #2
 80006be:	e742      	b.n	8000546 <__udivmoddi4+0x156>

080006c0 <__aeabi_idiv0>:
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop

080006c4 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2224      	movs	r2, #36	; 0x24
 80006ce:	2100      	movs	r1, #0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f008 ff29 	bl	8009528 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80006d6:	4b31      	ldr	r3, [pc, #196]	; (800079c <MX_ADC3_Init+0xd8>)
 80006d8:	4a31      	ldr	r2, [pc, #196]	; (80007a0 <MX_ADC3_Init+0xdc>)
 80006da:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 80006dc:	4b2f      	ldr	r3, [pc, #188]	; (800079c <MX_ADC3_Init+0xd8>)
 80006de:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
 80006e2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006e4:	4b2d      	ldr	r3, [pc, #180]	; (800079c <MX_ADC3_Init+0xd8>)
 80006e6:	2208      	movs	r2, #8
 80006e8:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80006ea:	4b2c      	ldr	r3, [pc, #176]	; (800079c <MX_ADC3_Init+0xd8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f0:	4b2a      	ldr	r3, [pc, #168]	; (800079c <MX_ADC3_Init+0xd8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f6:	4b29      	ldr	r3, [pc, #164]	; (800079c <MX_ADC3_Init+0xd8>)
 80006f8:	2204      	movs	r2, #4
 80006fa:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80006fc:	4b27      	ldr	r3, [pc, #156]	; (800079c <MX_ADC3_Init+0xd8>)
 80006fe:	2200      	movs	r2, #0
 8000700:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000702:	4b26      	ldr	r3, [pc, #152]	; (800079c <MX_ADC3_Init+0xd8>)
 8000704:	2200      	movs	r2, #0
 8000706:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <MX_ADC3_Init+0xd8>)
 800070a:	2201      	movs	r2, #1
 800070c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <MX_ADC3_Init+0xd8>)
 8000710:	2200      	movs	r2, #0
 8000712:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000716:	4b21      	ldr	r3, [pc, #132]	; (800079c <MX_ADC3_Init+0xd8>)
 8000718:	2200      	movs	r2, #0
 800071a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <MX_ADC3_Init+0xd8>)
 800071e:	2200      	movs	r2, #0
 8000720:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000722:	4b1e      	ldr	r3, [pc, #120]	; (800079c <MX_ADC3_Init+0xd8>)
 8000724:	2200      	movs	r2, #0
 8000726:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <MX_ADC3_Init+0xd8>)
 800072c:	2200      	movs	r2, #0
 800072e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_ADC3_Init+0xd8>)
 8000732:	2200      	movs	r2, #0
 8000734:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_ADC3_Init+0xd8>)
 8000738:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800073c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_ADC3_Init+0xd8>)
 8000740:	2200      	movs	r2, #0
 8000742:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_ADC3_Init+0xd8>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800074c:	4813      	ldr	r0, [pc, #76]	; (800079c <MX_ADC3_Init+0xd8>)
 800074e:	f001 fe0d 	bl	800236c <HAL_ADC_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC3_Init+0x98>
  {
    Error_Handler();
 8000758:	f000 fd06 	bl	8001168 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_ADC3_Init+0xe0>)
 800075e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000760:	2306      	movs	r3, #6
 8000762:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_6CYCLES_5;
 8000764:	2301      	movs	r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000768:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800076c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800076e:	2304      	movs	r3, #4
 8000770:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000776:	2300      	movs	r3, #0
 8000778:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 800077a:	2300      	movs	r3, #0
 800077c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	4619      	mov	r1, r3
 8000784:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_ADC3_Init+0xd8>)
 8000786:	f002 f9f9 	bl	8002b7c <HAL_ADC_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000790:	f000 fcea 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	3728      	adds	r7, #40	; 0x28
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	240002c4 	.word	0x240002c4
 80007a0:	58026000 	.word	0x58026000
 80007a4:	10c00010 	.word	0x10c00010

080007a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b0b6      	sub	sp, #216	; 0xd8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	22b4      	movs	r2, #180	; 0xb4
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f008 fead 	bl	8009528 <memset>
  if(adcHandle->Instance==ADC3)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a22      	ldr	r2, [pc, #136]	; (800085c <HAL_ADC_MspInit+0xb4>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d13d      	bne.n	8000854 <HAL_ADC_MspInit+0xac>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80007dc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 80007de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007e6:	f107 0310 	add.w	r3, r7, #16
 80007ea:	4618      	mov	r0, r3
 80007ec:	f005 f820 	bl	8005830 <HAL_RCCEx_PeriphCLKConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80007f6:	f000 fcb7 	bl	8001168 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <HAL_ADC_MspInit+0xb8>)
 80007fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000800:	4a17      	ldr	r2, [pc, #92]	; (8000860 <HAL_ADC_MspInit+0xb8>)
 8000802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000806:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <HAL_ADC_MspInit+0xb8>)
 800080c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <HAL_ADC_MspInit+0xb8>)
 800081a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081e:	4a10      	ldr	r2, [pc, #64]	; (8000860 <HAL_ADC_MspInit+0xb8>)
 8000820:	f043 0320 	orr.w	r3, r3, #32
 8000824:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000828:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <HAL_ADC_MspInit+0xb8>)
 800082a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800082e:	f003 0320 	and.w	r3, r3, #32
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PF4     ------> ADC3_INP9
    PF5     ------> ADC3_INP4
    */
    GPIO_InitStruct.Pin = NTC_Pin|PTC_Pin;
 8000836:	2330      	movs	r3, #48	; 0x30
 8000838:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800083c:	2303      	movs	r3, #3
 800083e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000848:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800084c:	4619      	mov	r1, r3
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <HAL_ADC_MspInit+0xbc>)
 8000850:	f003 fe86 	bl	8004560 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000854:	bf00      	nop
 8000856:	37d8      	adds	r7, #216	; 0xd8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	58026000 	.word	0x58026000
 8000860:	58024400 	.word	0x58024400
 8000864:	58021400 	.word	0x58021400

08000868 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800086c:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <MX_ETH_Init+0x80>)
 800086e:	4a1f      	ldr	r2, [pc, #124]	; (80008ec <MX_ETH_Init+0x84>)
 8000870:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000872:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <MX_ETH_Init+0x88>)
 8000874:	2200      	movs	r2, #0
 8000876:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_ETH_Init+0x88>)
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800087e:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <MX_ETH_Init+0x88>)
 8000880:	22e1      	movs	r2, #225	; 0xe1
 8000882:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000884:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_ETH_Init+0x88>)
 8000886:	2200      	movs	r2, #0
 8000888:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <MX_ETH_Init+0x88>)
 800088c:	2200      	movs	r2, #0
 800088e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000890:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_ETH_Init+0x88>)
 8000892:	2200      	movs	r2, #0
 8000894:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_ETH_Init+0x80>)
 8000898:	4a15      	ldr	r2, [pc, #84]	; (80008f0 <MX_ETH_Init+0x88>)
 800089a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_ETH_Init+0x80>)
 800089e:	2201      	movs	r2, #1
 80008a0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_ETH_Init+0x80>)
 80008a4:	4a13      	ldr	r2, [pc, #76]	; (80008f4 <MX_ETH_Init+0x8c>)
 80008a6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_ETH_Init+0x80>)
 80008aa:	4a13      	ldr	r2, [pc, #76]	; (80008f8 <MX_ETH_Init+0x90>)
 80008ac:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_ETH_Init+0x80>)
 80008b0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008b4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008b6:	480c      	ldr	r0, [pc, #48]	; (80008e8 <MX_ETH_Init+0x80>)
 80008b8:	f003 fa2e 	bl	8003d18 <HAL_ETH_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008c2:	f000 fc51 	bl	8001168 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008c6:	2238      	movs	r2, #56	; 0x38
 80008c8:	2100      	movs	r1, #0
 80008ca:	480c      	ldr	r0, [pc, #48]	; (80008fc <MX_ETH_Init+0x94>)
 80008cc:	f008 fe2c 	bl	8009528 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008d0:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <MX_ETH_Init+0x94>)
 80008d2:	2221      	movs	r2, #33	; 0x21
 80008d4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_ETH_Init+0x94>)
 80008d8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008dc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <MX_ETH_Init+0x94>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	2400036c 	.word	0x2400036c
 80008ec:	40028000 	.word	0x40028000
 80008f0:	2400041c 	.word	0x2400041c
 80008f4:	24000244 	.word	0x24000244
 80008f8:	240001e4 	.word	0x240001e4
 80008fc:	24000334 	.word	0x24000334

08000900 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08e      	sub	sp, #56	; 0x38
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a59      	ldr	r2, [pc, #356]	; (8000a84 <HAL_ETH_MspInit+0x184>)
 800091e:	4293      	cmp	r3, r2
 8000920:	f040 80ab 	bne.w	8000a7a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000924:	4b58      	ldr	r3, [pc, #352]	; (8000a88 <HAL_ETH_MspInit+0x188>)
 8000926:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800092a:	4a57      	ldr	r2, [pc, #348]	; (8000a88 <HAL_ETH_MspInit+0x188>)
 800092c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000930:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000934:	4b54      	ldr	r3, [pc, #336]	; (8000a88 <HAL_ETH_MspInit+0x188>)
 8000936:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800093a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800093e:	623b      	str	r3, [r7, #32]
 8000940:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000942:	4b51      	ldr	r3, [pc, #324]	; (8000a88 <HAL_ETH_MspInit+0x188>)
 8000944:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000948:	4a4f      	ldr	r2, [pc, #316]	; (8000a88 <HAL_ETH_MspInit+0x188>)
 800094a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800094e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000952:	4b4d      	ldr	r3, [pc, #308]	; (8000a88 <HAL_ETH_MspInit+0x188>)
 8000954:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800095c:	61fb      	str	r3, [r7, #28]
 800095e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000960:	4b49      	ldr	r3, [pc, #292]	; (8000a88 <HAL_ETH_MspInit+0x188>)
 8000962:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000966:	4a48      	ldr	r2, [pc, #288]	; (8000a88 <HAL_ETH_MspInit+0x188>)
 8000968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000970:	4b45      	ldr	r3, [pc, #276]	; (8000a88 <HAL_ETH_MspInit+0x188>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800097a:	61bb      	str	r3, [r7, #24]
 800097c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	4b42      	ldr	r3, [pc, #264]	; (8000a88 <HAL_ETH_MspInit+0x188>)
 8000980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000984:	4a40      	ldr	r2, [pc, #256]	; (8000a88 <HAL_ETH_MspInit+0x188>)
 8000986:	f043 0304 	orr.w	r3, r3, #4
 800098a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800098e:	4b3e      	ldr	r3, [pc, #248]	; (8000a88 <HAL_ETH_MspInit+0x188>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	617b      	str	r3, [r7, #20]
 800099a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099c:	4b3a      	ldr	r3, [pc, #232]	; (8000a88 <HAL_ETH_MspInit+0x188>)
 800099e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a2:	4a39      	ldr	r2, [pc, #228]	; (8000a88 <HAL_ETH_MspInit+0x188>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ac:	4b36      	ldr	r3, [pc, #216]	; (8000a88 <HAL_ETH_MspInit+0x188>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	4b33      	ldr	r3, [pc, #204]	; (8000a88 <HAL_ETH_MspInit+0x188>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c0:	4a31      	ldr	r2, [pc, #196]	; (8000a88 <HAL_ETH_MspInit+0x188>)
 80009c2:	f043 0302 	orr.w	r3, r3, #2
 80009c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ca:	4b2f      	ldr	r3, [pc, #188]	; (8000a88 <HAL_ETH_MspInit+0x188>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	f003 0302 	and.w	r3, r3, #2
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d8:	4b2b      	ldr	r3, [pc, #172]	; (8000a88 <HAL_ETH_MspInit+0x188>)
 80009da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009de:	4a2a      	ldr	r2, [pc, #168]	; (8000a88 <HAL_ETH_MspInit+0x188>)
 80009e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e8:	4b27      	ldr	r3, [pc, #156]	; (8000a88 <HAL_ETH_MspInit+0x188>)
 80009ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009f6:	2332      	movs	r3, #50	; 0x32
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a06:	230b      	movs	r3, #11
 8000a08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	4619      	mov	r1, r3
 8000a10:	481e      	ldr	r0, [pc, #120]	; (8000a8c <HAL_ETH_MspInit+0x18c>)
 8000a12:	f003 fda5 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a16:	2386      	movs	r3, #134	; 0x86
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a26:	230b      	movs	r3, #11
 8000a28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4817      	ldr	r0, [pc, #92]	; (8000a90 <HAL_ETH_MspInit+0x190>)
 8000a32:	f003 fd95 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a48:	230b      	movs	r3, #11
 8000a4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a50:	4619      	mov	r1, r3
 8000a52:	4810      	ldr	r0, [pc, #64]	; (8000a94 <HAL_ETH_MspInit+0x194>)
 8000a54:	f003 fd84 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a58:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a6a:	230b      	movs	r3, #11
 8000a6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a72:	4619      	mov	r1, r3
 8000a74:	4808      	ldr	r0, [pc, #32]	; (8000a98 <HAL_ETH_MspInit+0x198>)
 8000a76:	f003 fd73 	bl	8004560 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	3738      	adds	r7, #56	; 0x38
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40028000 	.word	0x40028000
 8000a88:	58024400 	.word	0x58024400
 8000a8c:	58020800 	.word	0x58020800
 8000a90:	58020000 	.word	0x58020000
 8000a94:	58020400 	.word	0x58020400
 8000a98:	58021800 	.word	0x58021800

08000a9c <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USB_OTG_HS_VBUS
     PA10   ------> USB_OTG_HS_ID
*/
void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08e      	sub	sp, #56	; 0x38
 8000aa0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	4b92      	ldr	r3, [pc, #584]	; (8000cfc <MX_GPIO_Init+0x260>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab8:	4a90      	ldr	r2, [pc, #576]	; (8000cfc <MX_GPIO_Init+0x260>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac2:	4b8e      	ldr	r3, [pc, #568]	; (8000cfc <MX_GPIO_Init+0x260>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	623b      	str	r3, [r7, #32]
 8000ace:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad0:	4b8a      	ldr	r3, [pc, #552]	; (8000cfc <MX_GPIO_Init+0x260>)
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad6:	4a89      	ldr	r2, [pc, #548]	; (8000cfc <MX_GPIO_Init+0x260>)
 8000ad8:	f043 0320 	orr.w	r3, r3, #32
 8000adc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae0:	4b86      	ldr	r3, [pc, #536]	; (8000cfc <MX_GPIO_Init+0x260>)
 8000ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae6:	f003 0320 	and.w	r3, r3, #32
 8000aea:	61fb      	str	r3, [r7, #28]
 8000aec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aee:	4b83      	ldr	r3, [pc, #524]	; (8000cfc <MX_GPIO_Init+0x260>)
 8000af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af4:	4a81      	ldr	r2, [pc, #516]	; (8000cfc <MX_GPIO_Init+0x260>)
 8000af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000afa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afe:	4b7f      	ldr	r3, [pc, #508]	; (8000cfc <MX_GPIO_Init+0x260>)
 8000b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b08:	61bb      	str	r3, [r7, #24]
 8000b0a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0c:	4b7b      	ldr	r3, [pc, #492]	; (8000cfc <MX_GPIO_Init+0x260>)
 8000b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b12:	4a7a      	ldr	r2, [pc, #488]	; (8000cfc <MX_GPIO_Init+0x260>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1c:	4b77      	ldr	r3, [pc, #476]	; (8000cfc <MX_GPIO_Init+0x260>)
 8000b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	4b74      	ldr	r3, [pc, #464]	; (8000cfc <MX_GPIO_Init+0x260>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b30:	4a72      	ldr	r2, [pc, #456]	; (8000cfc <MX_GPIO_Init+0x260>)
 8000b32:	f043 0302 	orr.w	r3, r3, #2
 8000b36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b3a:	4b70      	ldr	r3, [pc, #448]	; (8000cfc <MX_GPIO_Init+0x260>)
 8000b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b40:	f003 0302 	and.w	r3, r3, #2
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b48:	4b6c      	ldr	r3, [pc, #432]	; (8000cfc <MX_GPIO_Init+0x260>)
 8000b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4e:	4a6b      	ldr	r2, [pc, #428]	; (8000cfc <MX_GPIO_Init+0x260>)
 8000b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b58:	4b68      	ldr	r3, [pc, #416]	; (8000cfc <MX_GPIO_Init+0x260>)
 8000b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b66:	4b65      	ldr	r3, [pc, #404]	; (8000cfc <MX_GPIO_Init+0x260>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6c:	4a63      	ldr	r2, [pc, #396]	; (8000cfc <MX_GPIO_Init+0x260>)
 8000b6e:	f043 0308 	orr.w	r3, r3, #8
 8000b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b76:	4b61      	ldr	r3, [pc, #388]	; (8000cfc <MX_GPIO_Init+0x260>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7c:	f003 0308 	and.w	r3, r3, #8
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b84:	4b5d      	ldr	r3, [pc, #372]	; (8000cfc <MX_GPIO_Init+0x260>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8a:	4a5c      	ldr	r2, [pc, #368]	; (8000cfc <MX_GPIO_Init+0x260>)
 8000b8c:	f043 0310 	orr.w	r3, r3, #16
 8000b90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b94:	4b59      	ldr	r3, [pc, #356]	; (8000cfc <MX_GPIO_Init+0x260>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9a:	f003 0310 	and.w	r3, r3, #16
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f244 0101 	movw	r1, #16385	; 0x4001
 8000ba8:	4855      	ldr	r0, [pc, #340]	; (8000d00 <MX_GPIO_Init+0x264>)
 8000baa:	f003 fe99 	bl	80048e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, TEST_OUT_Pin|SSI_ENC_CLK_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2109      	movs	r1, #9
 8000bb2:	4854      	ldr	r0, [pc, #336]	; (8000d04 <MX_GPIO_Init+0x268>)
 8000bb4:	f003 fe94 	bl	80048e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_DEBUG_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f240 4104 	movw	r1, #1028	; 0x404
 8000bbe:	4852      	ldr	r0, [pc, #328]	; (8000d08 <MX_GPIO_Init+0x26c>)
 8000bc0:	f003 fe8e 	bl	80048e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ENC_DIR_Pin|ENC_PRESET_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000bca:	4850      	ldr	r0, [pc, #320]	; (8000d0c <MX_GPIO_Init+0x270>)
 8000bcc:	f003 fe88 	bl	80048e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2102      	movs	r1, #2
 8000bd4:	484e      	ldr	r0, [pc, #312]	; (8000d10 <MX_GPIO_Init+0x274>)
 8000bd6:	f003 fe83 	bl	80048e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	4847      	ldr	r0, [pc, #284]	; (8000d0c <MX_GPIO_Init+0x270>)
 8000bf0:	f003 fcb6 	bl	8004560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000bf4:	f244 0301 	movw	r3, #16385	; 0x4001
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	483c      	ldr	r0, [pc, #240]	; (8000d00 <MX_GPIO_Init+0x264>)
 8000c0e:	f003 fca7 	bl	8004560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin|SSI_ENC_CLK_Pin;
 8000c12:	2309      	movs	r3, #9
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	4836      	ldr	r0, [pc, #216]	; (8000d04 <MX_GPIO_Init+0x268>)
 8000c2a:	f003 fc99 	bl	8004560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_DEBUG_Pin;
 8000c2e:	f240 4304 	movw	r3, #1028	; 0x404
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c44:	4619      	mov	r1, r3
 8000c46:	4830      	ldr	r0, [pc, #192]	; (8000d08 <MX_GPIO_Init+0x26c>)
 8000c48:	f003 fc8a 	bl	8004560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSI_ENC_DATA_Pin;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SSI_ENC_DATA_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4829      	ldr	r0, [pc, #164]	; (8000d04 <MX_GPIO_Init+0x268>)
 8000c60:	f003 fc7e 	bl	8004560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c68:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	4822      	ldr	r0, [pc, #136]	; (8000d04 <MX_GPIO_Init+0x268>)
 8000c7a:	f003 fc71 	bl	8004560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000c7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c90:	4619      	mov	r1, r3
 8000c92:	4820      	ldr	r0, [pc, #128]	; (8000d14 <MX_GPIO_Init+0x278>)
 8000c94:	f003 fc64 	bl	8004560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000caa:	230a      	movs	r3, #10
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4817      	ldr	r0, [pc, #92]	; (8000d14 <MX_GPIO_Init+0x278>)
 8000cb6:	f003 fc53 	bl	8004560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ENC_DIR_Pin|ENC_PRESET_Pin;
 8000cba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480e      	ldr	r0, [pc, #56]	; (8000d0c <MX_GPIO_Init+0x270>)
 8000cd4:	f003 fc44 	bl	8004560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cec:	4619      	mov	r1, r3
 8000cee:	4808      	ldr	r0, [pc, #32]	; (8000d10 <MX_GPIO_Init+0x274>)
 8000cf0:	f003 fc36 	bl	8004560 <HAL_GPIO_Init>

}
 8000cf4:	bf00      	nop
 8000cf6:	3738      	adds	r7, #56	; 0x38
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	58024400 	.word	0x58024400
 8000d00:	58020400 	.word	0x58020400
 8000d04:	58021800 	.word	0x58021800
 8000d08:	58020c00 	.word	0x58020c00
 8000d0c:	58020800 	.word	0x58020800
 8000d10:	58021000 	.word	0x58021000
 8000d14:	58020000 	.word	0x58020000

08000d18 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d18:	b5b0      	push	{r4, r5, r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d1e:	f000 ff6f 	bl	8001c00 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d22:	f000 f943 	bl	8000fac <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000d26:	f000 f9b5 	bl	8001094 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d2a:	f7ff feb7 	bl	8000a9c <MX_GPIO_Init>
	MX_ETH_Init();
 8000d2e:	f7ff fd9b 	bl	8000868 <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000d32:	f000 fe81 	bl	8001a38 <MX_USART3_UART_Init>
	MX_USB_OTG_HS_USB_Init();
 8000d36:	f000 ff31 	bl	8001b9c <MX_USB_OTG_HS_USB_Init>
	MX_TIM7_Init();
 8000d3a:	f000 fe1f 	bl	800197c <MX_TIM7_Init>
	MX_ADC3_Init();
 8000d3e:	f7ff fcc1 	bl	80006c4 <MX_ADC3_Init>
	/* USER CODE BEGIN 2 */

	memset(tx_buff, (uint8_t)0x0, sizeof(uint8_t)*BUF_SIZE);
 8000d42:	2250      	movs	r2, #80	; 0x50
 8000d44:	2100      	movs	r1, #0
 8000d46:	4889      	ldr	r0, [pc, #548]	; (8000f6c <main+0x254>)
 8000d48:	f008 fbee 	bl	8009528 <memset>
	memset(enc_bits,(uint8_t)0x0, sizeof(uint32_t)*AVG_MEAS);
 8000d4c:	220c      	movs	r2, #12
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4887      	ldr	r0, [pc, #540]	; (8000f70 <main+0x258>)
 8000d52:	f008 fbe9 	bl	8009528 <memset>
	tx_buff_size = (uint8_t) sprintf((char *) tx_buff, "Hello\n\r");
 8000d56:	4987      	ldr	r1, [pc, #540]	; (8000f74 <main+0x25c>)
 8000d58:	4884      	ldr	r0, [pc, #528]	; (8000f6c <main+0x254>)
 8000d5a:	f009 f82f 	bl	8009dbc <siprintf>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4b85      	ldr	r3, [pc, #532]	; (8000f78 <main+0x260>)
 8000d64:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)tx_buff, tx_buff_size, 500);
 8000d66:	4b84      	ldr	r3, [pc, #528]	; (8000f78 <main+0x260>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d70:	497e      	ldr	r1, [pc, #504]	; (8000f6c <main+0x254>)
 8000d72:	4882      	ldr	r0, [pc, #520]	; (8000f7c <main+0x264>)
 8000d74:	f007 f9f4 	bl	8008160 <HAL_UART_Transmit>

	// Set high preset pin for 2.5s to reset the encoder counter
	HAL_Delay(1000);
 8000d78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d7c:	f000 ffd2 	bl	8001d24 <HAL_Delay>
	HAL_GPIO_WritePin(ENC_PRESET_GPIO_Port, ENC_PRESET_Pin, GPIO_PIN_SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d86:	487e      	ldr	r0, [pc, #504]	; (8000f80 <main+0x268>)
 8000d88:	f003 fdaa 	bl	80048e0 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000d8c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d90:	f000 ffc8 	bl	8001d24 <HAL_Delay>
	HAL_GPIO_WritePin(ENC_PRESET_GPIO_Port, ENC_PRESET_Pin, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d9a:	4879      	ldr	r0, [pc, #484]	; (8000f80 <main+0x268>)
 8000d9c:	f003 fda0 	bl	80048e0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000da0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000da4:	f000 ffbe 	bl	8001d24 <HAL_Delay>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		memset(enc_bits,(uint8_t)0x0, sizeof(uint32_t)*AVG_MEAS);
 8000da8:	220c      	movs	r2, #12
 8000daa:	2100      	movs	r1, #0
 8000dac:	4870      	ldr	r0, [pc, #448]	; (8000f70 <main+0x258>)
 8000dae:	f008 fbbb 	bl	8009528 <memset>

		for (i = 0; i < AVG_MEAS; i++)
 8000db2:	4b74      	ldr	r3, [pc, #464]	; (8000f84 <main+0x26c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	e06c      	b.n	8000e94 <main+0x17c>
		{
			ping = TRUE;
 8000dba:	4b73      	ldr	r3, [pc, #460]	; (8000f88 <main+0x270>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	701a      	strb	r2, [r3, #0]
			enc_clk_count = 0;
 8000dc0:	4b72      	ldr	r3, [pc, #456]	; (8000f8c <main+0x274>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
			enc_clk_count = 0;
 8000dc6:	4b71      	ldr	r3, [pc, #452]	; (8000f8c <main+0x274>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim7);
 8000dcc:	4870      	ldr	r0, [pc, #448]	; (8000f90 <main+0x278>)
 8000dce:	f006 fe1b 	bl	8007a08 <HAL_TIM_Base_Start_IT>

			while (enc_clk_count < (ENC_BITs * 4) )
 8000dd2:	e04a      	b.n	8000e6a <main+0x152>
			{
				while (ping){}
 8000dd4:	bf00      	nop
 8000dd6:	4b6c      	ldr	r3, [pc, #432]	; (8000f88 <main+0x270>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d1fb      	bne.n	8000dd6 <main+0xbe>

				if ((enc_clk_count % 4) == 0) // Every data bit it's 4 timer interrupts
 8000dde:	4b6b      	ldr	r3, [pc, #428]	; (8000f8c <main+0x274>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0303 	and.w	r3, r3, #3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d128      	bne.n	8000e3c <main+0x124>
				{
					HAL_GPIO_TogglePin(GPIO_DEBUG_GPIO_Port, GPIO_DEBUG_Pin);
 8000dea:	2104      	movs	r1, #4
 8000dec:	4869      	ldr	r0, [pc, #420]	; (8000f94 <main+0x27c>)
 8000dee:	f003 fd90 	bl	8004912 <HAL_GPIO_TogglePin>
					enc_bits[i] <<= 1;
 8000df2:	4b64      	ldr	r3, [pc, #400]	; (8000f84 <main+0x26c>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	4b5d      	ldr	r3, [pc, #372]	; (8000f70 <main+0x258>)
 8000dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dfe:	4a61      	ldr	r2, [pc, #388]	; (8000f84 <main+0x26c>)
 8000e00:	7812      	ldrb	r2, [r2, #0]
 8000e02:	4611      	mov	r1, r2
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	4a5a      	ldr	r2, [pc, #360]	; (8000f70 <main+0x258>)
 8000e08:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
					enc_bits[i] |= ( ((uint32_t) HAL_GPIO_ReadPin(SSI_ENC_DATA_GPIO_Port, SSI_ENC_DATA_Pin)) & 0x00000001);
 8000e0c:	2104      	movs	r1, #4
 8000e0e:	4862      	ldr	r0, [pc, #392]	; (8000f98 <main+0x280>)
 8000e10:	f003 fd4e 	bl	80048b0 <HAL_GPIO_ReadPin>
 8000e14:	4603      	mov	r3, r0
 8000e16:	f003 0201 	and.w	r2, r3, #1
 8000e1a:	4b5a      	ldr	r3, [pc, #360]	; (8000f84 <main+0x26c>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4b53      	ldr	r3, [pc, #332]	; (8000f70 <main+0x258>)
 8000e22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e26:	4957      	ldr	r1, [pc, #348]	; (8000f84 <main+0x26c>)
 8000e28:	7809      	ldrb	r1, [r1, #0]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	4a50      	ldr	r2, [pc, #320]	; (8000f70 <main+0x258>)
 8000e2e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
					HAL_GPIO_TogglePin(GPIO_DEBUG_GPIO_Port, GPIO_DEBUG_Pin);
 8000e32:	2104      	movs	r1, #4
 8000e34:	4857      	ldr	r0, [pc, #348]	; (8000f94 <main+0x27c>)
 8000e36:	f003 fd6c 	bl	8004912 <HAL_GPIO_TogglePin>
 8000e3a:	e013      	b.n	8000e64 <main+0x14c>
				}
				else if ((enc_clk_count % 2) == 0)
 8000e3c:	4b53      	ldr	r3, [pc, #332]	; (8000f8c <main+0x274>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d00d      	beq.n	8000e64 <main+0x14c>
				{}
				else
				{
					HAL_GPIO_TogglePin(SSI_ENC_CLK_GPIO_Port, SSI_ENC_CLK_Pin);
 8000e48:	2108      	movs	r1, #8
 8000e4a:	4853      	ldr	r0, [pc, #332]	; (8000f98 <main+0x280>)
 8000e4c:	f003 fd61 	bl	8004912 <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin);
 8000e50:	2101      	movs	r1, #1
 8000e52:	4851      	ldr	r0, [pc, #324]	; (8000f98 <main+0x280>)
 8000e54:	f003 fd5d 	bl	8004912 <HAL_GPIO_TogglePin>
					clk_front_count++;
 8000e58:	4b50      	ldr	r3, [pc, #320]	; (8000f9c <main+0x284>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	4b4e      	ldr	r3, [pc, #312]	; (8000f9c <main+0x284>)
 8000e62:	701a      	strb	r2, [r3, #0]
				}
				ping = TRUE;
 8000e64:	4b48      	ldr	r3, [pc, #288]	; (8000f88 <main+0x270>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	701a      	strb	r2, [r3, #0]
			while (enc_clk_count < (ENC_BITs * 4) )
 8000e6a:	4b48      	ldr	r3, [pc, #288]	; (8000f8c <main+0x274>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b6b      	cmp	r3, #107	; 0x6b
 8000e70:	d9b0      	bls.n	8000dd4 <main+0xbc>
			}

			HAL_GPIO_WritePin(SSI_ENC_CLK_GPIO_Port, SSI_ENC_CLK_Pin, GPIO_PIN_SET);
 8000e72:	2201      	movs	r2, #1
 8000e74:	2108      	movs	r1, #8
 8000e76:	4848      	ldr	r0, [pc, #288]	; (8000f98 <main+0x280>)
 8000e78:	f003 fd32 	bl	80048e0 <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop_IT(&htim7);
 8000e7c:	4844      	ldr	r0, [pc, #272]	; (8000f90 <main+0x278>)
 8000e7e:	f006 fe49 	bl	8007b14 <HAL_TIM_Base_Stop_IT>
			HAL_Delay(5);
 8000e82:	2005      	movs	r0, #5
 8000e84:	f000 ff4e 	bl	8001d24 <HAL_Delay>
		for (i = 0; i < AVG_MEAS; i++)
 8000e88:	4b3e      	ldr	r3, [pc, #248]	; (8000f84 <main+0x26c>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	4b3c      	ldr	r3, [pc, #240]	; (8000f84 <main+0x26c>)
 8000e92:	701a      	strb	r2, [r3, #0]
 8000e94:	4b3b      	ldr	r3, [pc, #236]	; (8000f84 <main+0x26c>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d98e      	bls.n	8000dba <main+0xa2>
		}

		for (i = 0; i < AVG_MEAS; i++)
 8000e9c:	4b39      	ldr	r3, [pc, #228]	; (8000f84 <main+0x26c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
 8000ea2:	e033      	b.n	8000f0c <main+0x1f4>
		{
			enc_bits[i] >>= 2;
 8000ea4:	4b37      	ldr	r3, [pc, #220]	; (8000f84 <main+0x26c>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b31      	ldr	r3, [pc, #196]	; (8000f70 <main+0x258>)
 8000eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb0:	4a34      	ldr	r2, [pc, #208]	; (8000f84 <main+0x26c>)
 8000eb2:	7812      	ldrb	r2, [r2, #0]
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	089b      	lsrs	r3, r3, #2
 8000eb8:	4a2d      	ldr	r2, [pc, #180]	; (8000f70 <main+0x258>)
 8000eba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			//13 bits angle
			angle[i] = (int32_t) ((enc_bits[i] & 0x00001FFF) * 44); // (360 / 2^13) * 1000 = 44 [mDeg]
 8000ebe:	4b31      	ldr	r3, [pc, #196]	; (8000f84 <main+0x26c>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <main+0x258>)
 8000ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8000ece:	4a2d      	ldr	r2, [pc, #180]	; (8000f84 <main+0x26c>)
 8000ed0:	7812      	ldrb	r2, [r2, #0]
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	222c      	movs	r2, #44	; 0x2c
 8000ed6:	fb02 f303 	mul.w	r3, r2, r3
 8000eda:	4a31      	ldr	r2, [pc, #196]	; (8000fa0 <main+0x288>)
 8000edc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			//12 bits multi-turn
			turn[i]  = (int16_t)((enc_bits[i] & 0x01FFE000) >> 13);
 8000ee0:	4b28      	ldr	r3, [pc, #160]	; (8000f84 <main+0x26c>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <main+0x258>)
 8000ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eec:	0b5b      	lsrs	r3, r3, #13
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	4a24      	ldr	r2, [pc, #144]	; (8000f84 <main+0x26c>)
 8000ef2:	7812      	ldrb	r2, [r2, #0]
 8000ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ef8:	b299      	uxth	r1, r3
 8000efa:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <main+0x28c>)
 8000efc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (i = 0; i < AVG_MEAS; i++)
 8000f00:	4b20      	ldr	r3, [pc, #128]	; (8000f84 <main+0x26c>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	3301      	adds	r3, #1
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <main+0x26c>)
 8000f0a:	701a      	strb	r2, [r3, #0]
 8000f0c:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <main+0x26c>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d9c7      	bls.n	8000ea4 <main+0x18c>
		}
		tx_buff_size = (uint8_t) sprintf((char *) tx_buff, "------\r\nENCODER:\r\n%lu|%lu|%lu mDeg\n\r%u|%u|%u turns\n\r\n\r",
 8000f14:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <main+0x288>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <main+0x288>)
 8000f1a:	6859      	ldr	r1, [r3, #4]
 8000f1c:	4b20      	ldr	r3, [pc, #128]	; (8000fa0 <main+0x288>)
 8000f1e:	689b      	ldr	r3, [r3, #8]
				angle[0], angle[1], angle[2], turn[0], turn[1], turn[2]);
 8000f20:	4820      	ldr	r0, [pc, #128]	; (8000fa4 <main+0x28c>)
 8000f22:	8800      	ldrh	r0, [r0, #0]
		tx_buff_size = (uint8_t) sprintf((char *) tx_buff, "------\r\nENCODER:\r\n%lu|%lu|%lu mDeg\n\r%u|%u|%u turns\n\r\n\r",
 8000f24:	4604      	mov	r4, r0
				angle[0], angle[1], angle[2], turn[0], turn[1], turn[2]);
 8000f26:	481f      	ldr	r0, [pc, #124]	; (8000fa4 <main+0x28c>)
 8000f28:	8840      	ldrh	r0, [r0, #2]
		tx_buff_size = (uint8_t) sprintf((char *) tx_buff, "------\r\nENCODER:\r\n%lu|%lu|%lu mDeg\n\r%u|%u|%u turns\n\r\n\r",
 8000f2a:	4605      	mov	r5, r0
				angle[0], angle[1], angle[2], turn[0], turn[1], turn[2]);
 8000f2c:	481d      	ldr	r0, [pc, #116]	; (8000fa4 <main+0x28c>)
 8000f2e:	8880      	ldrh	r0, [r0, #4]
		tx_buff_size = (uint8_t) sprintf((char *) tx_buff, "------\r\nENCODER:\r\n%lu|%lu|%lu mDeg\n\r%u|%u|%u turns\n\r\n\r",
 8000f30:	9003      	str	r0, [sp, #12]
 8000f32:	9502      	str	r5, [sp, #8]
 8000f34:	9401      	str	r4, [sp, #4]
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	491b      	ldr	r1, [pc, #108]	; (8000fa8 <main+0x290>)
 8000f3c:	480b      	ldr	r0, [pc, #44]	; (8000f6c <main+0x254>)
 8000f3e:	f008 ff3d 	bl	8009dbc <siprintf>
 8000f42:	4603      	mov	r3, r0
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <main+0x260>)
 8000f48:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*)tx_buff, tx_buff_size, 1000);
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <main+0x260>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f54:	4905      	ldr	r1, [pc, #20]	; (8000f6c <main+0x254>)
 8000f56:	4809      	ldr	r0, [pc, #36]	; (8000f7c <main+0x264>)
 8000f58:	f007 f902 	bl	8008160 <HAL_UART_Transmit>
		getTemperature();
 8000f5c:	f000 f8b6 	bl	80010cc <getTemperature>
		HAL_Delay(500);
 8000f60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f64:	f000 fede 	bl	8001d24 <HAL_Delay>
		memset(enc_bits,(uint8_t)0x0, sizeof(uint32_t)*AVG_MEAS);
 8000f68:	e71e      	b.n	8000da8 <main+0x90>
 8000f6a:	bf00      	nop
 8000f6c:	2400044c 	.word	0x2400044c
 8000f70:	24000428 	.word	0x24000428
 8000f74:	0800c1c8 	.word	0x0800c1c8
 8000f78:	2400049c 	.word	0x2400049c
 8000f7c:	2400076c 	.word	0x2400076c
 8000f80:	58020800 	.word	0x58020800
 8000f84:	24000434 	.word	0x24000434
 8000f88:	24000000 	.word	0x24000000
 8000f8c:	24000424 	.word	0x24000424
 8000f90:	24000720 	.word	0x24000720
 8000f94:	58020c00 	.word	0x58020c00
 8000f98:	58021800 	.word	0x58021800
 8000f9c:	2400049d 	.word	0x2400049d
 8000fa0:	24000438 	.word	0x24000438
 8000fa4:	24000444 	.word	0x24000444
 8000fa8:	0800c1d0 	.word	0x0800c1d0

08000fac <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b09c      	sub	sp, #112	; 0x70
 8000fb0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb6:	224c      	movs	r2, #76	; 0x4c
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f008 fab4 	bl	8009528 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	2220      	movs	r2, #32
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f008 faae 	bl	8009528 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000fcc:	2002      	movs	r0, #2
 8000fce:	f003 fcbb 	bl	8004948 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	603b      	str	r3, [r7, #0]
 8000fd6:	4b2e      	ldr	r3, [pc, #184]	; (8001090 <SystemClock_Config+0xe4>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	4a2d      	ldr	r2, [pc, #180]	; (8001090 <SystemClock_Config+0xe4>)
 8000fdc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fe0:	6193      	str	r3, [r2, #24]
 8000fe2:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <SystemClock_Config+0xe4>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fee:	bf00      	nop
 8000ff0:	4b27      	ldr	r3, [pc, #156]	; (8001090 <SystemClock_Config+0xe4>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ffc:	d1f8      	bne.n	8000ff0 <SystemClock_Config+0x44>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000ffe:	2323      	movs	r3, #35	; 0x23
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
			|RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001002:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001008:	2301      	movs	r3, #1
 800100a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100c:	2340      	movs	r3, #64	; 0x40
 800100e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001010:	2301      	movs	r3, #1
 8001012:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001014:	2302      	movs	r3, #2
 8001016:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001018:	2302      	movs	r3, #2
 800101a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800101c:	2304      	movs	r3, #4
 800101e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 275;
 8001020:	f240 1313 	movw	r3, #275	; 0x113
 8001024:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8001026:	2301      	movs	r3, #1
 8001028:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800102a:	2304      	movs	r3, #4
 800102c:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 800102e:	2302      	movs	r3, #2
 8001030:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001032:	2304      	movs	r3, #4
 8001034:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001036:	2300      	movs	r3, #0
 8001038:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001042:	4618      	mov	r0, r3
 8001044:	f003 fcba 	bl	80049bc <HAL_RCC_OscConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <SystemClock_Config+0xa6>
	{
		Error_Handler();
 800104e:	f000 f88b 	bl	8001168 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001052:	233f      	movs	r3, #63	; 0x3f
 8001054:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001056:	2303      	movs	r3, #3
 8001058:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800105e:	2308      	movs	r3, #8
 8001060:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001062:	2340      	movs	r3, #64	; 0x40
 8001064:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001066:	2340      	movs	r3, #64	; 0x40
 8001068:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800106a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800106e:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001070:	2340      	movs	r3, #64	; 0x40
 8001072:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	2103      	movs	r1, #3
 8001078:	4618      	mov	r0, r3
 800107a:	f004 f84d 	bl	8005118 <HAL_RCC_ClockConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0xdc>
	{
		Error_Handler();
 8001084:	f000 f870 	bl	8001168 <Error_Handler>
	}
}
 8001088:	bf00      	nop
 800108a:	3770      	adds	r7, #112	; 0x70
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	58024800 	.word	0x58024800

08001094 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b0ae      	sub	sp, #184	; 0xb8
 8001098:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	22b4      	movs	r2, #180	; 0xb4
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f008 fa41 	bl	8009528 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80010a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80010aa:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80010ac:	2300      	movs	r3, #0
 80010ae:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	4618      	mov	r0, r3
 80010b4:	f004 fbbc 	bl	8005830 <HAL_RCCEx_PeriphCLKConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <PeriphCommonClock_Config+0x2e>
	{
		Error_Handler();
 80010be:	f000 f853 	bl	8001168 <Error_Handler>
	}
}
 80010c2:	bf00      	nop
 80010c4:	37b8      	adds	r7, #184	; 0xb8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <getTemperature>:

/* USER CODE BEGIN 4 */
void getTemperature(){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0

	HAL_UART_Transmit(&huart3, (uint8_t*)"Temperatures: \r\n", strlen("Temperatures: \r\n"), 1000);
 80010d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d6:	2210      	movs	r2, #16
 80010d8:	4911      	ldr	r1, [pc, #68]	; (8001120 <getTemperature+0x54>)
 80010da:	4812      	ldr	r0, [pc, #72]	; (8001124 <getTemperature+0x58>)
 80010dc:	f007 f840 	bl	8008160 <HAL_UART_Transmit>
	double ptc_volt = get_ptc_volt(&hadc3, 200);
 80010e0:	21c8      	movs	r1, #200	; 0xc8
 80010e2:	4811      	ldr	r0, [pc, #68]	; (8001128 <getTemperature+0x5c>)
 80010e4:	f000 f984 	bl	80013f0 <get_ptc_volt>
 80010e8:	ed87 0b02 	vstr	d0, [r7, #8]
	get_ptc_temp_zone(ptc_volt);
 80010ec:	ed97 0b02 	vldr	d0, [r7, #8]
 80010f0:	f000 fa16 	bl	8001520 <get_ptc_temp_zone>
	HAL_Delay(1000);
 80010f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f8:	f000 fe14 	bl	8001d24 <HAL_Delay>

	double ntc_volt = get_ntc_volt(&hadc3, 200);
 80010fc:	21c8      	movs	r1, #200	; 0xc8
 80010fe:	480a      	ldr	r0, [pc, #40]	; (8001128 <getTemperature+0x5c>)
 8001100:	f000 f83a 	bl	8001178 <get_ntc_volt>
 8001104:	ed87 0b00 	vstr	d0, [r7]
	get_ntc_temp_zone(ntc_volt);
 8001108:	ed97 0b00 	vldr	d0, [r7]
 800110c:	f000 f8cc 	bl	80012a8 <get_ntc_temp_zone>
	HAL_Delay(1000);
 8001110:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001114:	f000 fe06 	bl	8001d24 <HAL_Delay>
	// println(&huart2, "------------------------------");
}
 8001118:	bf00      	nop
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	0800c208 	.word	0x0800c208
 8001124:	2400076c 	.word	0x2400076c
 8001128:	240002c4 	.word	0x240002c4

0800112c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN Callback 1 */
	if(htim->Instance == TIM7)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a08      	ldr	r2, [pc, #32]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d107      	bne.n	800114e <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		enc_clk_count++;
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	4a06      	ldr	r2, [pc, #24]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001146:	6013      	str	r3, [r2, #0]
		ping = FALSE;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END Callback 1 */
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40001400 	.word	0x40001400
 8001160:	24000424 	.word	0x24000424
 8001164:	24000000 	.word	0x24000000

08001168 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800116c:	b672      	cpsid	i
}
 800116e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001170:	e7fe      	b.n	8001170 <Error_Handler+0x8>
 8001172:	0000      	movs	r0, r0
 8001174:	0000      	movs	r0, r0
	...

08001178 <get_ntc_volt>:
#include "ntc.h"

char ntc_buff [BUFF_SIZE];
double ntc_volt, ntc_adc_value;

double get_ntc_volt(ADC_HandleTypeDef* adc, uint32_t timeout){
 8001178:	b580      	push	{r7, lr}
 800117a:	b08c      	sub	sp, #48	; 0x30
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]

	ntc_adc_value = 0.0;
 8001182:	4943      	ldr	r1, [pc, #268]	; (8001290 <get_ntc_volt+0x118>)
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	e9c1 2300 	strd	r2, r3, [r1]

	ADC_ChannelConfTypeDef sConfig = {0};
 8001190:	f107 0308 	add.w	r3, r7, #8
 8001194:	2224      	movs	r2, #36	; 0x24
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f008 f9c5 	bl	8009528 <memset>
	sConfig.Channel = NTC_CHANNEL;
 800119e:	4b3d      	ldr	r3, [pc, #244]	; (8001294 <get_ntc_volt+0x11c>)
 80011a0:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1; //F4 Version: 1;
 80011a2:	2306      	movs	r3, #6
 80011a4:	60fb      	str	r3, [r7, #12]

	sConfig.SingleDiff = ADC_SINGLE_ENDED; 				// Needed on H7
 80011a6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80011aa:	617b      	str	r3, [r7, #20]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;				// Needed on H7
 80011ac:	2304      	movs	r3, #4
 80011ae:	61bb      	str	r3, [r7, #24]
	sConfig.Offset = 0;                      			// Needed on H7
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
	sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;		// Needed on H7
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.OffsetSaturation = DISABLE;					// Needed on H7
 80011b8:	2300      	movs	r3, #0
 80011ba:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

		sConfig.SamplingTime = ADC3_SAMPLETIME_6CYCLES_5; //F4 Version: ADC_SAMPLETIME_144CYCLES;
 80011be:	2301      	movs	r3, #1
 80011c0:	613b      	str	r3, [r7, #16]
		if(HAL_ADC_ConfigChannel(adc, &sConfig) != HAL_OK){
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	4619      	mov	r1, r3
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f001 fcd7 	bl	8002b7c <HAL_ADC_ConfigChannel>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <get_ntc_volt+0x60>
			Error_Handler();
 80011d4:	f7ff ffc8 	bl	8001168 <Error_Handler>
		}

	HAL_ADC_Start(adc);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f001 facf 	bl	800277c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(adc, timeout);
 80011de:	6839      	ldr	r1, [r7, #0]
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f001 fbc9 	bl	8002978 <HAL_ADC_PollForConversion>

	for (uint8_t i = 0; i < SAMPLES; i++){
 80011e6:	2300      	movs	r3, #0
 80011e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80011ec:	e013      	b.n	8001216 <get_ntc_volt+0x9e>
		ntc_adc_value += HAL_ADC_GetValue(adc);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f001 fcb6 	bl	8002b60 <HAL_ADC_GetValue>
 80011f4:	ee07 0a90 	vmov	s15, r0
 80011f8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80011fc:	4b24      	ldr	r3, [pc, #144]	; (8001290 <get_ntc_volt+0x118>)
 80011fe:	ed93 7b00 	vldr	d7, [r3]
 8001202:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001206:	4b22      	ldr	r3, [pc, #136]	; (8001290 <get_ntc_volt+0x118>)
 8001208:	ed83 7b00 	vstr	d7, [r3]
	for (uint8_t i = 0; i < SAMPLES; i++){
 800120c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001210:	3301      	adds	r3, #1
 8001212:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001216:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800121a:	2b1d      	cmp	r3, #29
 800121c:	d9e7      	bls.n	80011ee <get_ntc_volt+0x76>
	}

//	sprintf(ntc_buff, "NTC ADC %f [bit] \r\n", ntc_adc_value / SAMPLES );
//	HAL_UART_Transmit(&huart3, (uint8_t *)ntc_buff, strlen(ntc_buff), 100);

	ntc_volt = (ntc_adc_value / SAMPLES) * GPIO_MAX_VOLTAGE / ADC_BIT_RESOLUTION;
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <get_ntc_volt+0x118>)
 8001220:	ed93 6b00 	vldr	d6, [r3]
 8001224:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
 8001228:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800122c:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8001280 <get_ntc_volt+0x108>
 8001230:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001234:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8001288 <get_ntc_volt+0x110>
 8001238:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <get_ntc_volt+0x120>)
 800123e:	ed83 7b00 	vstr	d7, [r3]

	sprintf(ntc_buff, "NTC %f [V] \r\n",ntc_volt);
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <get_ntc_volt+0x120>)
 8001244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001248:	4914      	ldr	r1, [pc, #80]	; (800129c <get_ntc_volt+0x124>)
 800124a:	4815      	ldr	r0, [pc, #84]	; (80012a0 <get_ntc_volt+0x128>)
 800124c:	f008 fdb6 	bl	8009dbc <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *)ntc_buff, strlen(ntc_buff), 100);
 8001250:	4813      	ldr	r0, [pc, #76]	; (80012a0 <get_ntc_volt+0x128>)
 8001252:	f7ff f85d 	bl	8000310 <strlen>
 8001256:	4603      	mov	r3, r0
 8001258:	b29a      	uxth	r2, r3
 800125a:	2364      	movs	r3, #100	; 0x64
 800125c:	4910      	ldr	r1, [pc, #64]	; (80012a0 <get_ntc_volt+0x128>)
 800125e:	4811      	ldr	r0, [pc, #68]	; (80012a4 <get_ntc_volt+0x12c>)
 8001260:	f006 ff7e 	bl	8008160 <HAL_UART_Transmit>
	HAL_ADC_Stop(adc);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f001 fb53 	bl	8002910 <HAL_ADC_Stop>

	return ntc_volt;
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <get_ntc_volt+0x120>)
 800126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001270:	ec43 2b17 	vmov	d7, r2, r3
}
 8001274:	eeb0 0b47 	vmov.f64	d0, d7
 8001278:	3730      	adds	r7, #48	; 0x30
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	66666666 	.word	0x66666666
 8001284:	400a6666 	.word	0x400a6666
 8001288:	00000000 	.word	0x00000000
 800128c:	40b00000 	.word	0x40b00000
 8001290:	240005d8 	.word	0x240005d8
 8001294:	25b00200 	.word	0x25b00200
 8001298:	240005d0 	.word	0x240005d0
 800129c:	0800c21c 	.word	0x0800c21c
 80012a0:	240004a0 	.word	0x240004a0
 80012a4:	2400076c 	.word	0x2400076c

080012a8 <get_ntc_temp_zone>:

temperature_level get_ntc_temp_zone(double ntc_volt){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	ed87 0b00 	vstr	d0, [r7]

	temperature_level temp_zone = TEMP_ERROR;
 80012b2:	2304      	movs	r3, #4
 80012b4:	73fb      	strb	r3, [r7, #15]

	if(ntc_volt >= NTC_20_DEG_VOLTAGE_VALUE && ntc_volt <= GPIO_MAX_VOLTAGE){
 80012b6:	ed97 7b00 	vldr	d7, [r7]
 80012ba:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80013a8 <get_ntc_temp_zone+0x100>
 80012be:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80012c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c6:	db0f      	blt.n	80012e8 <get_ntc_temp_zone+0x40>
 80012c8:	ed97 7b00 	vldr	d7, [r7]
 80012cc:	ed9f 6b38 	vldr	d6, [pc, #224]	; 80013b0 <get_ntc_temp_zone+0x108>
 80012d0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80012d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d8:	d806      	bhi.n	80012e8 <get_ntc_temp_zone+0x40>
		temp_zone = COLD;
 80012da:	2300      	movs	r3, #0
 80012dc:	73fb      	strb	r3, [r7, #15]
		sprintf(ntc_buff, "NTC TEMP ZONE: COLD \r\n\r\n");
 80012de:	493c      	ldr	r1, [pc, #240]	; (80013d0 <get_ntc_temp_zone+0x128>)
 80012e0:	483c      	ldr	r0, [pc, #240]	; (80013d4 <get_ntc_temp_zone+0x12c>)
 80012e2:	f008 fd6b 	bl	8009dbc <siprintf>
 80012e6:	e04e      	b.n	8001386 <get_ntc_temp_zone+0xde>
	}else if(ntc_volt >= NTC_40_DEG_VOLTAGE_VALUE && ntc_volt < NTC_20_DEG_VOLTAGE_VALUE){
 80012e8:	ed97 7b00 	vldr	d7, [r7]
 80012ec:	ed9f 6b32 	vldr	d6, [pc, #200]	; 80013b8 <get_ntc_temp_zone+0x110>
 80012f0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80012f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f8:	db0f      	blt.n	800131a <get_ntc_temp_zone+0x72>
 80012fa:	ed97 7b00 	vldr	d7, [r7]
 80012fe:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80013a8 <get_ntc_temp_zone+0x100>
 8001302:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130a:	d506      	bpl.n	800131a <get_ntc_temp_zone+0x72>
		temp_zone = NORMAL;
 800130c:	2301      	movs	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
		sprintf(ntc_buff, "NTC TEMP ZONE: NORMAL \r\n\r\n");
 8001310:	4931      	ldr	r1, [pc, #196]	; (80013d8 <get_ntc_temp_zone+0x130>)
 8001312:	4830      	ldr	r0, [pc, #192]	; (80013d4 <get_ntc_temp_zone+0x12c>)
 8001314:	f008 fd52 	bl	8009dbc <siprintf>
 8001318:	e035      	b.n	8001386 <get_ntc_temp_zone+0xde>
	}else if(ntc_volt >= NTC_60_DEG_VOLTAGE_VALUE && ntc_volt < NTC_40_DEG_VOLTAGE_VALUE){
 800131a:	ed97 7b00 	vldr	d7, [r7]
 800131e:	ed9f 6b28 	vldr	d6, [pc, #160]	; 80013c0 <get_ntc_temp_zone+0x118>
 8001322:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132a:	db0f      	blt.n	800134c <get_ntc_temp_zone+0xa4>
 800132c:	ed97 7b00 	vldr	d7, [r7]
 8001330:	ed9f 6b21 	vldr	d6, [pc, #132]	; 80013b8 <get_ntc_temp_zone+0x110>
 8001334:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133c:	d506      	bpl.n	800134c <get_ntc_temp_zone+0xa4>
		temp_zone = HOT;
 800133e:	2302      	movs	r3, #2
 8001340:	73fb      	strb	r3, [r7, #15]
		sprintf(ntc_buff, "NTC TEMP ZONE: HOT \r\n\r\n");
 8001342:	4926      	ldr	r1, [pc, #152]	; (80013dc <get_ntc_temp_zone+0x134>)
 8001344:	4823      	ldr	r0, [pc, #140]	; (80013d4 <get_ntc_temp_zone+0x12c>)
 8001346:	f008 fd39 	bl	8009dbc <siprintf>
 800134a:	e01c      	b.n	8001386 <get_ntc_temp_zone+0xde>
	}else if(ntc_volt >= NTC_125_DEG_VOLTAGE_VALUE && ntc_volt < NTC_60_DEG_VOLTAGE_VALUE){
 800134c:	ed97 7b00 	vldr	d7, [r7]
 8001350:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 80013c8 <get_ntc_temp_zone+0x120>
 8001354:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135c:	db0f      	blt.n	800137e <get_ntc_temp_zone+0xd6>
 800135e:	ed97 7b00 	vldr	d7, [r7]
 8001362:	ed9f 6b17 	vldr	d6, [pc, #92]	; 80013c0 <get_ntc_temp_zone+0x118>
 8001366:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800136a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136e:	d506      	bpl.n	800137e <get_ntc_temp_zone+0xd6>
		temp_zone = DANGER;
 8001370:	2303      	movs	r3, #3
 8001372:	73fb      	strb	r3, [r7, #15]
		sprintf(ntc_buff, "NTC TEMP ZONE: DANGER \r\n\r\n");
 8001374:	491a      	ldr	r1, [pc, #104]	; (80013e0 <get_ntc_temp_zone+0x138>)
 8001376:	4817      	ldr	r0, [pc, #92]	; (80013d4 <get_ntc_temp_zone+0x12c>)
 8001378:	f008 fd20 	bl	8009dbc <siprintf>
 800137c:	e003      	b.n	8001386 <get_ntc_temp_zone+0xde>
	}else{
		sprintf(ntc_buff, "NTC TEMP ZONE: NTC ERROR \r\n\r\n");
 800137e:	4919      	ldr	r1, [pc, #100]	; (80013e4 <get_ntc_temp_zone+0x13c>)
 8001380:	4814      	ldr	r0, [pc, #80]	; (80013d4 <get_ntc_temp_zone+0x12c>)
 8001382:	f008 fd1b 	bl	8009dbc <siprintf>
	}

	HAL_UART_Transmit(&huart3, (uint8_t *)ntc_buff, strlen(ntc_buff), 100);
 8001386:	4813      	ldr	r0, [pc, #76]	; (80013d4 <get_ntc_temp_zone+0x12c>)
 8001388:	f7fe ffc2 	bl	8000310 <strlen>
 800138c:	4603      	mov	r3, r0
 800138e:	b29a      	uxth	r2, r3
 8001390:	2364      	movs	r3, #100	; 0x64
 8001392:	4910      	ldr	r1, [pc, #64]	; (80013d4 <get_ntc_temp_zone+0x12c>)
 8001394:	4814      	ldr	r0, [pc, #80]	; (80013e8 <get_ntc_temp_zone+0x140>)
 8001396:	f006 fee3 	bl	8008160 <HAL_UART_Transmit>

	return temp_zone;
 800139a:	7bfb      	ldrb	r3, [r7, #15]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	f3af 8000 	nop.w
 80013a8:	ae147ae1 	.word	0xae147ae1
 80013ac:	4002e147 	.word	0x4002e147
 80013b0:	66666666 	.word	0x66666666
 80013b4:	400a6666 	.word	0x400a6666
 80013b8:	c2ce464a 	.word	0xc2ce464a
 80013bc:	3ff7b69e 	.word	0x3ff7b69e
 80013c0:	d0d4994a 	.word	0xd0d4994a
 80013c4:	3fede006 	.word	0x3fede006
 80013c8:	01b866e4 	.word	0x01b866e4
 80013cc:	3fca1f9f 	.word	0x3fca1f9f
 80013d0:	0800c22c 	.word	0x0800c22c
 80013d4:	240004a0 	.word	0x240004a0
 80013d8:	0800c248 	.word	0x0800c248
 80013dc:	0800c264 	.word	0x0800c264
 80013e0:	0800c27c 	.word	0x0800c27c
 80013e4:	0800c298 	.word	0x0800c298
 80013e8:	2400076c 	.word	0x2400076c
 80013ec:	00000000 	.word	0x00000000

080013f0 <get_ptc_volt>:
#include "usart.h"

double ptc_volt, ptc_adc_value;
char ptc_buff[BUFF_SIZE];

double get_ptc_volt(ADC_HandleTypeDef* adc, uint32_t timeout){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08c      	sub	sp, #48	; 0x30
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]

	ptc_adc_value = 0.0;
 80013fa:	4943      	ldr	r1, [pc, #268]	; (8001508 <get_ptc_volt+0x118>)
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	e9c1 2300 	strd	r2, r3, [r1]

	ADC_ChannelConfTypeDef sConfig = {0};
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	2224      	movs	r2, #36	; 0x24
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f008 f889 	bl	8009528 <memset>
	sConfig.Channel = PTC_CHANNEL;
 8001416:	4b3d      	ldr	r3, [pc, #244]	; (800150c <get_ptc_volt+0x11c>)
 8001418:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1; //F4 Version: 1;
 800141a:	2306      	movs	r3, #6
 800141c:	60fb      	str	r3, [r7, #12]

	sConfig.SingleDiff = ADC_SINGLE_ENDED; 				// Needed on H7
 800141e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001422:	617b      	str	r3, [r7, #20]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;				// Needed on H7
 8001424:	2304      	movs	r3, #4
 8001426:	61bb      	str	r3, [r7, #24]
	sConfig.Offset = 0;                      			// Needed on H7
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
	sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;		// Needed on H7
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.OffsetSaturation = DISABLE;					// Needed on H7
 8001430:	2300      	movs	r3, #0
 8001432:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	sConfig.SamplingTime = ADC3_SAMPLETIME_6CYCLES_5; //F4 Version: ADC_SAMPLETIME_144CYCLES;
 8001436:	2301      	movs	r3, #1
 8001438:	613b      	str	r3, [r7, #16]
	if(HAL_ADC_ConfigChannel(adc, &sConfig) != HAL_OK){
 800143a:	f107 0308 	add.w	r3, r7, #8
 800143e:	4619      	mov	r1, r3
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f001 fb9b 	bl	8002b7c <HAL_ADC_ConfigChannel>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <get_ptc_volt+0x60>
		Error_Handler();
 800144c:	f7ff fe8c 	bl	8001168 <Error_Handler>
	}

	HAL_ADC_Start(adc);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f001 f993 	bl	800277c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(adc, timeout);
 8001456:	6839      	ldr	r1, [r7, #0]
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f001 fa8d 	bl	8002978 <HAL_ADC_PollForConversion>

	for (uint8_t i = 0; i < SAMPLES; i++){
 800145e:	2300      	movs	r3, #0
 8001460:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001464:	e013      	b.n	800148e <get_ptc_volt+0x9e>
			ptc_adc_value += HAL_ADC_GetValue(adc);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f001 fb7a 	bl	8002b60 <HAL_ADC_GetValue>
 800146c:	ee07 0a90 	vmov	s15, r0
 8001470:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001474:	4b24      	ldr	r3, [pc, #144]	; (8001508 <get_ptc_volt+0x118>)
 8001476:	ed93 7b00 	vldr	d7, [r3]
 800147a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800147e:	4b22      	ldr	r3, [pc, #136]	; (8001508 <get_ptc_volt+0x118>)
 8001480:	ed83 7b00 	vstr	d7, [r3]
	for (uint8_t i = 0; i < SAMPLES; i++){
 8001484:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001488:	3301      	adds	r3, #1
 800148a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800148e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001492:	2b1d      	cmp	r3, #29
 8001494:	d9e7      	bls.n	8001466 <get_ptc_volt+0x76>
	}

	ptc_volt = (ptc_adc_value / SAMPLES) * GPIO_MAX_VOLTAGE / ADC_BIT_RESOLUTION;
 8001496:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <get_ptc_volt+0x118>)
 8001498:	ed93 6b00 	vldr	d6, [r3]
 800149c:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
 80014a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014a4:	ed9f 6b14 	vldr	d6, [pc, #80]	; 80014f8 <get_ptc_volt+0x108>
 80014a8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80014ac:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8001500 <get_ptc_volt+0x110>
 80014b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014b4:	4b16      	ldr	r3, [pc, #88]	; (8001510 <get_ptc_volt+0x120>)
 80014b6:	ed83 7b00 	vstr	d7, [r3]

//	sprintf(ptc_buff, "PTC ADC  %f [bit] \r\n", (ptc_adc_value / SAMPLES));
//	HAL_UART_Transmit(&huart3, (uint8_t *)ptc_buff, strlen(ptc_buff), 100);

	HAL_ADC_Stop(adc);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f001 fa28 	bl	8002910 <HAL_ADC_Stop>

	sprintf(ptc_buff, "PTC %f [V] \r\n", ptc_volt);
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <get_ptc_volt+0x120>)
 80014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c6:	4913      	ldr	r1, [pc, #76]	; (8001514 <get_ptc_volt+0x124>)
 80014c8:	4813      	ldr	r0, [pc, #76]	; (8001518 <get_ptc_volt+0x128>)
 80014ca:	f008 fc77 	bl	8009dbc <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)ptc_buff, strlen(ptc_buff), 100);
 80014ce:	4812      	ldr	r0, [pc, #72]	; (8001518 <get_ptc_volt+0x128>)
 80014d0:	f7fe ff1e 	bl	8000310 <strlen>
 80014d4:	4603      	mov	r3, r0
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	2364      	movs	r3, #100	; 0x64
 80014da:	490f      	ldr	r1, [pc, #60]	; (8001518 <get_ptc_volt+0x128>)
 80014dc:	480f      	ldr	r0, [pc, #60]	; (800151c <get_ptc_volt+0x12c>)
 80014de:	f006 fe3f 	bl	8008160 <HAL_UART_Transmit>
	return ptc_volt;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <get_ptc_volt+0x120>)
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	ec43 2b17 	vmov	d7, r2, r3
}
 80014ec:	eeb0 0b47 	vmov.f64	d0, d7
 80014f0:	3730      	adds	r7, #48	; 0x30
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	66666666 	.word	0x66666666
 80014fc:	400a6666 	.word	0x400a6666
 8001500:	00000000 	.word	0x00000000
 8001504:	40b00000 	.word	0x40b00000
 8001508:	240005e8 	.word	0x240005e8
 800150c:	10c00010 	.word	0x10c00010
 8001510:	240005e0 	.word	0x240005e0
 8001514:	0800c2b8 	.word	0x0800c2b8
 8001518:	240005f0 	.word	0x240005f0
 800151c:	2400076c 	.word	0x2400076c

08001520 <get_ptc_temp_zone>:

temperature_level  get_ptc_temp_zone(double ptc_volt){
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	ed87 0b00 	vstr	d0, [r7]
	temperature_level temp_zone = TEMP_ERROR;
 800152a:	2304      	movs	r3, #4
 800152c:	73fb      	strb	r3, [r7, #15]
	if( ptc_volt >= PTC_MIN_DEG_VOLTAGE_VALUE && ptc_volt < PTC_20_DEG_VOLTAGE_VALUE){
 800152e:	ed97 7b00 	vldr	d7, [r7]
 8001532:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8001620 <get_ptc_temp_zone+0x100>
 8001536:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800153a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153e:	db0f      	blt.n	8001560 <get_ptc_temp_zone+0x40>
 8001540:	ed97 7b00 	vldr	d7, [r7]
 8001544:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8001628 <get_ptc_temp_zone+0x108>
 8001548:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800154c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001550:	d506      	bpl.n	8001560 <get_ptc_temp_zone+0x40>
		temp_zone = COLD;
 8001552:	2300      	movs	r3, #0
 8001554:	73fb      	strb	r3, [r7, #15]
		sprintf(ptc_buff, "PT1000 TEMP ZONE: COLD  \r\n\r\n");
 8001556:	493c      	ldr	r1, [pc, #240]	; (8001648 <get_ptc_temp_zone+0x128>)
 8001558:	483c      	ldr	r0, [pc, #240]	; (800164c <get_ptc_temp_zone+0x12c>)
 800155a:	f008 fc2f 	bl	8009dbc <siprintf>
 800155e:	e04e      	b.n	80015fe <get_ptc_temp_zone+0xde>
	} else if(ptc_volt >= PTC_20_DEG_VOLTAGE_VALUE && ptc_volt < PTC_40_DEG_VOLTAGE_VALUE){
 8001560:	ed97 7b00 	vldr	d7, [r7]
 8001564:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8001628 <get_ptc_temp_zone+0x108>
 8001568:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800156c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001570:	db0f      	blt.n	8001592 <get_ptc_temp_zone+0x72>
 8001572:	ed97 7b00 	vldr	d7, [r7]
 8001576:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8001630 <get_ptc_temp_zone+0x110>
 800157a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800157e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001582:	d506      	bpl.n	8001592 <get_ptc_temp_zone+0x72>
		temp_zone = NORMAL;
 8001584:	2301      	movs	r3, #1
 8001586:	73fb      	strb	r3, [r7, #15]
		sprintf(ptc_buff, "PT1000 TEMP ZONE: NORMAL  \r\n\r\n");
 8001588:	4931      	ldr	r1, [pc, #196]	; (8001650 <get_ptc_temp_zone+0x130>)
 800158a:	4830      	ldr	r0, [pc, #192]	; (800164c <get_ptc_temp_zone+0x12c>)
 800158c:	f008 fc16 	bl	8009dbc <siprintf>
 8001590:	e035      	b.n	80015fe <get_ptc_temp_zone+0xde>
	} else if(ptc_volt >= PTC_40_DEG_VOLTAGE_VALUE && ptc_volt < PTC_60_DEG_VOLTAGE_VALUE){
 8001592:	ed97 7b00 	vldr	d7, [r7]
 8001596:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8001630 <get_ptc_temp_zone+0x110>
 800159a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800159e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a2:	db0f      	blt.n	80015c4 <get_ptc_temp_zone+0xa4>
 80015a4:	ed97 7b00 	vldr	d7, [r7]
 80015a8:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8001638 <get_ptc_temp_zone+0x118>
 80015ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80015b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b4:	d506      	bpl.n	80015c4 <get_ptc_temp_zone+0xa4>
		temp_zone = HOT;
 80015b6:	2302      	movs	r3, #2
 80015b8:	73fb      	strb	r3, [r7, #15]
		sprintf(ptc_buff, "PT1000 TEMP ZONE: HOT  \r\n\r\n");
 80015ba:	4926      	ldr	r1, [pc, #152]	; (8001654 <get_ptc_temp_zone+0x134>)
 80015bc:	4823      	ldr	r0, [pc, #140]	; (800164c <get_ptc_temp_zone+0x12c>)
 80015be:	f008 fbfd 	bl	8009dbc <siprintf>
 80015c2:	e01c      	b.n	80015fe <get_ptc_temp_zone+0xde>
	} else if(ptc_volt >= PTC_60_DEG_VOLTAGE_VALUE && ptc_volt <= PTC_MAX_DEG_VOLTAGE_VALUE){
 80015c4:	ed97 7b00 	vldr	d7, [r7]
 80015c8:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8001638 <get_ptc_temp_zone+0x118>
 80015cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80015d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d4:	db0f      	blt.n	80015f6 <get_ptc_temp_zone+0xd6>
 80015d6:	ed97 7b00 	vldr	d7, [r7]
 80015da:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8001640 <get_ptc_temp_zone+0x120>
 80015de:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80015e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e6:	d806      	bhi.n	80015f6 <get_ptc_temp_zone+0xd6>
		temp_zone = DANGER;
 80015e8:	2303      	movs	r3, #3
 80015ea:	73fb      	strb	r3, [r7, #15]
		sprintf(ptc_buff, "PT1000 TEMP ZONE: DANGER  \r\n\r\n");
 80015ec:	491a      	ldr	r1, [pc, #104]	; (8001658 <get_ptc_temp_zone+0x138>)
 80015ee:	4817      	ldr	r0, [pc, #92]	; (800164c <get_ptc_temp_zone+0x12c>)
 80015f0:	f008 fbe4 	bl	8009dbc <siprintf>
 80015f4:	e003      	b.n	80015fe <get_ptc_temp_zone+0xde>
	} else {
		sprintf(ptc_buff, "PT1000 TEMP ZONE: ERROR  \r\n\r\n");
 80015f6:	4919      	ldr	r1, [pc, #100]	; (800165c <get_ptc_temp_zone+0x13c>)
 80015f8:	4814      	ldr	r0, [pc, #80]	; (800164c <get_ptc_temp_zone+0x12c>)
 80015fa:	f008 fbdf 	bl	8009dbc <siprintf>
	}
	HAL_UART_Transmit(&huart3, (uint8_t*)ptc_buff, strlen(ptc_buff), 100);
 80015fe:	4813      	ldr	r0, [pc, #76]	; (800164c <get_ptc_temp_zone+0x12c>)
 8001600:	f7fe fe86 	bl	8000310 <strlen>
 8001604:	4603      	mov	r3, r0
 8001606:	b29a      	uxth	r2, r3
 8001608:	2364      	movs	r3, #100	; 0x64
 800160a:	4910      	ldr	r1, [pc, #64]	; (800164c <get_ptc_temp_zone+0x12c>)
 800160c:	4814      	ldr	r0, [pc, #80]	; (8001660 <get_ptc_temp_zone+0x140>)
 800160e:	f006 fda7 	bl	8008160 <HAL_UART_Transmit>
	return temp_zone;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	f3af 8000 	nop.w
 8001620:	45a1cac1 	.word	0x45a1cac1
 8001624:	3ffbf3b6 	.word	0x3ffbf3b6
 8001628:	189374bc 	.word	0x189374bc
 800162c:	40015604 	.word	0x40015604
 8001630:	66666666 	.word	0x66666666
 8001634:	40026666 	.word	0x40026666
 8001638:	d70a3d71 	.word	0xd70a3d71
 800163c:	400370a3 	.word	0x400370a3
 8001640:	66666666 	.word	0x66666666
 8001644:	40066666 	.word	0x40066666
 8001648:	0800c2c8 	.word	0x0800c2c8
 800164c:	240005f0 	.word	0x240005f0
 8001650:	0800c2e8 	.word	0x0800c2e8
 8001654:	0800c308 	.word	0x0800c308
 8001658:	0800c324 	.word	0x0800c324
 800165c:	0800c344 	.word	0x0800c344
 8001660:	2400076c 	.word	0x2400076c

08001664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <HAL_MspInit+0x30>)
 800166c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001670:	4a08      	ldr	r2, [pc, #32]	; (8001694 <HAL_MspInit+0x30>)
 8001672:	f043 0302 	orr.w	r3, r3, #2
 8001676:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_MspInit+0x30>)
 800167c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	58024400 	.word	0x58024400

08001698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800169c:	e7fe      	b.n	800169c <NMI_Handler+0x4>

0800169e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <HardFault_Handler+0x4>

080016a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <MemManage_Handler+0x4>

080016aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <BusFault_Handler+0x4>

080016b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <UsageFault_Handler+0x4>

080016b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e4:	f000 fafe 	bl	8001ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}

080016ec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <TIM7_IRQHandler+0x10>)
 80016f2:	f006 fa3e 	bl	8007b72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	24000720 	.word	0x24000720

08001700 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
	return 1;
 8001704:	2301      	movs	r3, #1
}
 8001706:	4618      	mov	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <_kill>:

int _kill(int pid, int sig)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800171a:	f007 fedb 	bl	80094d4 <__errno>
 800171e:	4603      	mov	r3, r0
 8001720:	2216      	movs	r2, #22
 8001722:	601a      	str	r2, [r3, #0]
	return -1;
 8001724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <_exit>:

void _exit (int status)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001738:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ffe7 	bl	8001710 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001742:	e7fe      	b.n	8001742 <_exit+0x12>

08001744 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	e00a      	b.n	800176c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001756:	f3af 8000 	nop.w
 800175a:	4601      	mov	r1, r0
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	60ba      	str	r2, [r7, #8]
 8001762:	b2ca      	uxtb	r2, r1
 8001764:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3301      	adds	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	429a      	cmp	r2, r3
 8001772:	dbf0      	blt.n	8001756 <_read+0x12>
	}

return len;
 8001774:	687b      	ldr	r3, [r7, #4]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b086      	sub	sp, #24
 8001782:	af00      	add	r7, sp, #0
 8001784:	60f8      	str	r0, [r7, #12]
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	e009      	b.n	80017a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	60ba      	str	r2, [r7, #8]
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	3301      	adds	r3, #1
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	dbf1      	blt.n	8001790 <_write+0x12>
	}
	return len;
 80017ac:	687b      	ldr	r3, [r7, #4]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <_close>:

int _close(int file)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
	return -1;
 80017be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017de:	605a      	str	r2, [r3, #4]
	return 0;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <_isatty>:

int _isatty(int file)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
	return 1;
 80017f6:	2301      	movs	r3, #1
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
	return 0;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001828:	4a14      	ldr	r2, [pc, #80]	; (800187c <_sbrk+0x5c>)
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <_sbrk+0x60>)
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <_sbrk+0x64>)
 800183e:	4a12      	ldr	r2, [pc, #72]	; (8001888 <_sbrk+0x68>)
 8001840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	429a      	cmp	r2, r3
 800184e:	d207      	bcs.n	8001860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001850:	f007 fe40 	bl	80094d4 <__errno>
 8001854:	4603      	mov	r3, r0
 8001856:	220c      	movs	r2, #12
 8001858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800185e:	e009      	b.n	8001874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	4a05      	ldr	r2, [pc, #20]	; (8001884 <_sbrk+0x64>)
 8001870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	24050000 	.word	0x24050000
 8001880:	00000400 	.word	0x00000400
 8001884:	2400071c 	.word	0x2400071c
 8001888:	24000810 	.word	0x24000810

0800188c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001890:	4b32      	ldr	r3, [pc, #200]	; (800195c <SystemInit+0xd0>)
 8001892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001896:	4a31      	ldr	r2, [pc, #196]	; (800195c <SystemInit+0xd0>)
 8001898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800189c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018a0:	4b2f      	ldr	r3, [pc, #188]	; (8001960 <SystemInit+0xd4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 030f 	and.w	r3, r3, #15
 80018a8:	2b06      	cmp	r3, #6
 80018aa:	d807      	bhi.n	80018bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018ac:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <SystemInit+0xd4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f023 030f 	bic.w	r3, r3, #15
 80018b4:	4a2a      	ldr	r2, [pc, #168]	; (8001960 <SystemInit+0xd4>)
 80018b6:	f043 0307 	orr.w	r3, r3, #7
 80018ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80018bc:	4b29      	ldr	r3, [pc, #164]	; (8001964 <SystemInit+0xd8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a28      	ldr	r2, [pc, #160]	; (8001964 <SystemInit+0xd8>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018c8:	4b26      	ldr	r3, [pc, #152]	; (8001964 <SystemInit+0xd8>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018ce:	4b25      	ldr	r3, [pc, #148]	; (8001964 <SystemInit+0xd8>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	4924      	ldr	r1, [pc, #144]	; (8001964 <SystemInit+0xd8>)
 80018d4:	4b24      	ldr	r3, [pc, #144]	; (8001968 <SystemInit+0xdc>)
 80018d6:	4013      	ands	r3, r2
 80018d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018da:	4b21      	ldr	r3, [pc, #132]	; (8001960 <SystemInit+0xd4>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d007      	beq.n	80018f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018e6:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <SystemInit+0xd4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f023 030f 	bic.w	r3, r3, #15
 80018ee:	4a1c      	ldr	r2, [pc, #112]	; (8001960 <SystemInit+0xd4>)
 80018f0:	f043 0307 	orr.w	r3, r3, #7
 80018f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <SystemInit+0xd8>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80018fc:	4b19      	ldr	r3, [pc, #100]	; (8001964 <SystemInit+0xd8>)
 80018fe:	2200      	movs	r2, #0
 8001900:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001902:	4b18      	ldr	r3, [pc, #96]	; (8001964 <SystemInit+0xd8>)
 8001904:	2200      	movs	r2, #0
 8001906:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001908:	4b16      	ldr	r3, [pc, #88]	; (8001964 <SystemInit+0xd8>)
 800190a:	4a18      	ldr	r2, [pc, #96]	; (800196c <SystemInit+0xe0>)
 800190c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <SystemInit+0xd8>)
 8001910:	4a17      	ldr	r2, [pc, #92]	; (8001970 <SystemInit+0xe4>)
 8001912:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <SystemInit+0xd8>)
 8001916:	4a17      	ldr	r2, [pc, #92]	; (8001974 <SystemInit+0xe8>)
 8001918:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800191a:	4b12      	ldr	r3, [pc, #72]	; (8001964 <SystemInit+0xd8>)
 800191c:	2200      	movs	r2, #0
 800191e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001920:	4b10      	ldr	r3, [pc, #64]	; (8001964 <SystemInit+0xd8>)
 8001922:	4a14      	ldr	r2, [pc, #80]	; (8001974 <SystemInit+0xe8>)
 8001924:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <SystemInit+0xd8>)
 8001928:	2200      	movs	r2, #0
 800192a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800192c:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <SystemInit+0xd8>)
 800192e:	4a11      	ldr	r2, [pc, #68]	; (8001974 <SystemInit+0xe8>)
 8001930:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <SystemInit+0xd8>)
 8001934:	2200      	movs	r2, #0
 8001936:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001938:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <SystemInit+0xd8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a09      	ldr	r2, [pc, #36]	; (8001964 <SystemInit+0xd8>)
 800193e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001942:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001944:	4b07      	ldr	r3, [pc, #28]	; (8001964 <SystemInit+0xd8>)
 8001946:	2200      	movs	r2, #0
 8001948:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <SystemInit+0xec>)
 800194c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001950:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00
 8001960:	52002000 	.word	0x52002000
 8001964:	58024400 	.word	0x58024400
 8001968:	eaf6ed7f 	.word	0xeaf6ed7f
 800196c:	02020200 	.word	0x02020200
 8001970:	01ff0000 	.word	0x01ff0000
 8001974:	01010280 	.word	0x01010280
 8001978:	52004000 	.word	0x52004000

0800197c <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800198c:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <MX_TIM7_Init+0x64>)
 800198e:	4a15      	ldr	r2, [pc, #84]	; (80019e4 <MX_TIM7_Init+0x68>)
 8001990:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 110;
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <MX_TIM7_Init+0x64>)
 8001994:	226e      	movs	r2, #110	; 0x6e
 8001996:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <MX_TIM7_Init+0x64>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10;
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <MX_TIM7_Init+0x64>)
 80019a0:	220a      	movs	r2, #10
 80019a2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a4:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <MX_TIM7_Init+0x64>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80019aa:	480d      	ldr	r0, [pc, #52]	; (80019e0 <MX_TIM7_Init+0x64>)
 80019ac:	f005 ffd4 	bl	8007958 <HAL_TIM_Base_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80019b6:	f7ff fbd7 	bl	8001168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	4619      	mov	r1, r3
 80019c6:	4806      	ldr	r0, [pc, #24]	; (80019e0 <MX_TIM7_Init+0x64>)
 80019c8:	f006 fac0 	bl	8007f4c <HAL_TIMEx_MasterConfigSynchronization>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80019d2:	f7ff fbc9 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80019d6:	bf00      	nop
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	24000720 	.word	0x24000720
 80019e4:	40001400 	.word	0x40001400

080019e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0e      	ldr	r2, [pc, #56]	; (8001a30 <HAL_TIM_Base_MspInit+0x48>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d116      	bne.n	8001a28 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <HAL_TIM_Base_MspInit+0x4c>)
 80019fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a00:	4a0c      	ldr	r2, [pc, #48]	; (8001a34 <HAL_TIM_Base_MspInit+0x4c>)
 8001a02:	f043 0320 	orr.w	r3, r3, #32
 8001a06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <HAL_TIM_Base_MspInit+0x4c>)
 8001a0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a10:	f003 0320 	and.w	r3, r3, #32
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	2037      	movs	r0, #55	; 0x37
 8001a1e:	f002 f946 	bl	8003cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001a22:	2037      	movs	r0, #55	; 0x37
 8001a24:	f002 f95d 	bl	8003ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40001400 	.word	0x40001400
 8001a34:	58024400 	.word	0x58024400

08001a38 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a3c:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001a3e:	4a23      	ldr	r2, [pc, #140]	; (8001acc <MX_USART3_UART_Init+0x94>)
 8001a40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a42:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4a:	4b1f      	ldr	r3, [pc, #124]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a50:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a56:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001a5e:	220c      	movs	r2, #12
 8001a60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a62:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a68:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a6e:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a80:	4811      	ldr	r0, [pc, #68]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001a82:	f006 fb1d 	bl	80080c0 <HAL_UART_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001a8c:	f7ff fb6c 	bl	8001168 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a90:	2100      	movs	r1, #0
 8001a92:	480d      	ldr	r0, [pc, #52]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001a94:	f007 fc54 	bl	8009340 <HAL_UARTEx_SetTxFifoThreshold>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001a9e:	f7ff fb63 	bl	8001168 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4808      	ldr	r0, [pc, #32]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001aa6:	f007 fc89 	bl	80093bc <HAL_UARTEx_SetRxFifoThreshold>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001ab0:	f7ff fb5a 	bl	8001168 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001ab4:	4804      	ldr	r0, [pc, #16]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001ab6:	f007 fc0a 	bl	80092ce <HAL_UARTEx_DisableFifoMode>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001ac0:	f7ff fb52 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	2400076c 	.word	0x2400076c
 8001acc:	40004800 	.word	0x40004800

08001ad0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b0b6      	sub	sp, #216	; 0xd8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ae8:	f107 0310 	add.w	r3, r7, #16
 8001aec:	22b4      	movs	r2, #180	; 0xb4
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f007 fd19 	bl	8009528 <memset>
  if(uartHandle->Instance==USART3)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a25      	ldr	r2, [pc, #148]	; (8001b90 <HAL_UART_MspInit+0xc0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d142      	bne.n	8001b86 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b00:	2302      	movs	r3, #2
 8001b02:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b04:	2300      	movs	r3, #0
 8001b06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b0a:	f107 0310 	add.w	r3, r7, #16
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f003 fe8e 	bl	8005830 <HAL_RCCEx_PeriphCLKConfig>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b1a:	f7ff fb25 	bl	8001168 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b1e:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <HAL_UART_MspInit+0xc4>)
 8001b20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b24:	4a1b      	ldr	r2, [pc, #108]	; (8001b94 <HAL_UART_MspInit+0xc4>)
 8001b26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b2e:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <HAL_UART_MspInit+0xc4>)
 8001b30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b3c:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <HAL_UART_MspInit+0xc4>)
 8001b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b42:	4a14      	ldr	r2, [pc, #80]	; (8001b94 <HAL_UART_MspInit+0xc4>)
 8001b44:	f043 0308 	orr.w	r3, r3, #8
 8001b48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_UART_MspInit+0xc4>)
 8001b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001b5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b74:	2307      	movs	r3, #7
 8001b76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b7a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4805      	ldr	r0, [pc, #20]	; (8001b98 <HAL_UART_MspInit+0xc8>)
 8001b82:	f002 fced 	bl	8004560 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b86:	bf00      	nop
 8001b88:	37d8      	adds	r7, #216	; 0xd8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40004800 	.word	0x40004800
 8001b94:	58024400 	.word	0x58024400
 8001b98:	58020c00 	.word	0x58020c00

08001b9c <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bb0:	f7ff fe6c 	bl	800188c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bb4:	480c      	ldr	r0, [pc, #48]	; (8001be8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bb6:	490d      	ldr	r1, [pc, #52]	; (8001bec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bbc:	e002      	b.n	8001bc4 <LoopCopyDataInit>

08001bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bc2:	3304      	adds	r3, #4

08001bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc8:	d3f9      	bcc.n	8001bbe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bca:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bcc:	4c0a      	ldr	r4, [pc, #40]	; (8001bf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd0:	e001      	b.n	8001bd6 <LoopFillZerobss>

08001bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd4:	3204      	adds	r2, #4

08001bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd8:	d3fb      	bcc.n	8001bd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bda:	f007 fc81 	bl	80094e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bde:	f7ff f89b 	bl	8000d18 <main>
  bx  lr
 8001be2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001be4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001be8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001bec:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 8001bf0:	0800c784 	.word	0x0800c784
  ldr r2, =_sbss
 8001bf4:	240002a8 	.word	0x240002a8
  ldr r4, =_ebss
 8001bf8:	24000810 	.word	0x24000810

08001bfc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bfc:	e7fe      	b.n	8001bfc <ADC3_IRQHandler>
	...

08001c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c06:	2003      	movs	r0, #3
 8001c08:	f002 f846 	bl	8003c98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c0c:	f003 fc3a 	bl	8005484 <HAL_RCC_GetSysClockFreq>
 8001c10:	4602      	mov	r2, r0
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <HAL_Init+0x68>)
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	0a1b      	lsrs	r3, r3, #8
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	4913      	ldr	r1, [pc, #76]	; (8001c6c <HAL_Init+0x6c>)
 8001c1e:	5ccb      	ldrb	r3, [r1, r3]
 8001c20:	f003 031f 	and.w	r3, r3, #31
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
 8001c28:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <HAL_Init+0x68>)
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	4a0e      	ldr	r2, [pc, #56]	; (8001c6c <HAL_Init+0x6c>)
 8001c34:	5cd3      	ldrb	r3, [r2, r3]
 8001c36:	f003 031f 	and.w	r3, r3, #31
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c40:	4a0b      	ldr	r2, [pc, #44]	; (8001c70 <HAL_Init+0x70>)
 8001c42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c44:	4a0b      	ldr	r2, [pc, #44]	; (8001c74 <HAL_Init+0x74>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f000 f814 	bl	8001c78 <HAL_InitTick>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e002      	b.n	8001c60 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c5a:	f7ff fd03 	bl	8001664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	58024400 	.word	0x58024400
 8001c6c:	0800c364 	.word	0x0800c364
 8001c70:	24000008 	.word	0x24000008
 8001c74:	24000004 	.word	0x24000004

08001c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c80:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <HAL_InitTick+0x60>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e021      	b.n	8001cd0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <HAL_InitTick+0x64>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <HAL_InitTick+0x60>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	4619      	mov	r1, r3
 8001c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f002 f82b 	bl	8003cfe <HAL_SYSTICK_Config>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e00e      	b.n	8001cd0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b0f      	cmp	r3, #15
 8001cb6:	d80a      	bhi.n	8001cce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cc0:	f001 fff5 	bl	8003cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cc4:	4a06      	ldr	r2, [pc, #24]	; (8001ce0 <HAL_InitTick+0x68>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e000      	b.n	8001cd0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	24000010 	.word	0x24000010
 8001cdc:	24000004 	.word	0x24000004
 8001ce0:	2400000c 	.word	0x2400000c

08001ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_IncTick+0x20>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_IncTick+0x24>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <HAL_IncTick+0x24>)
 8001cf6:	6013      	str	r3, [r2, #0]
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	24000010 	.word	0x24000010
 8001d08:	240007fc 	.word	0x240007fc

08001d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d10:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <HAL_GetTick+0x14>)
 8001d12:	681b      	ldr	r3, [r3, #0]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	240007fc 	.word	0x240007fc

08001d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d2c:	f7ff ffee 	bl	8001d0c <HAL_GetTick>
 8001d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d3c:	d005      	beq.n	8001d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_Delay+0x44>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4413      	add	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d4a:	bf00      	nop
 8001d4c:	f7ff ffde 	bl	8001d0c <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d8f7      	bhi.n	8001d4c <HAL_Delay+0x28>
  {
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	24000010 	.word	0x24000010

08001d6c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001d7c:	4904      	ldr	r1, [pc, #16]	; (8001d90 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	58000400 	.word	0x58000400

08001d94 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	609a      	str	r2, [r3, #8]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	3360      	adds	r3, #96	; 0x60
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4a10      	ldr	r2, [pc, #64]	; (8001e5c <LL_ADC_SetOffset+0x60>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d10b      	bne.n	8001e38 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001e36:	e00b      	b.n	8001e50 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	601a      	str	r2, [r3, #0]
}
 8001e50:	bf00      	nop
 8001e52:	371c      	adds	r7, #28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	58026000 	.word	0x58026000

08001e60 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3360      	adds	r3, #96	; 0x60
 8001e6e:	461a      	mov	r2, r3
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	f003 031f 	and.w	r3, r3, #31
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eac:	431a      	orrs	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	611a      	str	r2, [r3, #16]
}
 8001eb2:	bf00      	nop
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4a0c      	ldr	r2, [pc, #48]	; (8001f00 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d00e      	beq.n	8001ef2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	3360      	adds	r3, #96	; 0x60
 8001ed8:	461a      	mov	r2, r3
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	431a      	orrs	r2, r3
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	601a      	str	r2, [r3, #0]
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	371c      	adds	r7, #28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	58026000 	.word	0x58026000

08001f04 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b087      	sub	sp, #28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4a0c      	ldr	r2, [pc, #48]	; (8001f44 <LL_ADC_SetOffsetSaturation+0x40>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d10e      	bne.n	8001f36 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	3360      	adds	r3, #96	; 0x60
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	431a      	orrs	r2, r3
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8001f36:	bf00      	nop
 8001f38:	371c      	adds	r7, #28
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	58026000 	.word	0x58026000

08001f48 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4a0c      	ldr	r2, [pc, #48]	; (8001f88 <LL_ADC_SetOffsetSign+0x40>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d10e      	bne.n	8001f7a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	3360      	adds	r3, #96	; 0x60
 8001f60:	461a      	mov	r2, r3
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	431a      	orrs	r2, r3
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	371c      	adds	r7, #28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	58026000 	.word	0x58026000

08001f8c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	3360      	adds	r3, #96	; 0x60
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4a0c      	ldr	r2, [pc, #48]	; (8001fdc <LL_ADC_SetOffsetState+0x50>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d108      	bne.n	8001fc0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8001fbe:	e007      	b.n	8001fd0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	601a      	str	r2, [r3, #0]
}
 8001fd0:	bf00      	nop
 8001fd2:	371c      	adds	r7, #28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	58026000 	.word	0x58026000

08001fe0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e000      	b.n	8001ffa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002006:	b480      	push	{r7}
 8002008:	b087      	sub	sp, #28
 800200a:	af00      	add	r7, sp, #0
 800200c:	60f8      	str	r0, [r7, #12]
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	3330      	adds	r3, #48	; 0x30
 8002016:	461a      	mov	r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	0a1b      	lsrs	r3, r3, #8
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	4413      	add	r3, r2
 8002024:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	211f      	movs	r1, #31
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	401a      	ands	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	0e9b      	lsrs	r3, r3, #26
 800203e:	f003 011f 	and.w	r1, r3, #31
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	f003 031f 	and.w	r3, r3, #31
 8002048:	fa01 f303 	lsl.w	r3, r1, r3
 800204c:	431a      	orrs	r2, r3
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002052:	bf00      	nop
 8002054:	371c      	adds	r7, #28
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800205e:	b480      	push	{r7}
 8002060:	b087      	sub	sp, #28
 8002062:	af00      	add	r7, sp, #0
 8002064:	60f8      	str	r0, [r7, #12]
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	3314      	adds	r3, #20
 800206e:	461a      	mov	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	0e5b      	lsrs	r3, r3, #25
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	4413      	add	r3, r2
 800207c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	0d1b      	lsrs	r3, r3, #20
 8002086:	f003 031f 	and.w	r3, r3, #31
 800208a:	2107      	movs	r1, #7
 800208c:	fa01 f303 	lsl.w	r3, r1, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	401a      	ands	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	0d1b      	lsrs	r3, r3, #20
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	fa01 f303 	lsl.w	r3, r1, r3
 80020a2:	431a      	orrs	r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020a8:	bf00      	nop
 80020aa:	371c      	adds	r7, #28
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4a1a      	ldr	r2, [pc, #104]	; (800212c <LL_ADC_SetChannelSingleDiff+0x78>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d115      	bne.n	80020f4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020d4:	43db      	mvns	r3, r3
 80020d6:	401a      	ands	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f003 0318 	and.w	r3, r3, #24
 80020de:	4914      	ldr	r1, [pc, #80]	; (8002130 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80020e0:	40d9      	lsrs	r1, r3
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	400b      	ands	r3, r1
 80020e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020ea:	431a      	orrs	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80020f2:	e014      	b.n	800211e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002100:	43db      	mvns	r3, r3
 8002102:	401a      	ands	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f003 0318 	and.w	r3, r3, #24
 800210a:	4909      	ldr	r1, [pc, #36]	; (8002130 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800210c:	40d9      	lsrs	r1, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	400b      	ands	r3, r1
 8002112:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002116:	431a      	orrs	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800211e:	bf00      	nop
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	58026000 	.word	0x58026000
 8002130:	000fffff 	.word	0x000fffff

08002134 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 031f 	and.w	r3, r3, #31
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <LL_ADC_DisableDeepPowerDown+0x20>)
 800217a:	4013      	ands	r3, r2
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6093      	str	r3, [r2, #8]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	5fffffc0 	.word	0x5fffffc0

08002190 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021a4:	d101      	bne.n	80021aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <LL_ADC_EnableInternalRegulator+0x24>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	6fffffc0 	.word	0x6fffffc0

080021e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021f4:	d101      	bne.n	80021fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <LL_ADC_Enable+0x24>)
 8002216:	4013      	ands	r3, r2
 8002218:	f043 0201 	orr.w	r2, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	7fffffc0 	.word	0x7fffffc0

08002230 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <LL_ADC_Disable+0x24>)
 800223e:	4013      	ands	r3, r2
 8002240:	f043 0202 	orr.w	r2, r3, #2
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	7fffffc0 	.word	0x7fffffc0

08002258 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <LL_ADC_IsEnabled+0x18>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <LL_ADC_IsEnabled+0x1a>
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b02      	cmp	r3, #2
 8002290:	d101      	bne.n	8002296 <LL_ADC_IsDisableOngoing+0x18>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <LL_ADC_IsDisableOngoing+0x1a>
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <LL_ADC_REG_StartConversion+0x24>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	f043 0204 	orr.w	r2, r3, #4
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	7fffffc0 	.word	0x7fffffc0

080022cc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <LL_ADC_REG_StopConversion+0x24>)
 80022da:	4013      	ands	r3, r2
 80022dc:	f043 0210 	orr.w	r2, r3, #16
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	7fffffc0 	.word	0x7fffffc0

080022f4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b04      	cmp	r3, #4
 8002306:	d101      	bne.n	800230c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	4b05      	ldr	r3, [pc, #20]	; (8002340 <LL_ADC_INJ_StopConversion+0x24>)
 800232a:	4013      	ands	r3, r2
 800232c:	f043 0220 	orr.w	r2, r3, #32
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	7fffffc0 	.word	0x7fffffc0

08002344 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b08      	cmp	r3, #8
 8002356:	d101      	bne.n	800235c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800236c:	b590      	push	{r4, r7, lr}
 800236e:	b089      	sub	sp, #36	; 0x24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002378:	2300      	movs	r3, #0
 800237a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e1ee      	b.n	8002764 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002390:	2b00      	cmp	r3, #0
 8002392:	d109      	bne.n	80023a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7fe fa07 	bl	80007a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff feef 	bl	8002190 <LL_ADC_IsDeepPowerDownEnabled>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d004      	beq.n	80023c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fed5 	bl	800216c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff ff0a 	bl	80021e0 <LL_ADC_IsInternalRegulatorEnabled>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d114      	bne.n	80023fc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff feee 	bl	80021b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023dc:	4b8e      	ldr	r3, [pc, #568]	; (8002618 <HAL_ADC_Init+0x2ac>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	099b      	lsrs	r3, r3, #6
 80023e2:	4a8e      	ldr	r2, [pc, #568]	; (800261c <HAL_ADC_Init+0x2b0>)
 80023e4:	fba2 2303 	umull	r2, r3, r2, r3
 80023e8:	099b      	lsrs	r3, r3, #6
 80023ea:	3301      	adds	r3, #1
 80023ec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023ee:	e002      	b.n	80023f6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f9      	bne.n	80023f0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff feed 	bl	80021e0 <LL_ADC_IsInternalRegulatorEnabled>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10d      	bne.n	8002428 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002410:	f043 0210 	orr.w	r2, r3, #16
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800241c:	f043 0201 	orr.w	r2, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff61 	bl	80022f4 <LL_ADC_REG_IsConversionOngoing>
 8002432:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002438:	f003 0310 	and.w	r3, r3, #16
 800243c:	2b00      	cmp	r3, #0
 800243e:	f040 8188 	bne.w	8002752 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2b00      	cmp	r3, #0
 8002446:	f040 8184 	bne.w	8002752 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800244e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002452:	f043 0202 	orr.w	r2, r3, #2
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fefa 	bl	8002258 <LL_ADC_IsEnabled>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d136      	bne.n	80024d8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a6c      	ldr	r2, [pc, #432]	; (8002620 <HAL_ADC_Init+0x2b4>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d004      	beq.n	800247e <HAL_ADC_Init+0x112>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a6a      	ldr	r2, [pc, #424]	; (8002624 <HAL_ADC_Init+0x2b8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d10e      	bne.n	800249c <HAL_ADC_Init+0x130>
 800247e:	4868      	ldr	r0, [pc, #416]	; (8002620 <HAL_ADC_Init+0x2b4>)
 8002480:	f7ff feea 	bl	8002258 <LL_ADC_IsEnabled>
 8002484:	4604      	mov	r4, r0
 8002486:	4867      	ldr	r0, [pc, #412]	; (8002624 <HAL_ADC_Init+0x2b8>)
 8002488:	f7ff fee6 	bl	8002258 <LL_ADC_IsEnabled>
 800248c:	4603      	mov	r3, r0
 800248e:	4323      	orrs	r3, r4
 8002490:	2b00      	cmp	r3, #0
 8002492:	bf0c      	ite	eq
 8002494:	2301      	moveq	r3, #1
 8002496:	2300      	movne	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	e008      	b.n	80024ae <HAL_ADC_Init+0x142>
 800249c:	4862      	ldr	r0, [pc, #392]	; (8002628 <HAL_ADC_Init+0x2bc>)
 800249e:	f7ff fedb 	bl	8002258 <LL_ADC_IsEnabled>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	bf0c      	ite	eq
 80024a8:	2301      	moveq	r3, #1
 80024aa:	2300      	movne	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d012      	beq.n	80024d8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a5a      	ldr	r2, [pc, #360]	; (8002620 <HAL_ADC_Init+0x2b4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d004      	beq.n	80024c6 <HAL_ADC_Init+0x15a>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a58      	ldr	r2, [pc, #352]	; (8002624 <HAL_ADC_Init+0x2b8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d101      	bne.n	80024ca <HAL_ADC_Init+0x15e>
 80024c6:	4a59      	ldr	r2, [pc, #356]	; (800262c <HAL_ADC_Init+0x2c0>)
 80024c8:	e000      	b.n	80024cc <HAL_ADC_Init+0x160>
 80024ca:	4a59      	ldr	r2, [pc, #356]	; (8002630 <HAL_ADC_Init+0x2c4>)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4619      	mov	r1, r3
 80024d2:	4610      	mov	r0, r2
 80024d4:	f7ff fc5e 	bl	8001d94 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a52      	ldr	r2, [pc, #328]	; (8002628 <HAL_ADC_Init+0x2bc>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d129      	bne.n	8002536 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	7e5b      	ldrb	r3, [r3, #25]
 80024e6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80024ec:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80024f2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d013      	beq.n	8002524 <HAL_ADC_Init+0x1b8>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b0c      	cmp	r3, #12
 8002502:	d00d      	beq.n	8002520 <HAL_ADC_Init+0x1b4>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b1c      	cmp	r3, #28
 800250a:	d007      	beq.n	800251c <HAL_ADC_Init+0x1b0>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2b18      	cmp	r3, #24
 8002512:	d101      	bne.n	8002518 <HAL_ADC_Init+0x1ac>
 8002514:	2318      	movs	r3, #24
 8002516:	e006      	b.n	8002526 <HAL_ADC_Init+0x1ba>
 8002518:	2300      	movs	r3, #0
 800251a:	e004      	b.n	8002526 <HAL_ADC_Init+0x1ba>
 800251c:	2310      	movs	r3, #16
 800251e:	e002      	b.n	8002526 <HAL_ADC_Init+0x1ba>
 8002520:	2308      	movs	r3, #8
 8002522:	e000      	b.n	8002526 <HAL_ADC_Init+0x1ba>
 8002524:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002526:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800252e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
 8002534:	e00e      	b.n	8002554 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	7e5b      	ldrb	r3, [r3, #25]
 800253a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002540:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002546:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800254e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3020 	ldrb.w	r3, [r3, #32]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d106      	bne.n	800256c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	3b01      	subs	r3, #1
 8002564:	045b      	lsls	r3, r3, #17
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002570:	2b00      	cmp	r3, #0
 8002572:	d009      	beq.n	8002588 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002578:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a26      	ldr	r2, [pc, #152]	; (8002628 <HAL_ADC_Init+0x2bc>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d115      	bne.n	80025be <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	4b26      	ldr	r3, [pc, #152]	; (8002634 <HAL_ADC_Init+0x2c8>)
 800259a:	4013      	ands	r3, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	69b9      	ldr	r1, [r7, #24]
 80025a2:	430b      	orrs	r3, r1
 80025a4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	611a      	str	r2, [r3, #16]
 80025bc:	e009      	b.n	80025d2 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	4b1c      	ldr	r3, [pc, #112]	; (8002638 <HAL_ADC_Init+0x2cc>)
 80025c6:	4013      	ands	r3, r2
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	69b9      	ldr	r1, [r7, #24]
 80025ce:	430b      	orrs	r3, r1
 80025d0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff fe8c 	bl	80022f4 <LL_ADC_REG_IsConversionOngoing>
 80025dc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff feae 	bl	8002344 <LL_ADC_INJ_IsConversionOngoing>
 80025e8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f040 808e 	bne.w	800270e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f040 808a 	bne.w	800270e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a0a      	ldr	r2, [pc, #40]	; (8002628 <HAL_ADC_Init+0x2bc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d11b      	bne.n	800263c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	7e1b      	ldrb	r3, [r3, #24]
 8002608:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002610:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	e018      	b.n	800264a <HAL_ADC_Init+0x2de>
 8002618:	24000004 	.word	0x24000004
 800261c:	053e2d63 	.word	0x053e2d63
 8002620:	40022000 	.word	0x40022000
 8002624:	40022100 	.word	0x40022100
 8002628:	58026000 	.word	0x58026000
 800262c:	40022300 	.word	0x40022300
 8002630:	58026300 	.word	0x58026300
 8002634:	fff04007 	.word	0xfff04007
 8002638:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	7e1b      	ldrb	r3, [r3, #24]
 8002640:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	4b46      	ldr	r3, [pc, #280]	; (800276c <HAL_ADC_Init+0x400>)
 8002652:	4013      	ands	r3, r2
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	69b9      	ldr	r1, [r7, #24]
 800265a:	430b      	orrs	r3, r1
 800265c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002664:	2b01      	cmp	r3, #1
 8002666:	d137      	bne.n	80026d8 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a3f      	ldr	r2, [pc, #252]	; (8002770 <HAL_ADC_Init+0x404>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d116      	bne.n	80026a6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	4b3d      	ldr	r3, [pc, #244]	; (8002774 <HAL_ADC_Init+0x408>)
 8002680:	4013      	ands	r3, r2
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800268a:	4311      	orrs	r1, r2
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002690:	4311      	orrs	r1, r2
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002696:	430a      	orrs	r2, r1
 8002698:	431a      	orrs	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0201 	orr.w	r2, r2, #1
 80026a2:	611a      	str	r2, [r3, #16]
 80026a4:	e020      	b.n	80026e8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	4b32      	ldr	r3, [pc, #200]	; (8002778 <HAL_ADC_Init+0x40c>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026b4:	3a01      	subs	r2, #1
 80026b6:	0411      	lsls	r1, r2, #16
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80026bc:	4311      	orrs	r1, r2
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80026c2:	4311      	orrs	r1, r2
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80026c8:	430a      	orrs	r2, r1
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f042 0201 	orr.w	r2, r2, #1
 80026d4:	611a      	str	r2, [r3, #16]
 80026d6:	e007      	b.n	80026e8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0201 	bic.w	r2, r2, #1
 80026e6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a1b      	ldr	r2, [pc, #108]	; (8002770 <HAL_ADC_Init+0x404>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d002      	beq.n	800270e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f001 f909 	bl	8003920 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d10c      	bne.n	8002730 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	f023 010f 	bic.w	r1, r3, #15
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	1e5a      	subs	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	631a      	str	r2, [r3, #48]	; 0x30
 800272e:	e007      	b.n	8002740 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 020f 	bic.w	r2, r2, #15
 800273e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002744:	f023 0303 	bic.w	r3, r3, #3
 8002748:	f043 0201 	orr.w	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	661a      	str	r2, [r3, #96]	; 0x60
 8002750:	e007      	b.n	8002762 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002756:	f043 0210 	orr.w	r2, r3, #16
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002762:	7ffb      	ldrb	r3, [r7, #31]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3724      	adds	r7, #36	; 0x24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd90      	pop	{r4, r7, pc}
 800276c:	ffffbffc 	.word	0xffffbffc
 8002770:	58026000 	.word	0x58026000
 8002774:	fc00f81f 	.word	0xfc00f81f
 8002778:	fc00f81e 	.word	0xfc00f81e

0800277c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a5c      	ldr	r2, [pc, #368]	; (80028fc <HAL_ADC_Start+0x180>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d004      	beq.n	8002798 <HAL_ADC_Start+0x1c>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a5b      	ldr	r2, [pc, #364]	; (8002900 <HAL_ADC_Start+0x184>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d101      	bne.n	800279c <HAL_ADC_Start+0x20>
 8002798:	4b5a      	ldr	r3, [pc, #360]	; (8002904 <HAL_ADC_Start+0x188>)
 800279a:	e000      	b.n	800279e <HAL_ADC_Start+0x22>
 800279c:	4b5a      	ldr	r3, [pc, #360]	; (8002908 <HAL_ADC_Start+0x18c>)
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fcc8 	bl	8002134 <LL_ADC_GetMultimode>
 80027a4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fda2 	bl	80022f4 <LL_ADC_REG_IsConversionOngoing>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f040 809a 	bne.w	80028ec <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HAL_ADC_Start+0x4a>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e095      	b.n	80028f2 <HAL_ADC_Start+0x176>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 ffbc 	bl	800374c <ADC_Enable>
 80027d4:	4603      	mov	r3, r0
 80027d6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80027d8:	7dfb      	ldrb	r3, [r7, #23]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f040 8081 	bne.w	80028e2 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027e4:	4b49      	ldr	r3, [pc, #292]	; (800290c <HAL_ADC_Start+0x190>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a42      	ldr	r2, [pc, #264]	; (8002900 <HAL_ADC_Start+0x184>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d002      	beq.n	8002800 <HAL_ADC_Start+0x84>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	e000      	b.n	8002802 <HAL_ADC_Start+0x86>
 8002800:	4b3e      	ldr	r3, [pc, #248]	; (80028fc <HAL_ADC_Start+0x180>)
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	4293      	cmp	r3, r2
 8002808:	d002      	beq.n	8002810 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d105      	bne.n	800281c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002814:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002820:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002828:	d106      	bne.n	8002838 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800282e:	f023 0206 	bic.w	r2, r3, #6
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	665a      	str	r2, [r3, #100]	; 0x64
 8002836:	e002      	b.n	800283e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	221c      	movs	r2, #28
 8002844:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a2b      	ldr	r2, [pc, #172]	; (8002900 <HAL_ADC_Start+0x184>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d002      	beq.n	800285e <HAL_ADC_Start+0xe2>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	e000      	b.n	8002860 <HAL_ADC_Start+0xe4>
 800285e:	4b27      	ldr	r3, [pc, #156]	; (80028fc <HAL_ADC_Start+0x180>)
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	4293      	cmp	r3, r2
 8002866:	d008      	beq.n	800287a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d005      	beq.n	800287a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	2b05      	cmp	r3, #5
 8002872:	d002      	beq.n	800287a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	2b09      	cmp	r3, #9
 8002878:	d114      	bne.n	80028a4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d007      	beq.n	8002898 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800288c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002890:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fd01 	bl	80022a4 <LL_ADC_REG_StartConversion>
 80028a2:	e025      	b.n	80028f0 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a12      	ldr	r2, [pc, #72]	; (8002900 <HAL_ADC_Start+0x184>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d002      	beq.n	80028c0 <HAL_ADC_Start+0x144>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	e000      	b.n	80028c2 <HAL_ADC_Start+0x146>
 80028c0:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <HAL_ADC_Start+0x180>)
 80028c2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00f      	beq.n	80028f0 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	661a      	str	r2, [r3, #96]	; 0x60
 80028e0:	e006      	b.n	80028f0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80028ea:	e001      	b.n	80028f0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028ec:	2302      	movs	r3, #2
 80028ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80028f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40022000 	.word	0x40022000
 8002900:	40022100 	.word	0x40022100
 8002904:	40022300 	.word	0x40022300
 8002908:	58026300 	.word	0x58026300
 800290c:	fffff0fe 	.word	0xfffff0fe

08002910 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <HAL_ADC_Stop+0x16>
 8002922:	2302      	movs	r3, #2
 8002924:	e021      	b.n	800296a <HAL_ADC_Stop+0x5a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800292e:	2103      	movs	r1, #3
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 fe4f 	bl	80035d4 <ADC_ConversionStop>
 8002936:	4603      	mov	r3, r0
 8002938:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10f      	bne.n	8002960 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 ff8d 	bl	8003860 <ADC_Disable>
 8002946:	4603      	mov	r3, r0
 8002948:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d107      	bne.n	8002960 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002954:	4b07      	ldr	r3, [pc, #28]	; (8002974 <HAL_ADC_Stop+0x64>)
 8002956:	4013      	ands	r3, r2
 8002958:	f043 0201 	orr.w	r2, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002968:	7bfb      	ldrb	r3, [r7, #15]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	ffffeefe 	.word	0xffffeefe

08002978 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a72      	ldr	r2, [pc, #456]	; (8002b50 <HAL_ADC_PollForConversion+0x1d8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d004      	beq.n	8002996 <HAL_ADC_PollForConversion+0x1e>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a70      	ldr	r2, [pc, #448]	; (8002b54 <HAL_ADC_PollForConversion+0x1dc>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d101      	bne.n	800299a <HAL_ADC_PollForConversion+0x22>
 8002996:	4b70      	ldr	r3, [pc, #448]	; (8002b58 <HAL_ADC_PollForConversion+0x1e0>)
 8002998:	e000      	b.n	800299c <HAL_ADC_PollForConversion+0x24>
 800299a:	4b70      	ldr	r3, [pc, #448]	; (8002b5c <HAL_ADC_PollForConversion+0x1e4>)
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fbc9 	bl	8002134 <LL_ADC_GetMultimode>
 80029a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d102      	bne.n	80029b2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80029ac:	2308      	movs	r3, #8
 80029ae:	61fb      	str	r3, [r7, #28]
 80029b0:	e037      	b.n	8002a22 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2b05      	cmp	r3, #5
 80029bc:	d002      	beq.n	80029c4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2b09      	cmp	r3, #9
 80029c2:	d111      	bne.n	80029e8 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d007      	beq.n	80029e2 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d6:	f043 0220 	orr.w	r2, r3, #32
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e0b1      	b.n	8002b46 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80029e2:	2304      	movs	r3, #4
 80029e4:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80029e6:	e01c      	b.n	8002a22 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a58      	ldr	r2, [pc, #352]	; (8002b50 <HAL_ADC_PollForConversion+0x1d8>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d004      	beq.n	80029fc <HAL_ADC_PollForConversion+0x84>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a57      	ldr	r2, [pc, #348]	; (8002b54 <HAL_ADC_PollForConversion+0x1dc>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d101      	bne.n	8002a00 <HAL_ADC_PollForConversion+0x88>
 80029fc:	4b56      	ldr	r3, [pc, #344]	; (8002b58 <HAL_ADC_PollForConversion+0x1e0>)
 80029fe:	e000      	b.n	8002a02 <HAL_ADC_PollForConversion+0x8a>
 8002a00:	4b56      	ldr	r3, [pc, #344]	; (8002b5c <HAL_ADC_PollForConversion+0x1e4>)
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff fba4 	bl	8002150 <LL_ADC_GetMultiDMATransfer>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d007      	beq.n	8002a1e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a12:	f043 0220 	orr.w	r2, r3, #32
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e093      	b.n	8002b46 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a1e:	2304      	movs	r3, #4
 8002a20:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002a22:	f7ff f973 	bl	8001d0c <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a28:	e021      	b.n	8002a6e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a30:	d01d      	beq.n	8002a6e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002a32:	f7ff f96b 	bl	8001d0c <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d302      	bcc.n	8002a48 <HAL_ADC_PollForConversion+0xd0>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d112      	bne.n	8002a6e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10b      	bne.n	8002a6e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a5a:	f043 0204 	orr.w	r2, r3, #4
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e06b      	b.n	8002b46 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0d6      	beq.n	8002a2a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a80:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff faa7 	bl	8001fe0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d01c      	beq.n	8002ad2 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	7e5b      	ldrb	r3, [r3, #25]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d118      	bne.n	8002ad2 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d111      	bne.n	8002ad2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002abe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d105      	bne.n	8002ad2 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aca:	f043 0201 	orr.w	r2, r3, #1
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a1f      	ldr	r2, [pc, #124]	; (8002b54 <HAL_ADC_PollForConversion+0x1dc>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d002      	beq.n	8002ae2 <HAL_ADC_PollForConversion+0x16a>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	e000      	b.n	8002ae4 <HAL_ADC_PollForConversion+0x16c>
 8002ae2:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <HAL_ADC_PollForConversion+0x1d8>)
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d008      	beq.n	8002afe <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d005      	beq.n	8002afe <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2b05      	cmp	r3, #5
 8002af6:	d002      	beq.n	8002afe <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2b09      	cmp	r3, #9
 8002afc:	d104      	bne.n	8002b08 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	61bb      	str	r3, [r7, #24]
 8002b06:	e00c      	b.n	8002b22 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a11      	ldr	r2, [pc, #68]	; (8002b54 <HAL_ADC_PollForConversion+0x1dc>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d002      	beq.n	8002b18 <HAL_ADC_PollForConversion+0x1a0>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	e000      	b.n	8002b1a <HAL_ADC_PollForConversion+0x1a2>
 8002b18:	4b0d      	ldr	r3, [pc, #52]	; (8002b50 <HAL_ADC_PollForConversion+0x1d8>)
 8002b1a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d104      	bne.n	8002b32 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2208      	movs	r2, #8
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	e008      	b.n	8002b44 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d103      	bne.n	8002b44 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	220c      	movs	r2, #12
 8002b42:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3720      	adds	r7, #32
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40022000 	.word	0x40022000
 8002b54:	40022100 	.word	0x40022100
 8002b58:	40022300 	.word	0x40022300
 8002b5c:	58026300 	.word	0x58026300

08002b60 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b7c:	b590      	push	{r4, r7, lr}
 8002b7e:	b0b9      	sub	sp, #228	; 0xe4
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b96:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	4aa9      	ldr	r2, [pc, #676]	; (8002e44 <HAL_ADC_ConfigChannel+0x2c8>)
 8002b9e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d102      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x34>
 8002baa:	2302      	movs	r3, #2
 8002bac:	f000 bcfa 	b.w	80035a4 <HAL_ADC_ConfigChannel+0xa28>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff fb99 	bl	80022f4 <LL_ADC_REG_IsConversionOngoing>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f040 84de 	bne.w	8003586 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a9e      	ldr	r2, [pc, #632]	; (8002e48 <HAL_ADC_ConfigChannel+0x2cc>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d033      	beq.n	8002c3c <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d108      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x76>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	0e9b      	lsrs	r3, r3, #26
 8002be6:	f003 031f 	and.w	r3, r3, #31
 8002bea:	2201      	movs	r2, #1
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	e01d      	b.n	8002c2e <HAL_ADC_ConfigChannel+0xb2>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8002c16:	2320      	movs	r3, #32
 8002c18:	e004      	b.n	8002c24 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8002c1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c1e:	fab3 f383 	clz	r3, r3
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	f003 031f 	and.w	r3, r3, #31
 8002c28:	2201      	movs	r2, #1
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6812      	ldr	r2, [r2, #0]
 8002c32:	69d1      	ldr	r1, [r2, #28]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	6859      	ldr	r1, [r3, #4]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f7ff f9dc 	bl	8002006 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fb4e 	bl	80022f4 <LL_ADC_REG_IsConversionOngoing>
 8002c58:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fb6f 	bl	8002344 <LL_ADC_INJ_IsConversionOngoing>
 8002c66:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f040 8270 	bne.w	8003154 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f040 826b 	bne.w	8003154 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	6819      	ldr	r1, [r3, #0]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	f7ff f9e7 	bl	800205e <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a6c      	ldr	r2, [pc, #432]	; (8002e48 <HAL_ADC_ConfigChannel+0x2cc>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d10d      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	08db      	lsrs	r3, r3, #3
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002cb4:	e032      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002cb6:	4b65      	ldr	r3, [pc, #404]	; (8002e4c <HAL_ADC_ConfigChannel+0x2d0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002cbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cc2:	d10b      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x160>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	695a      	ldr	r2, [r3, #20]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	089b      	lsrs	r3, r3, #2
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	e01d      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x19c>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f003 0310 	and.w	r3, r3, #16
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10b      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x186>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	089b      	lsrs	r3, r3, #2
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	e00a      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x19c>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	089b      	lsrs	r3, r3, #2
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d048      	beq.n	8002db6 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6818      	ldr	r0, [r3, #0]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	6919      	ldr	r1, [r3, #16]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d34:	f7ff f862 	bl	8001dfc <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a42      	ldr	r2, [pc, #264]	; (8002e48 <HAL_ADC_ConfigChannel+0x2cc>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d119      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	6919      	ldr	r1, [r3, #16]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	f7ff f8fa 	bl	8001f48 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	6919      	ldr	r1, [r3, #16]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d102      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x1f0>
 8002d66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d6a:	e000      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x1f2>
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	461a      	mov	r2, r3
 8002d70:	f7ff f8c8 	bl	8001f04 <LL_ADC_SetOffsetSaturation>
 8002d74:	e1ee      	b.n	8003154 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6919      	ldr	r1, [r3, #16]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d102      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x212>
 8002d88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002d8c:	e000      	b.n	8002d90 <HAL_ADC_ConfigChannel+0x214>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	461a      	mov	r2, r3
 8002d92:	f7ff f895 	bl	8001ec0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6919      	ldr	r1, [r3, #16]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	7e1b      	ldrb	r3, [r3, #24]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d102      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x230>
 8002da6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002daa:	e000      	b.n	8002dae <HAL_ADC_ConfigChannel+0x232>
 8002dac:	2300      	movs	r3, #0
 8002dae:	461a      	mov	r2, r3
 8002db0:	f7ff f86c 	bl	8001e8c <LL_ADC_SetDataRightShift>
 8002db4:	e1ce      	b.n	8003154 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a23      	ldr	r2, [pc, #140]	; (8002e48 <HAL_ADC_ConfigChannel+0x2cc>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	f040 8181 	bne.w	80030c4 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff f849 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10a      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x272>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2100      	movs	r1, #0
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff f83e 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 8002de4:	4603      	mov	r3, r0
 8002de6:	0e9b      	lsrs	r3, r3, #26
 8002de8:	f003 021f 	and.w	r2, r3, #31
 8002dec:	e01e      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x2b0>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2100      	movs	r1, #0
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff f833 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e04:	fa93 f3a3 	rbit	r3, r3
 8002e08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002e0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002e14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8002e1c:	2320      	movs	r3, #32
 8002e1e:	e004      	b.n	8002e2a <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8002e20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e24:	fab3 f383 	clz	r3, r3
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10b      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x2d4>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	0e9b      	lsrs	r3, r3, #26
 8002e3e:	f003 031f 	and.w	r3, r3, #31
 8002e42:	e01e      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x306>
 8002e44:	47ff0000 	.word	0x47ff0000
 8002e48:	58026000 	.word	0x58026000
 8002e4c:	5c001000 	.word	0x5c001000
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e5c:	fa93 f3a3 	rbit	r3, r3
 8002e60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002e64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002e6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8002e74:	2320      	movs	r3, #32
 8002e76:	e004      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8002e78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e7c:	fab3 f383 	clz	r3, r3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d106      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff f87c 	bl	8001f8c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2101      	movs	r1, #1
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fe ffe0 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10a      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x344>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2101      	movs	r1, #1
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fe ffd5 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	0e9b      	lsrs	r3, r3, #26
 8002eba:	f003 021f 	and.w	r2, r3, #31
 8002ebe:	e01e      	b.n	8002efe <HAL_ADC_ConfigChannel+0x382>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe ffca 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ed6:	fa93 f3a3 	rbit	r3, r3
 8002eda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002ede:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002ee6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8002eee:	2320      	movs	r3, #32
 8002ef0:	e004      	b.n	8002efc <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8002ef2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ef6:	fab3 f383 	clz	r3, r3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	461a      	mov	r2, r3
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d105      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x39a>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	0e9b      	lsrs	r3, r3, #26
 8002f10:	f003 031f 	and.w	r3, r3, #31
 8002f14:	e018      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x3cc>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f22:	fa93 f3a3 	rbit	r3, r3
 8002f26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002f2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002f32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8002f3a:	2320      	movs	r3, #32
 8002f3c:	e004      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8002f3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f42:	fab3 f383 	clz	r3, r3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d106      	bne.n	8002f5a <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2200      	movs	r2, #0
 8002f52:	2101      	movs	r1, #1
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff f819 	bl	8001f8c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2102      	movs	r1, #2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fe ff7d 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 8002f66:	4603      	mov	r3, r0
 8002f68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10a      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x40a>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2102      	movs	r1, #2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fe ff72 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	0e9b      	lsrs	r3, r3, #26
 8002f80:	f003 021f 	and.w	r2, r3, #31
 8002f84:	e01e      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x448>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2102      	movs	r1, #2
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fe ff67 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f9c:	fa93 f3a3 	rbit	r3, r3
 8002fa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002fa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fa8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002fac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8002fb4:	2320      	movs	r3, #32
 8002fb6:	e004      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8002fb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fbc:	fab3 f383 	clz	r3, r3
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d105      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x460>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	0e9b      	lsrs	r3, r3, #26
 8002fd6:	f003 031f 	and.w	r3, r3, #31
 8002fda:	e014      	b.n	8003006 <HAL_ADC_ConfigChannel+0x48a>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fe4:	fa93 f3a3 	rbit	r3, r3
 8002fe8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002fea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002ff0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8002ff8:	2320      	movs	r3, #32
 8002ffa:	e004      	b.n	8003006 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8002ffc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003000:	fab3 f383 	clz	r3, r3
 8003004:	b2db      	uxtb	r3, r3
 8003006:	429a      	cmp	r2, r3
 8003008:	d106      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2200      	movs	r2, #0
 8003010:	2102      	movs	r1, #2
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe ffba 	bl	8001f8c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2103      	movs	r1, #3
 800301e:	4618      	mov	r0, r3
 8003020:	f7fe ff1e 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 8003024:	4603      	mov	r3, r0
 8003026:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10a      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x4c8>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2103      	movs	r1, #3
 8003034:	4618      	mov	r0, r3
 8003036:	f7fe ff13 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 800303a:	4603      	mov	r3, r0
 800303c:	0e9b      	lsrs	r3, r3, #26
 800303e:	f003 021f 	and.w	r2, r3, #31
 8003042:	e017      	b.n	8003074 <HAL_ADC_ConfigChannel+0x4f8>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2103      	movs	r1, #3
 800304a:	4618      	mov	r0, r3
 800304c:	f7fe ff08 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 8003050:	4603      	mov	r3, r0
 8003052:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003054:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003056:	fa93 f3a3 	rbit	r3, r3
 800305a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800305c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800305e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003060:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003066:	2320      	movs	r3, #32
 8003068:	e003      	b.n	8003072 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800306a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800306c:	fab3 f383 	clz	r3, r3
 8003070:	b2db      	uxtb	r3, r3
 8003072:	461a      	mov	r2, r3
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800307c:	2b00      	cmp	r3, #0
 800307e:	d105      	bne.n	800308c <HAL_ADC_ConfigChannel+0x510>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	0e9b      	lsrs	r3, r3, #26
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	e011      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x534>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003092:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003094:	fa93 f3a3 	rbit	r3, r3
 8003098:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800309a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800309c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800309e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80030a4:	2320      	movs	r3, #32
 80030a6:	e003      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80030a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030aa:	fab3 f383 	clz	r3, r3
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d14f      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2200      	movs	r2, #0
 80030ba:	2103      	movs	r1, #3
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fe ff65 	bl	8001f8c <LL_ADC_SetOffsetState>
 80030c2:	e047      	b.n	8003154 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	069b      	lsls	r3, r3, #26
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d107      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030e6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	069b      	lsls	r3, r3, #26
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d107      	bne.n	800310c <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800310a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003112:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	069b      	lsls	r3, r3, #26
 800311c:	429a      	cmp	r2, r3
 800311e:	d107      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800312e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003136:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	069b      	lsls	r3, r3, #26
 8003140:	429a      	cmp	r2, r3
 8003142:	d107      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003152:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff f87d 	bl	8002258 <LL_ADC_IsEnabled>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	f040 8219 	bne.w	8003598 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6818      	ldr	r0, [r3, #0]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	6819      	ldr	r1, [r3, #0]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	461a      	mov	r2, r3
 8003174:	f7fe ff9e 	bl	80020b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	4aa1      	ldr	r2, [pc, #644]	; (8003404 <HAL_ADC_ConfigChannel+0x888>)
 800317e:	4293      	cmp	r3, r2
 8003180:	f040 812e 	bne.w	80033e0 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10b      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x630>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	0e9b      	lsrs	r3, r3, #26
 800319a:	3301      	adds	r3, #1
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	2b09      	cmp	r3, #9
 80031a2:	bf94      	ite	ls
 80031a4:	2301      	movls	r3, #1
 80031a6:	2300      	movhi	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	e019      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x664>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031b4:	fa93 f3a3 	rbit	r3, r3
 80031b8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80031ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80031be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80031c4:	2320      	movs	r3, #32
 80031c6:	e003      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80031c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ca:	fab3 f383 	clz	r3, r3
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	3301      	adds	r3, #1
 80031d2:	f003 031f 	and.w	r3, r3, #31
 80031d6:	2b09      	cmp	r3, #9
 80031d8:	bf94      	ite	ls
 80031da:	2301      	movls	r3, #1
 80031dc:	2300      	movhi	r3, #0
 80031de:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d079      	beq.n	80032d8 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d107      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x684>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	0e9b      	lsrs	r3, r3, #26
 80031f6:	3301      	adds	r3, #1
 80031f8:	069b      	lsls	r3, r3, #26
 80031fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031fe:	e015      	b.n	800322c <HAL_ADC_ConfigChannel+0x6b0>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003208:	fa93 f3a3 	rbit	r3, r3
 800320c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800320e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003210:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8003218:	2320      	movs	r3, #32
 800321a:	e003      	b.n	8003224 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 800321c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800321e:	fab3 f383 	clz	r3, r3
 8003222:	b2db      	uxtb	r3, r3
 8003224:	3301      	adds	r3, #1
 8003226:	069b      	lsls	r3, r3, #26
 8003228:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003234:	2b00      	cmp	r3, #0
 8003236:	d109      	bne.n	800324c <HAL_ADC_ConfigChannel+0x6d0>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	0e9b      	lsrs	r3, r3, #26
 800323e:	3301      	adds	r3, #1
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	2101      	movs	r1, #1
 8003246:	fa01 f303 	lsl.w	r3, r1, r3
 800324a:	e017      	b.n	800327c <HAL_ADC_ConfigChannel+0x700>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003254:	fa93 f3a3 	rbit	r3, r3
 8003258:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800325a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800325c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800325e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8003264:	2320      	movs	r3, #32
 8003266:	e003      	b.n	8003270 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8003268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800326a:	fab3 f383 	clz	r3, r3
 800326e:	b2db      	uxtb	r3, r3
 8003270:	3301      	adds	r3, #1
 8003272:	f003 031f 	and.w	r3, r3, #31
 8003276:	2101      	movs	r1, #1
 8003278:	fa01 f303 	lsl.w	r3, r1, r3
 800327c:	ea42 0103 	orr.w	r1, r2, r3
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10a      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x726>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	0e9b      	lsrs	r3, r3, #26
 8003292:	3301      	adds	r3, #1
 8003294:	f003 021f 	and.w	r2, r3, #31
 8003298:	4613      	mov	r3, r2
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	4413      	add	r3, r2
 800329e:	051b      	lsls	r3, r3, #20
 80032a0:	e018      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x758>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032aa:	fa93 f3a3 	rbit	r3, r3
 80032ae:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80032b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80032b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80032ba:	2320      	movs	r3, #32
 80032bc:	e003      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80032be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c0:	fab3 f383 	clz	r3, r3
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	3301      	adds	r3, #1
 80032c8:	f003 021f 	and.w	r2, r3, #31
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032d4:	430b      	orrs	r3, r1
 80032d6:	e07e      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d107      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x778>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	0e9b      	lsrs	r3, r3, #26
 80032ea:	3301      	adds	r3, #1
 80032ec:	069b      	lsls	r3, r3, #26
 80032ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032f2:	e015      	b.n	8003320 <HAL_ADC_ConfigChannel+0x7a4>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fc:	fa93 f3a3 	rbit	r3, r3
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 800330c:	2320      	movs	r3, #32
 800330e:	e003      	b.n	8003318 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8003310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003312:	fab3 f383 	clz	r3, r3
 8003316:	b2db      	uxtb	r3, r3
 8003318:	3301      	adds	r3, #1
 800331a:	069b      	lsls	r3, r3, #26
 800331c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003328:	2b00      	cmp	r3, #0
 800332a:	d109      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x7c4>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	0e9b      	lsrs	r3, r3, #26
 8003332:	3301      	adds	r3, #1
 8003334:	f003 031f 	and.w	r3, r3, #31
 8003338:	2101      	movs	r1, #1
 800333a:	fa01 f303 	lsl.w	r3, r1, r3
 800333e:	e017      	b.n	8003370 <HAL_ADC_ConfigChannel+0x7f4>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	fa93 f3a3 	rbit	r3, r3
 800334c:	61bb      	str	r3, [r7, #24]
  return result;
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8003358:	2320      	movs	r3, #32
 800335a:	e003      	b.n	8003364 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	fab3 f383 	clz	r3, r3
 8003362:	b2db      	uxtb	r3, r3
 8003364:	3301      	adds	r3, #1
 8003366:	f003 031f 	and.w	r3, r3, #31
 800336a:	2101      	movs	r1, #1
 800336c:	fa01 f303 	lsl.w	r3, r1, r3
 8003370:	ea42 0103 	orr.w	r1, r2, r3
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10d      	bne.n	800339c <HAL_ADC_ConfigChannel+0x820>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	0e9b      	lsrs	r3, r3, #26
 8003386:	3301      	adds	r3, #1
 8003388:	f003 021f 	and.w	r2, r3, #31
 800338c:	4613      	mov	r3, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	4413      	add	r3, r2
 8003392:	3b1e      	subs	r3, #30
 8003394:	051b      	lsls	r3, r3, #20
 8003396:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800339a:	e01b      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x858>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	fa93 f3a3 	rbit	r3, r3
 80033a8:	60fb      	str	r3, [r7, #12]
  return result;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80033b4:	2320      	movs	r3, #32
 80033b6:	e003      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	fab3 f383 	clz	r3, r3
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	3301      	adds	r3, #1
 80033c2:	f003 021f 	and.w	r2, r3, #31
 80033c6:	4613      	mov	r3, r2
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	4413      	add	r3, r2
 80033cc:	3b1e      	subs	r3, #30
 80033ce:	051b      	lsls	r3, r3, #20
 80033d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033d4:	430b      	orrs	r3, r1
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	6892      	ldr	r2, [r2, #8]
 80033da:	4619      	mov	r1, r3
 80033dc:	f7fe fe3f 	bl	800205e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f280 80d7 	bge.w	8003598 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a06      	ldr	r2, [pc, #24]	; (8003408 <HAL_ADC_ConfigChannel+0x88c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d004      	beq.n	80033fe <HAL_ADC_ConfigChannel+0x882>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a04      	ldr	r2, [pc, #16]	; (800340c <HAL_ADC_ConfigChannel+0x890>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d10a      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x898>
 80033fe:	4b04      	ldr	r3, [pc, #16]	; (8003410 <HAL_ADC_ConfigChannel+0x894>)
 8003400:	e009      	b.n	8003416 <HAL_ADC_ConfigChannel+0x89a>
 8003402:	bf00      	nop
 8003404:	47ff0000 	.word	0x47ff0000
 8003408:	40022000 	.word	0x40022000
 800340c:	40022100 	.word	0x40022100
 8003410:	40022300 	.word	0x40022300
 8003414:	4b65      	ldr	r3, [pc, #404]	; (80035ac <HAL_ADC_ConfigChannel+0xa30>)
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe fce2 	bl	8001de0 <LL_ADC_GetCommonPathInternalCh>
 800341c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a62      	ldr	r2, [pc, #392]	; (80035b0 <HAL_ADC_ConfigChannel+0xa34>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d004      	beq.n	8003434 <HAL_ADC_ConfigChannel+0x8b8>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a61      	ldr	r2, [pc, #388]	; (80035b4 <HAL_ADC_ConfigChannel+0xa38>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d10e      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x8d6>
 8003434:	485e      	ldr	r0, [pc, #376]	; (80035b0 <HAL_ADC_ConfigChannel+0xa34>)
 8003436:	f7fe ff0f 	bl	8002258 <LL_ADC_IsEnabled>
 800343a:	4604      	mov	r4, r0
 800343c:	485d      	ldr	r0, [pc, #372]	; (80035b4 <HAL_ADC_ConfigChannel+0xa38>)
 800343e:	f7fe ff0b 	bl	8002258 <LL_ADC_IsEnabled>
 8003442:	4603      	mov	r3, r0
 8003444:	4323      	orrs	r3, r4
 8003446:	2b00      	cmp	r3, #0
 8003448:	bf0c      	ite	eq
 800344a:	2301      	moveq	r3, #1
 800344c:	2300      	movne	r3, #0
 800344e:	b2db      	uxtb	r3, r3
 8003450:	e008      	b.n	8003464 <HAL_ADC_ConfigChannel+0x8e8>
 8003452:	4859      	ldr	r0, [pc, #356]	; (80035b8 <HAL_ADC_ConfigChannel+0xa3c>)
 8003454:	f7fe ff00 	bl	8002258 <LL_ADC_IsEnabled>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	bf0c      	ite	eq
 800345e:	2301      	moveq	r3, #1
 8003460:	2300      	movne	r3, #0
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8084 	beq.w	8003572 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a53      	ldr	r2, [pc, #332]	; (80035bc <HAL_ADC_ConfigChannel+0xa40>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d132      	bne.n	80034da <HAL_ADC_ConfigChannel+0x95e>
 8003474:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003478:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d12c      	bne.n	80034da <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a4c      	ldr	r2, [pc, #304]	; (80035b8 <HAL_ADC_ConfigChannel+0xa3c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	f040 8086 	bne.w	8003598 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a47      	ldr	r2, [pc, #284]	; (80035b0 <HAL_ADC_ConfigChannel+0xa34>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d004      	beq.n	80034a0 <HAL_ADC_ConfigChannel+0x924>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a46      	ldr	r2, [pc, #280]	; (80035b4 <HAL_ADC_ConfigChannel+0xa38>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d101      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x928>
 80034a0:	4a47      	ldr	r2, [pc, #284]	; (80035c0 <HAL_ADC_ConfigChannel+0xa44>)
 80034a2:	e000      	b.n	80034a6 <HAL_ADC_ConfigChannel+0x92a>
 80034a4:	4a41      	ldr	r2, [pc, #260]	; (80035ac <HAL_ADC_ConfigChannel+0xa30>)
 80034a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80034aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034ae:	4619      	mov	r1, r3
 80034b0:	4610      	mov	r0, r2
 80034b2:	f7fe fc82 	bl	8001dba <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034b6:	4b43      	ldr	r3, [pc, #268]	; (80035c4 <HAL_ADC_ConfigChannel+0xa48>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	099b      	lsrs	r3, r3, #6
 80034bc:	4a42      	ldr	r2, [pc, #264]	; (80035c8 <HAL_ADC_ConfigChannel+0xa4c>)
 80034be:	fba2 2303 	umull	r2, r3, r2, r3
 80034c2:	099b      	lsrs	r3, r3, #6
 80034c4:	3301      	adds	r3, #1
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80034ca:	e002      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1f9      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034d8:	e05e      	b.n	8003598 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a3b      	ldr	r2, [pc, #236]	; (80035cc <HAL_ADC_ConfigChannel+0xa50>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d120      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x9aa>
 80034e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80034e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d11a      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a30      	ldr	r2, [pc, #192]	; (80035b8 <HAL_ADC_ConfigChannel+0xa3c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d14e      	bne.n	8003598 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a2c      	ldr	r2, [pc, #176]	; (80035b0 <HAL_ADC_ConfigChannel+0xa34>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d004      	beq.n	800350e <HAL_ADC_ConfigChannel+0x992>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a2a      	ldr	r2, [pc, #168]	; (80035b4 <HAL_ADC_ConfigChannel+0xa38>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d101      	bne.n	8003512 <HAL_ADC_ConfigChannel+0x996>
 800350e:	4a2c      	ldr	r2, [pc, #176]	; (80035c0 <HAL_ADC_ConfigChannel+0xa44>)
 8003510:	e000      	b.n	8003514 <HAL_ADC_ConfigChannel+0x998>
 8003512:	4a26      	ldr	r2, [pc, #152]	; (80035ac <HAL_ADC_ConfigChannel+0xa30>)
 8003514:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003518:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800351c:	4619      	mov	r1, r3
 800351e:	4610      	mov	r0, r2
 8003520:	f7fe fc4b 	bl	8001dba <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003524:	e038      	b.n	8003598 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a29      	ldr	r2, [pc, #164]	; (80035d0 <HAL_ADC_ConfigChannel+0xa54>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d133      	bne.n	8003598 <HAL_ADC_ConfigChannel+0xa1c>
 8003530:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003534:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d12d      	bne.n	8003598 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a1d      	ldr	r2, [pc, #116]	; (80035b8 <HAL_ADC_ConfigChannel+0xa3c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d128      	bne.n	8003598 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a19      	ldr	r2, [pc, #100]	; (80035b0 <HAL_ADC_ConfigChannel+0xa34>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d004      	beq.n	800355a <HAL_ADC_ConfigChannel+0x9de>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a17      	ldr	r2, [pc, #92]	; (80035b4 <HAL_ADC_ConfigChannel+0xa38>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d101      	bne.n	800355e <HAL_ADC_ConfigChannel+0x9e2>
 800355a:	4a19      	ldr	r2, [pc, #100]	; (80035c0 <HAL_ADC_ConfigChannel+0xa44>)
 800355c:	e000      	b.n	8003560 <HAL_ADC_ConfigChannel+0x9e4>
 800355e:	4a13      	ldr	r2, [pc, #76]	; (80035ac <HAL_ADC_ConfigChannel+0xa30>)
 8003560:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003564:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003568:	4619      	mov	r1, r3
 800356a:	4610      	mov	r0, r2
 800356c:	f7fe fc25 	bl	8001dba <LL_ADC_SetCommonPathInternalCh>
 8003570:	e012      	b.n	8003598 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003576:	f043 0220 	orr.w	r2, r3, #32
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003584:	e008      	b.n	8003598 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800358a:	f043 0220 	orr.w	r2, r3, #32
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80035a0:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	37e4      	adds	r7, #228	; 0xe4
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd90      	pop	{r4, r7, pc}
 80035ac:	58026300 	.word	0x58026300
 80035b0:	40022000 	.word	0x40022000
 80035b4:	40022100 	.word	0x40022100
 80035b8:	58026000 	.word	0x58026000
 80035bc:	c7520000 	.word	0xc7520000
 80035c0:	40022300 	.word	0x40022300
 80035c4:	24000004 	.word	0x24000004
 80035c8:	053e2d63 	.word	0x053e2d63
 80035cc:	c3210000 	.word	0xc3210000
 80035d0:	cb840000 	.word	0xcb840000

080035d4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b088      	sub	sp, #32
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fe fe82 	bl	80022f4 <LL_ADC_REG_IsConversionOngoing>
 80035f0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fe fea4 	bl	8002344 <LL_ADC_INJ_IsConversionOngoing>
 80035fc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d103      	bne.n	800360c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 8098 	beq.w	800373c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d02a      	beq.n	8003670 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	7e5b      	ldrb	r3, [r3, #25]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d126      	bne.n	8003670 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	7e1b      	ldrb	r3, [r3, #24]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d122      	bne.n	8003670 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800362a:	2301      	movs	r3, #1
 800362c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800362e:	e014      	b.n	800365a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	4a45      	ldr	r2, [pc, #276]	; (8003748 <ADC_ConversionStop+0x174>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d90d      	bls.n	8003654 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800363c:	f043 0210 	orr.w	r2, r3, #16
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003648:	f043 0201 	orr.w	r2, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e074      	b.n	800373e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	3301      	adds	r3, #1
 8003658:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003664:	2b40      	cmp	r3, #64	; 0x40
 8003666:	d1e3      	bne.n	8003630 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2240      	movs	r2, #64	; 0x40
 800366e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d014      	beq.n	80036a0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f7fe fe3a 	bl	80022f4 <LL_ADC_REG_IsConversionOngoing>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00c      	beq.n	80036a0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7fe fdf7 	bl	800227e <LL_ADC_IsDisableOngoing>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d104      	bne.n	80036a0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fe fe16 	bl	80022cc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d014      	beq.n	80036d0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fe fe4a 	bl	8002344 <LL_ADC_INJ_IsConversionOngoing>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00c      	beq.n	80036d0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fe fddf 	bl	800227e <LL_ADC_IsDisableOngoing>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d104      	bne.n	80036d0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fe fe26 	bl	800231c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d005      	beq.n	80036e2 <ADC_ConversionStop+0x10e>
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	2b03      	cmp	r3, #3
 80036da:	d105      	bne.n	80036e8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80036dc:	230c      	movs	r3, #12
 80036de:	617b      	str	r3, [r7, #20]
        break;
 80036e0:	e005      	b.n	80036ee <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80036e2:	2308      	movs	r3, #8
 80036e4:	617b      	str	r3, [r7, #20]
        break;
 80036e6:	e002      	b.n	80036ee <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80036e8:	2304      	movs	r3, #4
 80036ea:	617b      	str	r3, [r7, #20]
        break;
 80036ec:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80036ee:	f7fe fb0d 	bl	8001d0c <HAL_GetTick>
 80036f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80036f4:	e01b      	b.n	800372e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80036f6:	f7fe fb09 	bl	8001d0c <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b05      	cmp	r3, #5
 8003702:	d914      	bls.n	800372e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	4013      	ands	r3, r2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00d      	beq.n	800372e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003716:	f043 0210 	orr.w	r2, r3, #16
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003722:	f043 0201 	orr.w	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e007      	b.n	800373e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	4013      	ands	r3, r2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1dc      	bne.n	80036f6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3720      	adds	r7, #32
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	000cdbff 	.word	0x000cdbff

0800374c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f7fe fd7d 	bl	8002258 <LL_ADC_IsEnabled>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d16e      	bne.n	8003842 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	4b38      	ldr	r3, [pc, #224]	; (800384c <ADC_Enable+0x100>)
 800376c:	4013      	ands	r3, r2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00d      	beq.n	800378e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003776:	f043 0210 	orr.w	r2, r3, #16
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003782:	f043 0201 	orr.w	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e05a      	b.n	8003844 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7fe fd38 	bl	8002208 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003798:	f7fe fab8 	bl	8001d0c <HAL_GetTick>
 800379c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a2b      	ldr	r2, [pc, #172]	; (8003850 <ADC_Enable+0x104>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d004      	beq.n	80037b2 <ADC_Enable+0x66>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a29      	ldr	r2, [pc, #164]	; (8003854 <ADC_Enable+0x108>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d101      	bne.n	80037b6 <ADC_Enable+0x6a>
 80037b2:	4b29      	ldr	r3, [pc, #164]	; (8003858 <ADC_Enable+0x10c>)
 80037b4:	e000      	b.n	80037b8 <ADC_Enable+0x6c>
 80037b6:	4b29      	ldr	r3, [pc, #164]	; (800385c <ADC_Enable+0x110>)
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fe fcbb 	bl	8002134 <LL_ADC_GetMultimode>
 80037be:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a23      	ldr	r2, [pc, #140]	; (8003854 <ADC_Enable+0x108>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d002      	beq.n	80037d0 <ADC_Enable+0x84>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	e000      	b.n	80037d2 <ADC_Enable+0x86>
 80037d0:	4b1f      	ldr	r3, [pc, #124]	; (8003850 <ADC_Enable+0x104>)
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6812      	ldr	r2, [r2, #0]
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d02c      	beq.n	8003834 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d130      	bne.n	8003842 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037e0:	e028      	b.n	8003834 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fe fd36 	bl	8002258 <LL_ADC_IsEnabled>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d104      	bne.n	80037fc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe fd06 	bl	8002208 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037fc:	f7fe fa86 	bl	8001d0c <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d914      	bls.n	8003834 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b01      	cmp	r3, #1
 8003816:	d00d      	beq.n	8003834 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800381c:	f043 0210 	orr.w	r2, r3, #16
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003828:	f043 0201 	orr.w	r2, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e007      	b.n	8003844 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b01      	cmp	r3, #1
 8003840:	d1cf      	bne.n	80037e2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	8000003f 	.word	0x8000003f
 8003850:	40022000 	.word	0x40022000
 8003854:	40022100 	.word	0x40022100
 8003858:	40022300 	.word	0x40022300
 800385c:	58026300 	.word	0x58026300

08003860 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f7fe fd06 	bl	800227e <LL_ADC_IsDisableOngoing>
 8003872:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f7fe fced 	bl	8002258 <LL_ADC_IsEnabled>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d047      	beq.n	8003914 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d144      	bne.n	8003914 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 030d 	and.w	r3, r3, #13
 8003894:	2b01      	cmp	r3, #1
 8003896:	d10c      	bne.n	80038b2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	f7fe fcc7 	bl	8002230 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2203      	movs	r2, #3
 80038a8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038aa:	f7fe fa2f 	bl	8001d0c <HAL_GetTick>
 80038ae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038b0:	e029      	b.n	8003906 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b6:	f043 0210 	orr.w	r2, r3, #16
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038c2:	f043 0201 	orr.w	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e023      	b.n	8003916 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80038ce:	f7fe fa1d 	bl	8001d0c <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d914      	bls.n	8003906 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00d      	beq.n	8003906 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ee:	f043 0210 	orr.w	r2, r3, #16
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038fa:	f043 0201 	orr.w	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e007      	b.n	8003916 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1dc      	bne.n	80038ce <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a6b      	ldr	r2, [pc, #428]	; (8003adc <ADC_ConfigureBoostMode+0x1bc>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d004      	beq.n	800393c <ADC_ConfigureBoostMode+0x1c>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a6a      	ldr	r2, [pc, #424]	; (8003ae0 <ADC_ConfigureBoostMode+0x1c0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d109      	bne.n	8003950 <ADC_ConfigureBoostMode+0x30>
 800393c:	4b69      	ldr	r3, [pc, #420]	; (8003ae4 <ADC_ConfigureBoostMode+0x1c4>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf14      	ite	ne
 8003948:	2301      	movne	r3, #1
 800394a:	2300      	moveq	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	e008      	b.n	8003962 <ADC_ConfigureBoostMode+0x42>
 8003950:	4b65      	ldr	r3, [pc, #404]	; (8003ae8 <ADC_ConfigureBoostMode+0x1c8>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003958:	2b00      	cmp	r3, #0
 800395a:	bf14      	ite	ne
 800395c:	2301      	movne	r3, #1
 800395e:	2300      	moveq	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d01c      	beq.n	80039a0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003966:	f001 ff07 	bl	8005778 <HAL_RCC_GetHCLKFreq>
 800396a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003974:	d010      	beq.n	8003998 <ADC_ConfigureBoostMode+0x78>
 8003976:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800397a:	d871      	bhi.n	8003a60 <ADC_ConfigureBoostMode+0x140>
 800397c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003980:	d002      	beq.n	8003988 <ADC_ConfigureBoostMode+0x68>
 8003982:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003986:	d16b      	bne.n	8003a60 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	0c1b      	lsrs	r3, r3, #16
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	fbb2 f3f3 	udiv	r3, r2, r3
 8003994:	60fb      	str	r3, [r7, #12]
        break;
 8003996:	e066      	b.n	8003a66 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	089b      	lsrs	r3, r3, #2
 800399c:	60fb      	str	r3, [r7, #12]
        break;
 800399e:	e062      	b.n	8003a66 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80039a0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80039a4:	f002 fe3e 	bl	8006624 <HAL_RCCEx_GetPeriphCLKFreq>
 80039a8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80039b2:	d051      	beq.n	8003a58 <ADC_ConfigureBoostMode+0x138>
 80039b4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80039b8:	d854      	bhi.n	8003a64 <ADC_ConfigureBoostMode+0x144>
 80039ba:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80039be:	d047      	beq.n	8003a50 <ADC_ConfigureBoostMode+0x130>
 80039c0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80039c4:	d84e      	bhi.n	8003a64 <ADC_ConfigureBoostMode+0x144>
 80039c6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80039ca:	d03d      	beq.n	8003a48 <ADC_ConfigureBoostMode+0x128>
 80039cc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80039d0:	d848      	bhi.n	8003a64 <ADC_ConfigureBoostMode+0x144>
 80039d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039d6:	d033      	beq.n	8003a40 <ADC_ConfigureBoostMode+0x120>
 80039d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039dc:	d842      	bhi.n	8003a64 <ADC_ConfigureBoostMode+0x144>
 80039de:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80039e2:	d029      	beq.n	8003a38 <ADC_ConfigureBoostMode+0x118>
 80039e4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80039e8:	d83c      	bhi.n	8003a64 <ADC_ConfigureBoostMode+0x144>
 80039ea:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80039ee:	d01a      	beq.n	8003a26 <ADC_ConfigureBoostMode+0x106>
 80039f0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80039f4:	d836      	bhi.n	8003a64 <ADC_ConfigureBoostMode+0x144>
 80039f6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80039fa:	d014      	beq.n	8003a26 <ADC_ConfigureBoostMode+0x106>
 80039fc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003a00:	d830      	bhi.n	8003a64 <ADC_ConfigureBoostMode+0x144>
 8003a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a06:	d00e      	beq.n	8003a26 <ADC_ConfigureBoostMode+0x106>
 8003a08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a0c:	d82a      	bhi.n	8003a64 <ADC_ConfigureBoostMode+0x144>
 8003a0e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a12:	d008      	beq.n	8003a26 <ADC_ConfigureBoostMode+0x106>
 8003a14:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a18:	d824      	bhi.n	8003a64 <ADC_ConfigureBoostMode+0x144>
 8003a1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a1e:	d002      	beq.n	8003a26 <ADC_ConfigureBoostMode+0x106>
 8003a20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a24:	d11e      	bne.n	8003a64 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	0c9b      	lsrs	r3, r3, #18
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a34:	60fb      	str	r3, [r7, #12]
        break;
 8003a36:	e016      	b.n	8003a66 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	091b      	lsrs	r3, r3, #4
 8003a3c:	60fb      	str	r3, [r7, #12]
        break;
 8003a3e:	e012      	b.n	8003a66 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	095b      	lsrs	r3, r3, #5
 8003a44:	60fb      	str	r3, [r7, #12]
        break;
 8003a46:	e00e      	b.n	8003a66 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	099b      	lsrs	r3, r3, #6
 8003a4c:	60fb      	str	r3, [r7, #12]
        break;
 8003a4e:	e00a      	b.n	8003a66 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	09db      	lsrs	r3, r3, #7
 8003a54:	60fb      	str	r3, [r7, #12]
        break;
 8003a56:	e006      	b.n	8003a66 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	0a1b      	lsrs	r3, r3, #8
 8003a5c:	60fb      	str	r3, [r7, #12]
        break;
 8003a5e:	e002      	b.n	8003a66 <ADC_ConfigureBoostMode+0x146>
        break;
 8003a60:	bf00      	nop
 8003a62:	e000      	b.n	8003a66 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003a64:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	085b      	lsrs	r3, r3, #1
 8003a6a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4a1f      	ldr	r2, [pc, #124]	; (8003aec <ADC_ConfigureBoostMode+0x1cc>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d808      	bhi.n	8003a86 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003a82:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003a84:	e025      	b.n	8003ad2 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4a19      	ldr	r2, [pc, #100]	; (8003af0 <ADC_ConfigureBoostMode+0x1d0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d80a      	bhi.n	8003aa4 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aa0:	609a      	str	r2, [r3, #8]
}
 8003aa2:	e016      	b.n	8003ad2 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4a13      	ldr	r2, [pc, #76]	; (8003af4 <ADC_ConfigureBoostMode+0x1d4>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d80a      	bhi.n	8003ac2 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003abe:	609a      	str	r2, [r3, #8]
}
 8003ac0:	e007      	b.n	8003ad2 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003ad0:	609a      	str	r2, [r3, #8]
}
 8003ad2:	bf00      	nop
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40022000 	.word	0x40022000
 8003ae0:	40022100 	.word	0x40022100
 8003ae4:	40022300 	.word	0x40022300
 8003ae8:	58026300 	.word	0x58026300
 8003aec:	005f5e10 	.word	0x005f5e10
 8003af0:	00bebc20 	.word	0x00bebc20
 8003af4:	017d7840 	.word	0x017d7840

08003af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b08:	4b0b      	ldr	r3, [pc, #44]	; (8003b38 <__NVIC_SetPriorityGrouping+0x40>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b14:	4013      	ands	r3, r2
 8003b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b20:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <__NVIC_SetPriorityGrouping+0x44>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b26:	4a04      	ldr	r2, [pc, #16]	; (8003b38 <__NVIC_SetPriorityGrouping+0x40>)
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	60d3      	str	r3, [r2, #12]
}
 8003b2c:	bf00      	nop
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	e000ed00 	.word	0xe000ed00
 8003b3c:	05fa0000 	.word	0x05fa0000

08003b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b44:	4b04      	ldr	r3, [pc, #16]	; (8003b58 <__NVIC_GetPriorityGrouping+0x18>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	0a1b      	lsrs	r3, r3, #8
 8003b4a:	f003 0307 	and.w	r3, r3, #7
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	e000ed00 	.word	0xe000ed00

08003b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	db0b      	blt.n	8003b86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	f003 021f 	and.w	r2, r3, #31
 8003b74:	4907      	ldr	r1, [pc, #28]	; (8003b94 <__NVIC_EnableIRQ+0x38>)
 8003b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	e000e100 	.word	0xe000e100

08003b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	6039      	str	r1, [r7, #0]
 8003ba2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ba4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	db0a      	blt.n	8003bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	490c      	ldr	r1, [pc, #48]	; (8003be4 <__NVIC_SetPriority+0x4c>)
 8003bb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bb6:	0112      	lsls	r2, r2, #4
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	440b      	add	r3, r1
 8003bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bc0:	e00a      	b.n	8003bd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	4908      	ldr	r1, [pc, #32]	; (8003be8 <__NVIC_SetPriority+0x50>)
 8003bc8:	88fb      	ldrh	r3, [r7, #6]
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	3b04      	subs	r3, #4
 8003bd0:	0112      	lsls	r2, r2, #4
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	761a      	strb	r2, [r3, #24]
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	e000e100 	.word	0xe000e100
 8003be8:	e000ed00 	.word	0xe000ed00

08003bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b089      	sub	sp, #36	; 0x24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f1c3 0307 	rsb	r3, r3, #7
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	bf28      	it	cs
 8003c0a:	2304      	movcs	r3, #4
 8003c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	3304      	adds	r3, #4
 8003c12:	2b06      	cmp	r3, #6
 8003c14:	d902      	bls.n	8003c1c <NVIC_EncodePriority+0x30>
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	3b03      	subs	r3, #3
 8003c1a:	e000      	b.n	8003c1e <NVIC_EncodePriority+0x32>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	43da      	mvns	r2, r3
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	401a      	ands	r2, r3
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3e:	43d9      	mvns	r1, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c44:	4313      	orrs	r3, r2
         );
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3724      	adds	r7, #36	; 0x24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
	...

08003c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c64:	d301      	bcc.n	8003c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c66:	2301      	movs	r3, #1
 8003c68:	e00f      	b.n	8003c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c6a:	4a0a      	ldr	r2, [pc, #40]	; (8003c94 <SysTick_Config+0x40>)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c72:	210f      	movs	r1, #15
 8003c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c78:	f7ff ff8e 	bl	8003b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c7c:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <SysTick_Config+0x40>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c82:	4b04      	ldr	r3, [pc, #16]	; (8003c94 <SysTick_Config+0x40>)
 8003c84:	2207      	movs	r2, #7
 8003c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	e000e010 	.word	0xe000e010

08003c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff ff29 	bl	8003af8 <__NVIC_SetPriorityGrouping>
}
 8003ca6:	bf00      	nop
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b086      	sub	sp, #24
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	607a      	str	r2, [r7, #4]
 8003cba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cbc:	f7ff ff40 	bl	8003b40 <__NVIC_GetPriorityGrouping>
 8003cc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	68b9      	ldr	r1, [r7, #8]
 8003cc6:	6978      	ldr	r0, [r7, #20]
 8003cc8:	f7ff ff90 	bl	8003bec <NVIC_EncodePriority>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cd2:	4611      	mov	r1, r2
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff ff5f 	bl	8003b98 <__NVIC_SetPriority>
}
 8003cda:	bf00      	nop
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b082      	sub	sp, #8
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	4603      	mov	r3, r0
 8003cea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff ff33 	bl	8003b5c <__NVIC_EnableIRQ>
}
 8003cf6:	bf00      	nop
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b082      	sub	sp, #8
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7ff ffa4 	bl	8003c54 <SysTick_Config>
 8003d0c:	4603      	mov	r3, r0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
	...

08003d18 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e0cf      	b.n	8003eca <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d106      	bne.n	8003d42 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2223      	movs	r2, #35	; 0x23
 8003d38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7fc fddf 	bl	8000900 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d42:	4b64      	ldr	r3, [pc, #400]	; (8003ed4 <HAL_ETH_Init+0x1bc>)
 8003d44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d48:	4a62      	ldr	r2, [pc, #392]	; (8003ed4 <HAL_ETH_Init+0x1bc>)
 8003d4a:	f043 0302 	orr.w	r3, r3, #2
 8003d4e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003d52:	4b60      	ldr	r3, [pc, #384]	; (8003ed4 <HAL_ETH_Init+0x1bc>)
 8003d54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	7a1b      	ldrb	r3, [r3, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d103      	bne.n	8003d70 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003d68:	2000      	movs	r0, #0
 8003d6a:	f7fd ffff 	bl	8001d6c <HAL_SYSCFG_ETHInterfaceSelect>
 8003d6e:	e003      	b.n	8003d78 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003d70:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003d74:	f7fd fffa 	bl	8001d6c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003d78:	4b57      	ldr	r3, [pc, #348]	; (8003ed8 <HAL_ETH_Init+0x1c0>)
 8003d7a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6812      	ldr	r2, [r2, #0]
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d92:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d94:	f7fd ffba 	bl	8001d0c <HAL_GetTick>
 8003d98:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003d9a:	e011      	b.n	8003dc0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003d9c:	f7fd ffb6 	bl	8001d0c <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003daa:	d909      	bls.n	8003dc0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2204      	movs	r2, #4
 8003db0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	22e0      	movs	r2, #224	; 0xe0
 8003db8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e084      	b.n	8003eca <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1e4      	bne.n	8003d9c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f886 	bl	8003ee4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003dd8:	f001 fcce 	bl	8005778 <HAL_RCC_GetHCLKFreq>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	4a3f      	ldr	r2, [pc, #252]	; (8003edc <HAL_ETH_Init+0x1c4>)
 8003de0:	fba2 2303 	umull	r2, r3, r2, r3
 8003de4:	0c9a      	lsrs	r2, r3, #18
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3a01      	subs	r2, #1
 8003dec:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 fa71 	bl	80042d8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dfe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e02:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6812      	ldr	r2, [r2, #0]
 8003e0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e12:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d009      	beq.n	8003e36 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	22e0      	movs	r2, #224	; 0xe0
 8003e2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e049      	b.n	8003eca <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e3e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003e42:	4b27      	ldr	r3, [pc, #156]	; (8003ee0 <HAL_ETH_Init+0x1c8>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6952      	ldr	r2, [r2, #20]
 8003e4a:	0051      	lsls	r1, r2, #1
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6812      	ldr	r2, [r2, #0]
 8003e50:	430b      	orrs	r3, r1
 8003e52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e56:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 fad9 	bl	8004412 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 fb1f 	bl	80044a4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	3305      	adds	r3, #5
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	021a      	lsls	r2, r3, #8
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	3304      	adds	r3, #4
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	4619      	mov	r1, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	3303      	adds	r3, #3
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	061a      	lsls	r2, r3, #24
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	3302      	adds	r3, #2
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	041b      	lsls	r3, r3, #16
 8003e98:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003ea4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003eb2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003eb4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2210      	movs	r2, #16
 8003ec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	58024400 	.word	0x58024400
 8003ed8:	58000400 	.word	0x58000400
 8003edc:	431bde83 	.word	0x431bde83
 8003ee0:	ffff8001 	.word	0xffff8001

08003ee4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003efc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003efe:	f001 fc3b 	bl	8005778 <HAL_RCC_GetHCLKFreq>
 8003f02:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	4a1e      	ldr	r2, [pc, #120]	; (8003f80 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d908      	bls.n	8003f1e <HAL_ETH_SetMDIOClockRange+0x3a>
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4a1d      	ldr	r2, [pc, #116]	; (8003f84 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d804      	bhi.n	8003f1e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	e027      	b.n	8003f6e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	4a18      	ldr	r2, [pc, #96]	; (8003f84 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d908      	bls.n	8003f38 <HAL_ETH_SetMDIOClockRange+0x54>
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	4a17      	ldr	r2, [pc, #92]	; (8003f88 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d204      	bcs.n	8003f38 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	e01a      	b.n	8003f6e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	4a13      	ldr	r2, [pc, #76]	; (8003f88 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d303      	bcc.n	8003f48 <HAL_ETH_SetMDIOClockRange+0x64>
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	4a12      	ldr	r2, [pc, #72]	; (8003f8c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d911      	bls.n	8003f6c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	4a10      	ldr	r2, [pc, #64]	; (8003f8c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d908      	bls.n	8003f62 <HAL_ETH_SetMDIOClockRange+0x7e>
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	4a0f      	ldr	r2, [pc, #60]	; (8003f90 <HAL_ETH_SetMDIOClockRange+0xac>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d804      	bhi.n	8003f62 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	e005      	b.n	8003f6e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	e000      	b.n	8003f6e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003f6c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003f78:	bf00      	nop
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	01312cff 	.word	0x01312cff
 8003f84:	02160ebf 	.word	0x02160ebf
 8003f88:	03938700 	.word	0x03938700
 8003f8c:	05f5e0ff 	.word	0x05f5e0ff
 8003f90:	08f0d17f 	.word	0x08f0d17f

08003f94 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003fa6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	791b      	ldrb	r3, [r3, #4]
 8003fac:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003fae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	7b1b      	ldrb	r3, [r3, #12]
 8003fb4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003fb6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	7b5b      	ldrb	r3, [r3, #13]
 8003fbc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003fbe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	7b9b      	ldrb	r3, [r3, #14]
 8003fc4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003fc6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	7bdb      	ldrb	r3, [r3, #15]
 8003fcc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003fce:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	7c12      	ldrb	r2, [r2, #16]
 8003fd4:	2a00      	cmp	r2, #0
 8003fd6:	d102      	bne.n	8003fde <ETH_SetMACConfig+0x4a>
 8003fd8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003fdc:	e000      	b.n	8003fe0 <ETH_SetMACConfig+0x4c>
 8003fde:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003fe0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	7c52      	ldrb	r2, [r2, #17]
 8003fe6:	2a00      	cmp	r2, #0
 8003fe8:	d102      	bne.n	8003ff0 <ETH_SetMACConfig+0x5c>
 8003fea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003fee:	e000      	b.n	8003ff2 <ETH_SetMACConfig+0x5e>
 8003ff0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003ff2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	7c9b      	ldrb	r3, [r3, #18]
 8003ff8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003ffa:	431a      	orrs	r2, r3
               macconf->Speed |
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004000:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004006:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	7f1b      	ldrb	r3, [r3, #28]
 800400c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800400e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	7f5b      	ldrb	r3, [r3, #29]
 8004014:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004016:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	7f92      	ldrb	r2, [r2, #30]
 800401c:	2a00      	cmp	r2, #0
 800401e:	d102      	bne.n	8004026 <ETH_SetMACConfig+0x92>
 8004020:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004024:	e000      	b.n	8004028 <ETH_SetMACConfig+0x94>
 8004026:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004028:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	7fdb      	ldrb	r3, [r3, #31]
 800402e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004030:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004038:	2a00      	cmp	r2, #0
 800403a:	d102      	bne.n	8004042 <ETH_SetMACConfig+0xae>
 800403c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004040:	e000      	b.n	8004044 <ETH_SetMACConfig+0xb0>
 8004042:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004044:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800404a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004052:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004054:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	4b56      	ldr	r3, [pc, #344]	; (80041c0 <ETH_SetMACConfig+0x22c>)
 8004066:	4013      	ands	r3, r2
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	68f9      	ldr	r1, [r7, #12]
 800406e:	430b      	orrs	r3, r1
 8004070:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004076:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800407e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004080:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004088:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800408a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004092:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004094:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800409c:	2a00      	cmp	r2, #0
 800409e:	d102      	bne.n	80040a6 <ETH_SetMACConfig+0x112>
 80040a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80040a4:	e000      	b.n	80040a8 <ETH_SetMACConfig+0x114>
 80040a6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80040a8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	4b42      	ldr	r3, [pc, #264]	; (80041c4 <ETH_SetMACConfig+0x230>)
 80040ba:	4013      	ands	r3, r2
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6812      	ldr	r2, [r2, #0]
 80040c0:	68f9      	ldr	r1, [r7, #12]
 80040c2:	430b      	orrs	r3, r1
 80040c4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040cc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	4b3a      	ldr	r3, [pc, #232]	; (80041c8 <ETH_SetMACConfig+0x234>)
 80040de:	4013      	ands	r3, r2
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	68f9      	ldr	r1, [r7, #12]
 80040e6:	430b      	orrs	r3, r1
 80040e8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80040f0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80040f6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80040fe:	2a00      	cmp	r2, #0
 8004100:	d101      	bne.n	8004106 <ETH_SetMACConfig+0x172>
 8004102:	2280      	movs	r2, #128	; 0x80
 8004104:	e000      	b.n	8004108 <ETH_SetMACConfig+0x174>
 8004106:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004108:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800410e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004110:	4313      	orrs	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800411a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800411e:	4013      	ands	r3, r2
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	6812      	ldr	r2, [r2, #0]
 8004124:	68f9      	ldr	r1, [r7, #12]
 8004126:	430b      	orrs	r3, r1
 8004128:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004130:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004138:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004146:	f023 0103 	bic.w	r1, r3, #3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	430a      	orrs	r2, r1
 8004152:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800415e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800417a:	2a00      	cmp	r2, #0
 800417c:	d101      	bne.n	8004182 <ETH_SetMACConfig+0x1ee>
 800417e:	2240      	movs	r2, #64	; 0x40
 8004180:	e000      	b.n	8004184 <ETH_SetMACConfig+0x1f0>
 8004182:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004184:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800418c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800418e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004196:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004198:	4313      	orrs	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80041a4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	00048083 	.word	0x00048083
 80041c4:	c0f88000 	.word	0xc0f88000
 80041c8:	fffffef0 	.word	0xfffffef0

080041cc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	4b38      	ldr	r3, [pc, #224]	; (80042c4 <ETH_SetDMAConfig+0xf8>)
 80041e2:	4013      	ands	r3, r2
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	6811      	ldr	r1, [r2, #0]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6812      	ldr	r2, [r2, #0]
 80041ec:	430b      	orrs	r3, r1
 80041ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041f2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	791b      	ldrb	r3, [r3, #4]
 80041f8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80041fe:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	7b1b      	ldrb	r3, [r3, #12]
 8004204:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	4b2c      	ldr	r3, [pc, #176]	; (80042c8 <ETH_SetDMAConfig+0xfc>)
 8004216:	4013      	ands	r3, r2
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	68f9      	ldr	r1, [r7, #12]
 800421e:	430b      	orrs	r3, r1
 8004220:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004224:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	7b5b      	ldrb	r3, [r3, #13]
 800422a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004230:	4313      	orrs	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800423c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004240:	4b22      	ldr	r3, [pc, #136]	; (80042cc <ETH_SetDMAConfig+0x100>)
 8004242:	4013      	ands	r3, r2
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6812      	ldr	r2, [r2, #0]
 8004248:	68f9      	ldr	r1, [r7, #12]
 800424a:	430b      	orrs	r3, r1
 800424c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004250:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	7d1b      	ldrb	r3, [r3, #20]
 800425c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800425e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	7f5b      	ldrb	r3, [r3, #29]
 8004264:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004272:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004276:	4b16      	ldr	r3, [pc, #88]	; (80042d0 <ETH_SetDMAConfig+0x104>)
 8004278:	4013      	ands	r3, r2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6812      	ldr	r2, [r2, #0]
 800427e:	68f9      	ldr	r1, [r7, #12]
 8004280:	430b      	orrs	r3, r1
 8004282:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004286:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	7f1b      	ldrb	r3, [r3, #28]
 800428e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004294:	4313      	orrs	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80042a4:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <ETH_SetDMAConfig+0x108>)
 80042a6:	4013      	ands	r3, r2
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6812      	ldr	r2, [r2, #0]
 80042ac:	68f9      	ldr	r1, [r7, #12]
 80042ae:	430b      	orrs	r3, r1
 80042b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042b4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80042b8:	bf00      	nop
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	ffff87fd 	.word	0xffff87fd
 80042c8:	ffff2ffe 	.word	0xffff2ffe
 80042cc:	fffec000 	.word	0xfffec000
 80042d0:	ffc0efef 	.word	0xffc0efef
 80042d4:	7fc0ffff 	.word	0x7fc0ffff

080042d8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b0a4      	sub	sp, #144	; 0x90
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80042e0:	2301      	movs	r3, #1
 80042e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80042e6:	2300      	movs	r3, #0
 80042e8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80042ea:	2300      	movs	r3, #0
 80042ec:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80042f0:	2300      	movs	r3, #0
 80042f2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80042f6:	2301      	movs	r3, #1
 80042f8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80042fc:	2301      	movs	r3, #1
 80042fe:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004302:	2301      	movs	r3, #1
 8004304:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004308:	2300      	movs	r3, #0
 800430a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800430e:	2301      	movs	r3, #1
 8004310:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004314:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004318:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800431a:	2300      	movs	r3, #0
 800431c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004320:	2300      	movs	r3, #0
 8004322:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004324:	2300      	movs	r3, #0
 8004326:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800432a:	2300      	movs	r3, #0
 800432c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004330:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004334:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004336:	2300      	movs	r3, #0
 8004338:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800433c:	2300      	movs	r3, #0
 800433e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004340:	2301      	movs	r3, #1
 8004342:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004346:	2300      	movs	r3, #0
 8004348:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800434c:	2300      	movs	r3, #0
 800434e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004352:	2300      	movs	r3, #0
 8004354:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004356:	2300      	movs	r3, #0
 8004358:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800435a:	2300      	movs	r3, #0
 800435c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800435e:	2300      	movs	r3, #0
 8004360:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004364:	2300      	movs	r3, #0
 8004366:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800436a:	2301      	movs	r3, #1
 800436c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004370:	2320      	movs	r3, #32
 8004372:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004376:	2301      	movs	r3, #1
 8004378:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800437c:	2300      	movs	r3, #0
 800437e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004382:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004386:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004388:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800438c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800438e:	2300      	movs	r3, #0
 8004390:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004394:	2302      	movs	r3, #2
 8004396:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800439a:	2300      	movs	r3, #0
 800439c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80043a0:	2300      	movs	r3, #0
 80043a2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80043a6:	2300      	movs	r3, #0
 80043a8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80043ac:	2301      	movs	r3, #1
 80043ae:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80043b2:	2300      	movs	r3, #0
 80043b4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80043b6:	2301      	movs	r3, #1
 80043b8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80043bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043c0:	4619      	mov	r1, r3
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff fde6 	bl	8003f94 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80043c8:	2301      	movs	r3, #1
 80043ca:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80043cc:	2301      	movs	r3, #1
 80043ce:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80043d0:	2300      	movs	r3, #0
 80043d2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80043d4:	2300      	movs	r3, #0
 80043d6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80043da:	2300      	movs	r3, #0
 80043dc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80043de:	2300      	movs	r3, #0
 80043e0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80043e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80043e6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80043e8:	2300      	movs	r3, #0
 80043ea:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80043ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80043f0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80043f2:	2300      	movs	r3, #0
 80043f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80043f8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80043fc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80043fe:	f107 0308 	add.w	r3, r7, #8
 8004402:	4619      	mov	r1, r3
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7ff fee1 	bl	80041cc <ETH_SetDMAConfig>
}
 800440a:	bf00      	nop
 800440c:	3790      	adds	r7, #144	; 0x90
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004412:	b480      	push	{r7}
 8004414:	b085      	sub	sp, #20
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800441a:	2300      	movs	r3, #0
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	e01d      	b.n	800445c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68d9      	ldr	r1, [r3, #12]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	4613      	mov	r3, r2
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	4413      	add	r3, r2
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	440b      	add	r3, r1
 8004430:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2200      	movs	r2, #0
 800443c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2200      	movs	r2, #0
 8004442:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2200      	movs	r2, #0
 8004448:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800444a:	68b9      	ldr	r1, [r7, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	3206      	adds	r2, #6
 8004452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	3301      	adds	r3, #1
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2b03      	cmp	r3, #3
 8004460:	d9de      	bls.n	8004420 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004470:	461a      	mov	r2, r3
 8004472:	2303      	movs	r3, #3
 8004474:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004484:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004494:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004498:	bf00      	nop
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80044ac:	2300      	movs	r3, #0
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	e023      	b.n	80044fa <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6919      	ldr	r1, [r3, #16]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4613      	mov	r3, r2
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	4413      	add	r3, r2
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	440b      	add	r3, r1
 80044c2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2200      	movs	r2, #0
 80044ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2200      	movs	r2, #0
 80044d4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2200      	movs	r2, #0
 80044da:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2200      	movs	r2, #0
 80044e0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2200      	movs	r2, #0
 80044e6:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	3212      	adds	r2, #18
 80044f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	3301      	adds	r3, #1
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d9d8      	bls.n	80044b2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004526:	461a      	mov	r2, r3
 8004528:	2303      	movs	r3, #3
 800452a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691a      	ldr	r2, [r3, #16]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800453a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800454e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004552:	bf00      	nop
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
	...

08004560 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004560:	b480      	push	{r7}
 8004562:	b089      	sub	sp, #36	; 0x24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800456a:	2300      	movs	r3, #0
 800456c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800456e:	4b86      	ldr	r3, [pc, #536]	; (8004788 <HAL_GPIO_Init+0x228>)
 8004570:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004572:	e18c      	b.n	800488e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	2101      	movs	r1, #1
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	fa01 f303 	lsl.w	r3, r1, r3
 8004580:	4013      	ands	r3, r2
 8004582:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 817e 	beq.w	8004888 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f003 0303 	and.w	r3, r3, #3
 8004594:	2b01      	cmp	r3, #1
 8004596:	d005      	beq.n	80045a4 <HAL_GPIO_Init+0x44>
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f003 0303 	and.w	r3, r3, #3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d130      	bne.n	8004606 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	2203      	movs	r2, #3
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	43db      	mvns	r3, r3
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	4013      	ands	r3, r2
 80045ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045da:	2201      	movs	r2, #1
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	43db      	mvns	r3, r3
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	4013      	ands	r3, r2
 80045e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	091b      	lsrs	r3, r3, #4
 80045f0:	f003 0201 	and.w	r2, r3, #1
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	2b03      	cmp	r3, #3
 8004610:	d017      	beq.n	8004642 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	2203      	movs	r2, #3
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	43db      	mvns	r3, r3
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	4013      	ands	r3, r2
 8004628:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	689a      	ldr	r2, [r3, #8]
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	4313      	orrs	r3, r2
 800463a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d123      	bne.n	8004696 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	08da      	lsrs	r2, r3, #3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	3208      	adds	r2, #8
 8004656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800465a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	220f      	movs	r2, #15
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	43db      	mvns	r3, r3
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	4013      	ands	r3, r2
 8004670:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	4313      	orrs	r3, r2
 8004686:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	08da      	lsrs	r2, r3, #3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3208      	adds	r2, #8
 8004690:	69b9      	ldr	r1, [r7, #24]
 8004692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	2203      	movs	r2, #3
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	43db      	mvns	r3, r3
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	4013      	ands	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f003 0203 	and.w	r2, r3, #3
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 80d8 	beq.w	8004888 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046d8:	4b2c      	ldr	r3, [pc, #176]	; (800478c <HAL_GPIO_Init+0x22c>)
 80046da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046de:	4a2b      	ldr	r2, [pc, #172]	; (800478c <HAL_GPIO_Init+0x22c>)
 80046e0:	f043 0302 	orr.w	r3, r3, #2
 80046e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80046e8:	4b28      	ldr	r3, [pc, #160]	; (800478c <HAL_GPIO_Init+0x22c>)
 80046ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046f6:	4a26      	ldr	r2, [pc, #152]	; (8004790 <HAL_GPIO_Init+0x230>)
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	089b      	lsrs	r3, r3, #2
 80046fc:	3302      	adds	r3, #2
 80046fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004702:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	f003 0303 	and.w	r3, r3, #3
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	220f      	movs	r2, #15
 800470e:	fa02 f303 	lsl.w	r3, r2, r3
 8004712:	43db      	mvns	r3, r3
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	4013      	ands	r3, r2
 8004718:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a1d      	ldr	r2, [pc, #116]	; (8004794 <HAL_GPIO_Init+0x234>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d04a      	beq.n	80047b8 <HAL_GPIO_Init+0x258>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a1c      	ldr	r2, [pc, #112]	; (8004798 <HAL_GPIO_Init+0x238>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d02b      	beq.n	8004782 <HAL_GPIO_Init+0x222>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a1b      	ldr	r2, [pc, #108]	; (800479c <HAL_GPIO_Init+0x23c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d025      	beq.n	800477e <HAL_GPIO_Init+0x21e>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a1a      	ldr	r2, [pc, #104]	; (80047a0 <HAL_GPIO_Init+0x240>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d01f      	beq.n	800477a <HAL_GPIO_Init+0x21a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a19      	ldr	r2, [pc, #100]	; (80047a4 <HAL_GPIO_Init+0x244>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d019      	beq.n	8004776 <HAL_GPIO_Init+0x216>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a18      	ldr	r2, [pc, #96]	; (80047a8 <HAL_GPIO_Init+0x248>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d013      	beq.n	8004772 <HAL_GPIO_Init+0x212>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a17      	ldr	r2, [pc, #92]	; (80047ac <HAL_GPIO_Init+0x24c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d00d      	beq.n	800476e <HAL_GPIO_Init+0x20e>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a16      	ldr	r2, [pc, #88]	; (80047b0 <HAL_GPIO_Init+0x250>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d007      	beq.n	800476a <HAL_GPIO_Init+0x20a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a15      	ldr	r2, [pc, #84]	; (80047b4 <HAL_GPIO_Init+0x254>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d101      	bne.n	8004766 <HAL_GPIO_Init+0x206>
 8004762:	2309      	movs	r3, #9
 8004764:	e029      	b.n	80047ba <HAL_GPIO_Init+0x25a>
 8004766:	230a      	movs	r3, #10
 8004768:	e027      	b.n	80047ba <HAL_GPIO_Init+0x25a>
 800476a:	2307      	movs	r3, #7
 800476c:	e025      	b.n	80047ba <HAL_GPIO_Init+0x25a>
 800476e:	2306      	movs	r3, #6
 8004770:	e023      	b.n	80047ba <HAL_GPIO_Init+0x25a>
 8004772:	2305      	movs	r3, #5
 8004774:	e021      	b.n	80047ba <HAL_GPIO_Init+0x25a>
 8004776:	2304      	movs	r3, #4
 8004778:	e01f      	b.n	80047ba <HAL_GPIO_Init+0x25a>
 800477a:	2303      	movs	r3, #3
 800477c:	e01d      	b.n	80047ba <HAL_GPIO_Init+0x25a>
 800477e:	2302      	movs	r3, #2
 8004780:	e01b      	b.n	80047ba <HAL_GPIO_Init+0x25a>
 8004782:	2301      	movs	r3, #1
 8004784:	e019      	b.n	80047ba <HAL_GPIO_Init+0x25a>
 8004786:	bf00      	nop
 8004788:	58000080 	.word	0x58000080
 800478c:	58024400 	.word	0x58024400
 8004790:	58000400 	.word	0x58000400
 8004794:	58020000 	.word	0x58020000
 8004798:	58020400 	.word	0x58020400
 800479c:	58020800 	.word	0x58020800
 80047a0:	58020c00 	.word	0x58020c00
 80047a4:	58021000 	.word	0x58021000
 80047a8:	58021400 	.word	0x58021400
 80047ac:	58021800 	.word	0x58021800
 80047b0:	58021c00 	.word	0x58021c00
 80047b4:	58022400 	.word	0x58022400
 80047b8:	2300      	movs	r3, #0
 80047ba:	69fa      	ldr	r2, [r7, #28]
 80047bc:	f002 0203 	and.w	r2, r2, #3
 80047c0:	0092      	lsls	r2, r2, #2
 80047c2:	4093      	lsls	r3, r2
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047ca:	4938      	ldr	r1, [pc, #224]	; (80048ac <HAL_GPIO_Init+0x34c>)
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	089b      	lsrs	r3, r3, #2
 80047d0:	3302      	adds	r3, #2
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	43db      	mvns	r3, r3
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	4013      	ands	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80047fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	43db      	mvns	r3, r3
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	4013      	ands	r3, r2
 8004816:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	4313      	orrs	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800482c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	43db      	mvns	r3, r3
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	4013      	ands	r3, r2
 8004842:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	43db      	mvns	r3, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4013      	ands	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	4313      	orrs	r3, r2
 8004880:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	3301      	adds	r3, #1
 800488c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	fa22 f303 	lsr.w	r3, r2, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	f47f ae6b 	bne.w	8004574 <HAL_GPIO_Init+0x14>
  }
}
 800489e:	bf00      	nop
 80048a0:	bf00      	nop
 80048a2:	3724      	adds	r7, #36	; 0x24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	58000400 	.word	0x58000400

080048b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	887b      	ldrh	r3, [r7, #2]
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048c8:	2301      	movs	r3, #1
 80048ca:	73fb      	strb	r3, [r7, #15]
 80048cc:	e001      	b.n	80048d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048ce:	2300      	movs	r3, #0
 80048d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	460b      	mov	r3, r1
 80048ea:	807b      	strh	r3, [r7, #2]
 80048ec:	4613      	mov	r3, r2
 80048ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048f0:	787b      	ldrb	r3, [r7, #1]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048f6:	887a      	ldrh	r2, [r7, #2]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80048fc:	e003      	b.n	8004906 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80048fe:	887b      	ldrh	r3, [r7, #2]
 8004900:	041a      	lsls	r2, r3, #16
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	619a      	str	r2, [r3, #24]
}
 8004906:	bf00      	nop
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004912:	b480      	push	{r7}
 8004914:	b085      	sub	sp, #20
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	460b      	mov	r3, r1
 800491c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004924:	887a      	ldrh	r2, [r7, #2]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4013      	ands	r3, r2
 800492a:	041a      	lsls	r2, r3, #16
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	43d9      	mvns	r1, r3
 8004930:	887b      	ldrh	r3, [r7, #2]
 8004932:	400b      	ands	r3, r1
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	619a      	str	r2, [r3, #24]
}
 800493a:	bf00      	nop
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
	...

08004948 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004950:	4b19      	ldr	r3, [pc, #100]	; (80049b8 <HAL_PWREx_ConfigSupply+0x70>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b04      	cmp	r3, #4
 800495a:	d00a      	beq.n	8004972 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800495c:	4b16      	ldr	r3, [pc, #88]	; (80049b8 <HAL_PWREx_ConfigSupply+0x70>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	429a      	cmp	r2, r3
 8004968:	d001      	beq.n	800496e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e01f      	b.n	80049ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800496e:	2300      	movs	r3, #0
 8004970:	e01d      	b.n	80049ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004972:	4b11      	ldr	r3, [pc, #68]	; (80049b8 <HAL_PWREx_ConfigSupply+0x70>)
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f023 0207 	bic.w	r2, r3, #7
 800497a:	490f      	ldr	r1, [pc, #60]	; (80049b8 <HAL_PWREx_ConfigSupply+0x70>)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4313      	orrs	r3, r2
 8004980:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004982:	f7fd f9c3 	bl	8001d0c <HAL_GetTick>
 8004986:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004988:	e009      	b.n	800499e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800498a:	f7fd f9bf 	bl	8001d0c <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004998:	d901      	bls.n	800499e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e007      	b.n	80049ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800499e:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <HAL_PWREx_ConfigSupply+0x70>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049aa:	d1ee      	bne.n	800498a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	58024800 	.word	0x58024800

080049bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b08c      	sub	sp, #48	; 0x30
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e39d      	b.n	800510a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 8087 	beq.w	8004aea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049dc:	4b88      	ldr	r3, [pc, #544]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049e6:	4b86      	ldr	r3, [pc, #536]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 80049e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ea:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80049ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ee:	2b10      	cmp	r3, #16
 80049f0:	d007      	beq.n	8004a02 <HAL_RCC_OscConfig+0x46>
 80049f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f4:	2b18      	cmp	r3, #24
 80049f6:	d110      	bne.n	8004a1a <HAL_RCC_OscConfig+0x5e>
 80049f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fa:	f003 0303 	and.w	r3, r3, #3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d10b      	bne.n	8004a1a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a02:	4b7f      	ldr	r3, [pc, #508]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d06c      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x12c>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d168      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e377      	b.n	800510a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a22:	d106      	bne.n	8004a32 <HAL_RCC_OscConfig+0x76>
 8004a24:	4b76      	ldr	r3, [pc, #472]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a75      	ldr	r2, [pc, #468]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	e02e      	b.n	8004a90 <HAL_RCC_OscConfig+0xd4>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10c      	bne.n	8004a54 <HAL_RCC_OscConfig+0x98>
 8004a3a:	4b71      	ldr	r3, [pc, #452]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a70      	ldr	r2, [pc, #448]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	4b6e      	ldr	r3, [pc, #440]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a6d      	ldr	r2, [pc, #436]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004a4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	e01d      	b.n	8004a90 <HAL_RCC_OscConfig+0xd4>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a5c:	d10c      	bne.n	8004a78 <HAL_RCC_OscConfig+0xbc>
 8004a5e:	4b68      	ldr	r3, [pc, #416]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a67      	ldr	r2, [pc, #412]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	4b65      	ldr	r3, [pc, #404]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a64      	ldr	r2, [pc, #400]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	e00b      	b.n	8004a90 <HAL_RCC_OscConfig+0xd4>
 8004a78:	4b61      	ldr	r3, [pc, #388]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a60      	ldr	r2, [pc, #384]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	4b5e      	ldr	r3, [pc, #376]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a5d      	ldr	r2, [pc, #372]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d013      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a98:	f7fd f938 	bl	8001d0c <HAL_GetTick>
 8004a9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aa0:	f7fd f934 	bl	8001d0c <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b64      	cmp	r3, #100	; 0x64
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e32b      	b.n	800510a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ab2:	4b53      	ldr	r3, [pc, #332]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0xe4>
 8004abe:	e014      	b.n	8004aea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac0:	f7fd f924 	bl	8001d0c <HAL_GetTick>
 8004ac4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ac8:	f7fd f920 	bl	8001d0c <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b64      	cmp	r3, #100	; 0x64
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e317      	b.n	800510a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ada:	4b49      	ldr	r3, [pc, #292]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f0      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x10c>
 8004ae6:	e000      	b.n	8004aea <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 808c 	beq.w	8004c10 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004af8:	4b41      	ldr	r3, [pc, #260]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b00:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b02:	4b3f      	ldr	r3, [pc, #252]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b06:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d007      	beq.n	8004b1e <HAL_RCC_OscConfig+0x162>
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	2b18      	cmp	r3, #24
 8004b12:	d137      	bne.n	8004b84 <HAL_RCC_OscConfig+0x1c8>
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d132      	bne.n	8004b84 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b1e:	4b38      	ldr	r3, [pc, #224]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0304 	and.w	r3, r3, #4
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d005      	beq.n	8004b36 <HAL_RCC_OscConfig+0x17a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e2e9      	b.n	800510a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b36:	4b32      	ldr	r3, [pc, #200]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f023 0219 	bic.w	r2, r3, #25
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	492f      	ldr	r1, [pc, #188]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b48:	f7fd f8e0 	bl	8001d0c <HAL_GetTick>
 8004b4c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b50:	f7fd f8dc 	bl	8001d0c <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e2d3      	b.n	800510a <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b62:	4b27      	ldr	r3, [pc, #156]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0304 	and.w	r3, r3, #4
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0f0      	beq.n	8004b50 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b6e:	4b24      	ldr	r3, [pc, #144]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	061b      	lsls	r3, r3, #24
 8004b7c:	4920      	ldr	r1, [pc, #128]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b82:	e045      	b.n	8004c10 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d026      	beq.n	8004bda <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b8c:	4b1c      	ldr	r3, [pc, #112]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f023 0219 	bic.w	r2, r3, #25
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	4919      	ldr	r1, [pc, #100]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9e:	f7fd f8b5 	bl	8001d0c <HAL_GetTick>
 8004ba2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ba6:	f7fd f8b1 	bl	8001d0c <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e2a8      	b.n	800510a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bb8:	4b11      	ldr	r3, [pc, #68]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0f0      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc4:	4b0e      	ldr	r3, [pc, #56]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	061b      	lsls	r3, r3, #24
 8004bd2:	490b      	ldr	r1, [pc, #44]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	604b      	str	r3, [r1, #4]
 8004bd8:	e01a      	b.n	8004c10 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bda:	4b09      	ldr	r3, [pc, #36]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a08      	ldr	r2, [pc, #32]	; (8004c00 <HAL_RCC_OscConfig+0x244>)
 8004be0:	f023 0301 	bic.w	r3, r3, #1
 8004be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be6:	f7fd f891 	bl	8001d0c <HAL_GetTick>
 8004bea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bec:	e00a      	b.n	8004c04 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bee:	f7fd f88d 	bl	8001d0c <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d903      	bls.n	8004c04 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e284      	b.n	800510a <HAL_RCC_OscConfig+0x74e>
 8004c00:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c04:	4b96      	ldr	r3, [pc, #600]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1ee      	bne.n	8004bee <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0310 	and.w	r3, r3, #16
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d06a      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c1c:	4b90      	ldr	r3, [pc, #576]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c24:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c26:	4b8e      	ldr	r3, [pc, #568]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	2b08      	cmp	r3, #8
 8004c30:	d007      	beq.n	8004c42 <HAL_RCC_OscConfig+0x286>
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	2b18      	cmp	r3, #24
 8004c36:	d11b      	bne.n	8004c70 <HAL_RCC_OscConfig+0x2b4>
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d116      	bne.n	8004c70 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c42:	4b87      	ldr	r3, [pc, #540]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d005      	beq.n	8004c5a <HAL_RCC_OscConfig+0x29e>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	2b80      	cmp	r3, #128	; 0x80
 8004c54:	d001      	beq.n	8004c5a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e257      	b.n	800510a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c5a:	4b81      	ldr	r3, [pc, #516]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	061b      	lsls	r3, r3, #24
 8004c68:	497d      	ldr	r1, [pc, #500]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c6e:	e040      	b.n	8004cf2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d023      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004c78:	4b79      	ldr	r3, [pc, #484]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a78      	ldr	r2, [pc, #480]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c84:	f7fd f842 	bl	8001d0c <HAL_GetTick>
 8004c88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004c8c:	f7fd f83e 	bl	8001d0c <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e235      	b.n	800510a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c9e:	4b70      	ldr	r3, [pc, #448]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0f0      	beq.n	8004c8c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004caa:	4b6d      	ldr	r3, [pc, #436]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	061b      	lsls	r3, r3, #24
 8004cb8:	4969      	ldr	r1, [pc, #420]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	60cb      	str	r3, [r1, #12]
 8004cbe:	e018      	b.n	8004cf2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004cc0:	4b67      	ldr	r3, [pc, #412]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a66      	ldr	r2, [pc, #408]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004cc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ccc:	f7fd f81e 	bl	8001d0c <HAL_GetTick>
 8004cd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004cd4:	f7fd f81a 	bl	8001d0c <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e211      	b.n	800510a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ce6:	4b5e      	ldr	r3, [pc, #376]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1f0      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0308 	and.w	r3, r3, #8
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d036      	beq.n	8004d6c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d019      	beq.n	8004d3a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d06:	4b56      	ldr	r3, [pc, #344]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d0a:	4a55      	ldr	r2, [pc, #340]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004d0c:	f043 0301 	orr.w	r3, r3, #1
 8004d10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d12:	f7fc fffb 	bl	8001d0c <HAL_GetTick>
 8004d16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d1a:	f7fc fff7 	bl	8001d0c <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e1ee      	b.n	800510a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d2c:	4b4c      	ldr	r3, [pc, #304]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d0f0      	beq.n	8004d1a <HAL_RCC_OscConfig+0x35e>
 8004d38:	e018      	b.n	8004d6c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d3a:	4b49      	ldr	r3, [pc, #292]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d3e:	4a48      	ldr	r2, [pc, #288]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004d40:	f023 0301 	bic.w	r3, r3, #1
 8004d44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d46:	f7fc ffe1 	bl	8001d0c <HAL_GetTick>
 8004d4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d4e:	f7fc ffdd 	bl	8001d0c <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e1d4      	b.n	800510a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d60:	4b3f      	ldr	r3, [pc, #252]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1f0      	bne.n	8004d4e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0320 	and.w	r3, r3, #32
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d036      	beq.n	8004de6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d019      	beq.n	8004db4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d80:	4b37      	ldr	r3, [pc, #220]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a36      	ldr	r2, [pc, #216]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004d86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d8c:	f7fc ffbe 	bl	8001d0c <HAL_GetTick>
 8004d90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004d94:	f7fc ffba 	bl	8001d0c <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e1b1      	b.n	800510a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004da6:	4b2e      	ldr	r3, [pc, #184]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f0      	beq.n	8004d94 <HAL_RCC_OscConfig+0x3d8>
 8004db2:	e018      	b.n	8004de6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004db4:	4b2a      	ldr	r3, [pc, #168]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a29      	ldr	r2, [pc, #164]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004dba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dbe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004dc0:	f7fc ffa4 	bl	8001d0c <HAL_GetTick>
 8004dc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004dc8:	f7fc ffa0 	bl	8001d0c <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e197      	b.n	800510a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004dda:	4b21      	ldr	r3, [pc, #132]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f0      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0304 	and.w	r3, r3, #4
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 8086 	beq.w	8004f00 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004df4:	4b1b      	ldr	r3, [pc, #108]	; (8004e64 <HAL_RCC_OscConfig+0x4a8>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a1a      	ldr	r2, [pc, #104]	; (8004e64 <HAL_RCC_OscConfig+0x4a8>)
 8004dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e00:	f7fc ff84 	bl	8001d0c <HAL_GetTick>
 8004e04:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e08:	f7fc ff80 	bl	8001d0c <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b64      	cmp	r3, #100	; 0x64
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e177      	b.n	800510a <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e1a:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <HAL_RCC_OscConfig+0x4a8>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0f0      	beq.n	8004e08 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d106      	bne.n	8004e3c <HAL_RCC_OscConfig+0x480>
 8004e2e:	4b0c      	ldr	r3, [pc, #48]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e32:	4a0b      	ldr	r2, [pc, #44]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004e34:	f043 0301 	orr.w	r3, r3, #1
 8004e38:	6713      	str	r3, [r2, #112]	; 0x70
 8004e3a:	e032      	b.n	8004ea2 <HAL_RCC_OscConfig+0x4e6>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d111      	bne.n	8004e68 <HAL_RCC_OscConfig+0x4ac>
 8004e44:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e48:	4a05      	ldr	r2, [pc, #20]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004e4a:	f023 0301 	bic.w	r3, r3, #1
 8004e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e50:	4b03      	ldr	r3, [pc, #12]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e54:	4a02      	ldr	r2, [pc, #8]	; (8004e60 <HAL_RCC_OscConfig+0x4a4>)
 8004e56:	f023 0304 	bic.w	r3, r3, #4
 8004e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e5c:	e021      	b.n	8004ea2 <HAL_RCC_OscConfig+0x4e6>
 8004e5e:	bf00      	nop
 8004e60:	58024400 	.word	0x58024400
 8004e64:	58024800 	.word	0x58024800
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	2b05      	cmp	r3, #5
 8004e6e:	d10c      	bne.n	8004e8a <HAL_RCC_OscConfig+0x4ce>
 8004e70:	4b83      	ldr	r3, [pc, #524]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e74:	4a82      	ldr	r2, [pc, #520]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004e76:	f043 0304 	orr.w	r3, r3, #4
 8004e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e7c:	4b80      	ldr	r3, [pc, #512]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e80:	4a7f      	ldr	r2, [pc, #508]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004e82:	f043 0301 	orr.w	r3, r3, #1
 8004e86:	6713      	str	r3, [r2, #112]	; 0x70
 8004e88:	e00b      	b.n	8004ea2 <HAL_RCC_OscConfig+0x4e6>
 8004e8a:	4b7d      	ldr	r3, [pc, #500]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8e:	4a7c      	ldr	r2, [pc, #496]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004e90:	f023 0301 	bic.w	r3, r3, #1
 8004e94:	6713      	str	r3, [r2, #112]	; 0x70
 8004e96:	4b7a      	ldr	r3, [pc, #488]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9a:	4a79      	ldr	r2, [pc, #484]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004e9c:	f023 0304 	bic.w	r3, r3, #4
 8004ea0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d015      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eaa:	f7fc ff2f 	bl	8001d0c <HAL_GetTick>
 8004eae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004eb0:	e00a      	b.n	8004ec8 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eb2:	f7fc ff2b 	bl	8001d0c <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e120      	b.n	800510a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ec8:	4b6d      	ldr	r3, [pc, #436]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0ee      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x4f6>
 8004ed4:	e014      	b.n	8004f00 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed6:	f7fc ff19 	bl	8001d0c <HAL_GetTick>
 8004eda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004edc:	e00a      	b.n	8004ef4 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ede:	f7fc ff15 	bl	8001d0c <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e10a      	b.n	800510a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ef4:	4b62      	ldr	r3, [pc, #392]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1ee      	bne.n	8004ede <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 80ff 	beq.w	8005108 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004f0a:	4b5d      	ldr	r3, [pc, #372]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f12:	2b18      	cmp	r3, #24
 8004f14:	f000 80ba 	beq.w	800508c <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	f040 8095 	bne.w	800504c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f22:	4b57      	ldr	r3, [pc, #348]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a56      	ldr	r2, [pc, #344]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004f28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2e:	f7fc feed 	bl	8001d0c <HAL_GetTick>
 8004f32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f34:	e008      	b.n	8004f48 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f36:	f7fc fee9 	bl	8001d0c <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e0e0      	b.n	800510a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f48:	4b4d      	ldr	r3, [pc, #308]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1f0      	bne.n	8004f36 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f54:	4b4a      	ldr	r3, [pc, #296]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004f56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f58:	4b4a      	ldr	r3, [pc, #296]	; (8005084 <HAL_RCC_OscConfig+0x6c8>)
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004f64:	0112      	lsls	r2, r2, #4
 8004f66:	430a      	orrs	r2, r1
 8004f68:	4945      	ldr	r1, [pc, #276]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	628b      	str	r3, [r1, #40]	; 0x28
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f72:	3b01      	subs	r3, #1
 8004f74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	025b      	lsls	r3, r3, #9
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	041b      	lsls	r3, r3, #16
 8004f8c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f90:	431a      	orrs	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f96:	3b01      	subs	r3, #1
 8004f98:	061b      	lsls	r3, r3, #24
 8004f9a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f9e:	4938      	ldr	r1, [pc, #224]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004fa4:	4b36      	ldr	r3, [pc, #216]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	4a35      	ldr	r2, [pc, #212]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004faa:	f023 0301 	bic.w	r3, r3, #1
 8004fae:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004fb0:	4b33      	ldr	r3, [pc, #204]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004fb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fb4:	4b34      	ldr	r3, [pc, #208]	; (8005088 <HAL_RCC_OscConfig+0x6cc>)
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004fbc:	00d2      	lsls	r2, r2, #3
 8004fbe:	4930      	ldr	r1, [pc, #192]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004fc4:	4b2e      	ldr	r3, [pc, #184]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc8:	f023 020c 	bic.w	r2, r3, #12
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	492b      	ldr	r1, [pc, #172]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004fd6:	4b2a      	ldr	r3, [pc, #168]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fda:	f023 0202 	bic.w	r2, r3, #2
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe2:	4927      	ldr	r1, [pc, #156]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004fe8:	4b25      	ldr	r3, [pc, #148]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fec:	4a24      	ldr	r2, [pc, #144]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ff4:	4b22      	ldr	r3, [pc, #136]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff8:	4a21      	ldr	r2, [pc, #132]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8004ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ffe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005000:	4b1f      	ldr	r3, [pc, #124]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8005002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005004:	4a1e      	ldr	r2, [pc, #120]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8005006:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800500a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800500c:	4b1c      	ldr	r3, [pc, #112]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 800500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005010:	4a1b      	ldr	r2, [pc, #108]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8005012:	f043 0301 	orr.w	r3, r3, #1
 8005016:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005018:	4b19      	ldr	r3, [pc, #100]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a18      	ldr	r2, [pc, #96]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 800501e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005024:	f7fc fe72 	bl	8001d0c <HAL_GetTick>
 8005028:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800502c:	f7fc fe6e 	bl	8001d0c <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e065      	b.n	800510a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800503e:	4b10      	ldr	r3, [pc, #64]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0f0      	beq.n	800502c <HAL_RCC_OscConfig+0x670>
 800504a:	e05d      	b.n	8005108 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800504c:	4b0c      	ldr	r3, [pc, #48]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a0b      	ldr	r2, [pc, #44]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8005052:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005058:	f7fc fe58 	bl	8001d0c <HAL_GetTick>
 800505c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005060:	f7fc fe54 	bl	8001d0c <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e04b      	b.n	800510a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005072:	4b03      	ldr	r3, [pc, #12]	; (8005080 <HAL_RCC_OscConfig+0x6c4>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1f0      	bne.n	8005060 <HAL_RCC_OscConfig+0x6a4>
 800507e:	e043      	b.n	8005108 <HAL_RCC_OscConfig+0x74c>
 8005080:	58024400 	.word	0x58024400
 8005084:	fffffc0c 	.word	0xfffffc0c
 8005088:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800508c:	4b21      	ldr	r3, [pc, #132]	; (8005114 <HAL_RCC_OscConfig+0x758>)
 800508e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005090:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005092:	4b20      	ldr	r3, [pc, #128]	; (8005114 <HAL_RCC_OscConfig+0x758>)
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	2b01      	cmp	r3, #1
 800509e:	d031      	beq.n	8005104 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f003 0203 	and.w	r2, r3, #3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d12a      	bne.n	8005104 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	091b      	lsrs	r3, r3, #4
 80050b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d122      	bne.n	8005104 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d11a      	bne.n	8005104 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	0a5b      	lsrs	r3, r3, #9
 80050d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050da:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050dc:	429a      	cmp	r2, r3
 80050de:	d111      	bne.n	8005104 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	0c1b      	lsrs	r3, r3, #16
 80050e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d108      	bne.n	8005104 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	0e1b      	lsrs	r3, r3, #24
 80050f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005100:	429a      	cmp	r2, r3
 8005102:	d001      	beq.n	8005108 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e000      	b.n	800510a <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3730      	adds	r7, #48	; 0x30
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	58024400 	.word	0x58024400

08005118 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e19c      	b.n	8005466 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800512c:	4b8a      	ldr	r3, [pc, #552]	; (8005358 <HAL_RCC_ClockConfig+0x240>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 030f 	and.w	r3, r3, #15
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d910      	bls.n	800515c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800513a:	4b87      	ldr	r3, [pc, #540]	; (8005358 <HAL_RCC_ClockConfig+0x240>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f023 020f 	bic.w	r2, r3, #15
 8005142:	4985      	ldr	r1, [pc, #532]	; (8005358 <HAL_RCC_ClockConfig+0x240>)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	4313      	orrs	r3, r2
 8005148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800514a:	4b83      	ldr	r3, [pc, #524]	; (8005358 <HAL_RCC_ClockConfig+0x240>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	429a      	cmp	r2, r3
 8005156:	d001      	beq.n	800515c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e184      	b.n	8005466 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b00      	cmp	r3, #0
 8005166:	d010      	beq.n	800518a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	4b7b      	ldr	r3, [pc, #492]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005174:	429a      	cmp	r2, r3
 8005176:	d908      	bls.n	800518a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005178:	4b78      	ldr	r3, [pc, #480]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	4975      	ldr	r1, [pc, #468]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 8005186:	4313      	orrs	r3, r2
 8005188:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b00      	cmp	r3, #0
 8005194:	d010      	beq.n	80051b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	695a      	ldr	r2, [r3, #20]
 800519a:	4b70      	ldr	r3, [pc, #448]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d908      	bls.n	80051b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051a6:	4b6d      	ldr	r3, [pc, #436]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	496a      	ldr	r1, [pc, #424]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0310 	and.w	r3, r3, #16
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d010      	beq.n	80051e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	699a      	ldr	r2, [r3, #24]
 80051c8:	4b64      	ldr	r3, [pc, #400]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d908      	bls.n	80051e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80051d4:	4b61      	ldr	r3, [pc, #388]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	495e      	ldr	r1, [pc, #376]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0320 	and.w	r3, r3, #32
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d010      	beq.n	8005214 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69da      	ldr	r2, [r3, #28]
 80051f6:	4b59      	ldr	r3, [pc, #356]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051fe:	429a      	cmp	r2, r3
 8005200:	d908      	bls.n	8005214 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005202:	4b56      	ldr	r3, [pc, #344]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	4953      	ldr	r1, [pc, #332]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 8005210:	4313      	orrs	r3, r2
 8005212:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d010      	beq.n	8005242 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68da      	ldr	r2, [r3, #12]
 8005224:	4b4d      	ldr	r3, [pc, #308]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	f003 030f 	and.w	r3, r3, #15
 800522c:	429a      	cmp	r2, r3
 800522e:	d908      	bls.n	8005242 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005230:	4b4a      	ldr	r3, [pc, #296]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	f023 020f 	bic.w	r2, r3, #15
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	4947      	ldr	r1, [pc, #284]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 800523e:	4313      	orrs	r3, r2
 8005240:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d055      	beq.n	80052fa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800524e:	4b43      	ldr	r3, [pc, #268]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	4940      	ldr	r1, [pc, #256]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 800525c:	4313      	orrs	r3, r2
 800525e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2b02      	cmp	r3, #2
 8005266:	d107      	bne.n	8005278 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005268:	4b3c      	ldr	r3, [pc, #240]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d121      	bne.n	80052b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e0f6      	b.n	8005466 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	2b03      	cmp	r3, #3
 800527e:	d107      	bne.n	8005290 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005280:	4b36      	ldr	r3, [pc, #216]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d115      	bne.n	80052b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e0ea      	b.n	8005466 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d107      	bne.n	80052a8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005298:	4b30      	ldr	r3, [pc, #192]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d109      	bne.n	80052b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e0de      	b.n	8005466 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052a8:	4b2c      	ldr	r3, [pc, #176]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0d6      	b.n	8005466 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052b8:	4b28      	ldr	r3, [pc, #160]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	f023 0207 	bic.w	r2, r3, #7
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	4925      	ldr	r1, [pc, #148]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ca:	f7fc fd1f 	bl	8001d0c <HAL_GetTick>
 80052ce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052d0:	e00a      	b.n	80052e8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052d2:	f7fc fd1b 	bl	8001d0c <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d901      	bls.n	80052e8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e0be      	b.n	8005466 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052e8:	4b1c      	ldr	r3, [pc, #112]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	00db      	lsls	r3, r3, #3
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d1eb      	bne.n	80052d2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d010      	beq.n	8005328 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	4b14      	ldr	r3, [pc, #80]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	429a      	cmp	r2, r3
 8005314:	d208      	bcs.n	8005328 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005316:	4b11      	ldr	r3, [pc, #68]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	f023 020f 	bic.w	r2, r3, #15
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	490e      	ldr	r1, [pc, #56]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 8005324:	4313      	orrs	r3, r2
 8005326:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005328:	4b0b      	ldr	r3, [pc, #44]	; (8005358 <HAL_RCC_ClockConfig+0x240>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 030f 	and.w	r3, r3, #15
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d214      	bcs.n	8005360 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005336:	4b08      	ldr	r3, [pc, #32]	; (8005358 <HAL_RCC_ClockConfig+0x240>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f023 020f 	bic.w	r2, r3, #15
 800533e:	4906      	ldr	r1, [pc, #24]	; (8005358 <HAL_RCC_ClockConfig+0x240>)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	4313      	orrs	r3, r2
 8005344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005346:	4b04      	ldr	r3, [pc, #16]	; (8005358 <HAL_RCC_ClockConfig+0x240>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 030f 	and.w	r3, r3, #15
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d005      	beq.n	8005360 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e086      	b.n	8005466 <HAL_RCC_ClockConfig+0x34e>
 8005358:	52002000 	.word	0x52002000
 800535c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d010      	beq.n	800538e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691a      	ldr	r2, [r3, #16]
 8005370:	4b3f      	ldr	r3, [pc, #252]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005378:	429a      	cmp	r2, r3
 800537a:	d208      	bcs.n	800538e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800537c:	4b3c      	ldr	r3, [pc, #240]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	4939      	ldr	r1, [pc, #228]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 800538a:	4313      	orrs	r3, r2
 800538c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0308 	and.w	r3, r3, #8
 8005396:	2b00      	cmp	r3, #0
 8005398:	d010      	beq.n	80053bc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	695a      	ldr	r2, [r3, #20]
 800539e:	4b34      	ldr	r3, [pc, #208]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d208      	bcs.n	80053bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053aa:	4b31      	ldr	r3, [pc, #196]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	492e      	ldr	r1, [pc, #184]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0310 	and.w	r3, r3, #16
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d010      	beq.n	80053ea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699a      	ldr	r2, [r3, #24]
 80053cc:	4b28      	ldr	r3, [pc, #160]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d208      	bcs.n	80053ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053d8:	4b25      	ldr	r3, [pc, #148]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	4922      	ldr	r1, [pc, #136]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0320 	and.w	r3, r3, #32
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d010      	beq.n	8005418 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	69da      	ldr	r2, [r3, #28]
 80053fa:	4b1d      	ldr	r3, [pc, #116]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005402:	429a      	cmp	r2, r3
 8005404:	d208      	bcs.n	8005418 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005406:	4b1a      	ldr	r3, [pc, #104]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	4917      	ldr	r1, [pc, #92]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 8005414:	4313      	orrs	r3, r2
 8005416:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005418:	f000 f834 	bl	8005484 <HAL_RCC_GetSysClockFreq>
 800541c:	4602      	mov	r2, r0
 800541e:	4b14      	ldr	r3, [pc, #80]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	0a1b      	lsrs	r3, r3, #8
 8005424:	f003 030f 	and.w	r3, r3, #15
 8005428:	4912      	ldr	r1, [pc, #72]	; (8005474 <HAL_RCC_ClockConfig+0x35c>)
 800542a:	5ccb      	ldrb	r3, [r1, r3]
 800542c:	f003 031f 	and.w	r3, r3, #31
 8005430:	fa22 f303 	lsr.w	r3, r2, r3
 8005434:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005436:	4b0e      	ldr	r3, [pc, #56]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	f003 030f 	and.w	r3, r3, #15
 800543e:	4a0d      	ldr	r2, [pc, #52]	; (8005474 <HAL_RCC_ClockConfig+0x35c>)
 8005440:	5cd3      	ldrb	r3, [r2, r3]
 8005442:	f003 031f 	and.w	r3, r3, #31
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	fa22 f303 	lsr.w	r3, r2, r3
 800544c:	4a0a      	ldr	r2, [pc, #40]	; (8005478 <HAL_RCC_ClockConfig+0x360>)
 800544e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005450:	4a0a      	ldr	r2, [pc, #40]	; (800547c <HAL_RCC_ClockConfig+0x364>)
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005456:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <HAL_RCC_ClockConfig+0x368>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4618      	mov	r0, r3
 800545c:	f7fc fc0c 	bl	8001c78 <HAL_InitTick>
 8005460:	4603      	mov	r3, r0
 8005462:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005464:	7bfb      	ldrb	r3, [r7, #15]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	58024400 	.word	0x58024400
 8005474:	0800c364 	.word	0x0800c364
 8005478:	24000008 	.word	0x24000008
 800547c:	24000004 	.word	0x24000004
 8005480:	2400000c 	.word	0x2400000c

08005484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005484:	b480      	push	{r7}
 8005486:	b089      	sub	sp, #36	; 0x24
 8005488:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800548a:	4bb3      	ldr	r3, [pc, #716]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005492:	2b18      	cmp	r3, #24
 8005494:	f200 8155 	bhi.w	8005742 <HAL_RCC_GetSysClockFreq+0x2be>
 8005498:	a201      	add	r2, pc, #4	; (adr r2, 80054a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800549a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549e:	bf00      	nop
 80054a0:	08005505 	.word	0x08005505
 80054a4:	08005743 	.word	0x08005743
 80054a8:	08005743 	.word	0x08005743
 80054ac:	08005743 	.word	0x08005743
 80054b0:	08005743 	.word	0x08005743
 80054b4:	08005743 	.word	0x08005743
 80054b8:	08005743 	.word	0x08005743
 80054bc:	08005743 	.word	0x08005743
 80054c0:	0800552b 	.word	0x0800552b
 80054c4:	08005743 	.word	0x08005743
 80054c8:	08005743 	.word	0x08005743
 80054cc:	08005743 	.word	0x08005743
 80054d0:	08005743 	.word	0x08005743
 80054d4:	08005743 	.word	0x08005743
 80054d8:	08005743 	.word	0x08005743
 80054dc:	08005743 	.word	0x08005743
 80054e0:	08005531 	.word	0x08005531
 80054e4:	08005743 	.word	0x08005743
 80054e8:	08005743 	.word	0x08005743
 80054ec:	08005743 	.word	0x08005743
 80054f0:	08005743 	.word	0x08005743
 80054f4:	08005743 	.word	0x08005743
 80054f8:	08005743 	.word	0x08005743
 80054fc:	08005743 	.word	0x08005743
 8005500:	08005537 	.word	0x08005537
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005504:	4b94      	ldr	r3, [pc, #592]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0320 	and.w	r3, r3, #32
 800550c:	2b00      	cmp	r3, #0
 800550e:	d009      	beq.n	8005524 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005510:	4b91      	ldr	r3, [pc, #580]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	08db      	lsrs	r3, r3, #3
 8005516:	f003 0303 	and.w	r3, r3, #3
 800551a:	4a90      	ldr	r2, [pc, #576]	; (800575c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800551c:	fa22 f303 	lsr.w	r3, r2, r3
 8005520:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005522:	e111      	b.n	8005748 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005524:	4b8d      	ldr	r3, [pc, #564]	; (800575c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005526:	61bb      	str	r3, [r7, #24]
    break;
 8005528:	e10e      	b.n	8005748 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800552a:	4b8d      	ldr	r3, [pc, #564]	; (8005760 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800552c:	61bb      	str	r3, [r7, #24]
    break;
 800552e:	e10b      	b.n	8005748 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005530:	4b8c      	ldr	r3, [pc, #560]	; (8005764 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005532:	61bb      	str	r3, [r7, #24]
    break;
 8005534:	e108      	b.n	8005748 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005536:	4b88      	ldr	r3, [pc, #544]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553a:	f003 0303 	and.w	r3, r3, #3
 800553e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005540:	4b85      	ldr	r3, [pc, #532]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005544:	091b      	lsrs	r3, r3, #4
 8005546:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800554a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800554c:	4b82      	ldr	r3, [pc, #520]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005556:	4b80      	ldr	r3, [pc, #512]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800555a:	08db      	lsrs	r3, r3, #3
 800555c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	fb02 f303 	mul.w	r3, r2, r3
 8005566:	ee07 3a90 	vmov	s15, r3
 800556a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800556e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 80e1 	beq.w	800573c <HAL_RCC_GetSysClockFreq+0x2b8>
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2b02      	cmp	r3, #2
 800557e:	f000 8083 	beq.w	8005688 <HAL_RCC_GetSysClockFreq+0x204>
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2b02      	cmp	r3, #2
 8005586:	f200 80a1 	bhi.w	80056cc <HAL_RCC_GetSysClockFreq+0x248>
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <HAL_RCC_GetSysClockFreq+0x114>
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d056      	beq.n	8005644 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005596:	e099      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005598:	4b6f      	ldr	r3, [pc, #444]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0320 	and.w	r3, r3, #32
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d02d      	beq.n	8005600 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055a4:	4b6c      	ldr	r3, [pc, #432]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	08db      	lsrs	r3, r3, #3
 80055aa:	f003 0303 	and.w	r3, r3, #3
 80055ae:	4a6b      	ldr	r2, [pc, #428]	; (800575c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055b0:	fa22 f303 	lsr.w	r3, r2, r3
 80055b4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	ee07 3a90 	vmov	s15, r3
 80055bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	ee07 3a90 	vmov	s15, r3
 80055c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ce:	4b62      	ldr	r3, [pc, #392]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d6:	ee07 3a90 	vmov	s15, r3
 80055da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055de:	ed97 6a02 	vldr	s12, [r7, #8]
 80055e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005768 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80055fe:	e087      	b.n	8005710 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800576c <HAL_RCC_GetSysClockFreq+0x2e8>
 800560e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005612:	4b51      	ldr	r3, [pc, #324]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005622:	ed97 6a02 	vldr	s12, [r7, #8]
 8005626:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005768 <HAL_RCC_GetSysClockFreq+0x2e4>
 800562a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800562e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800563a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800563e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005642:	e065      	b.n	8005710 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	ee07 3a90 	vmov	s15, r3
 800564a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800564e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005770 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005656:	4b40      	ldr	r3, [pc, #256]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800565e:	ee07 3a90 	vmov	s15, r3
 8005662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005666:	ed97 6a02 	vldr	s12, [r7, #8]
 800566a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005768 <HAL_RCC_GetSysClockFreq+0x2e4>
 800566e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800567a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800567e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005682:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005686:	e043      	b.n	8005710 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	ee07 3a90 	vmov	s15, r3
 800568e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005692:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005774 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800569a:	4b2f      	ldr	r3, [pc, #188]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800569c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a2:	ee07 3a90 	vmov	s15, r3
 80056a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80056ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005768 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056ca:	e021      	b.n	8005710 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	ee07 3a90 	vmov	s15, r3
 80056d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005770 <HAL_RCC_GetSysClockFreq+0x2ec>
 80056da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056de:	4b1e      	ldr	r3, [pc, #120]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e6:	ee07 3a90 	vmov	s15, r3
 80056ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80056f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005768 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800570a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800570e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005710:	4b11      	ldr	r3, [pc, #68]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005714:	0a5b      	lsrs	r3, r3, #9
 8005716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800571a:	3301      	adds	r3, #1
 800571c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	ee07 3a90 	vmov	s15, r3
 8005724:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005728:	edd7 6a07 	vldr	s13, [r7, #28]
 800572c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005734:	ee17 3a90 	vmov	r3, s15
 8005738:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800573a:	e005      	b.n	8005748 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	61bb      	str	r3, [r7, #24]
    break;
 8005740:	e002      	b.n	8005748 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005742:	4b07      	ldr	r3, [pc, #28]	; (8005760 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005744:	61bb      	str	r3, [r7, #24]
    break;
 8005746:	bf00      	nop
  }

  return sysclockfreq;
 8005748:	69bb      	ldr	r3, [r7, #24]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3724      	adds	r7, #36	; 0x24
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	58024400 	.word	0x58024400
 800575c:	03d09000 	.word	0x03d09000
 8005760:	003d0900 	.word	0x003d0900
 8005764:	007a1200 	.word	0x007a1200
 8005768:	46000000 	.word	0x46000000
 800576c:	4c742400 	.word	0x4c742400
 8005770:	4a742400 	.word	0x4a742400
 8005774:	4af42400 	.word	0x4af42400

08005778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800577e:	f7ff fe81 	bl	8005484 <HAL_RCC_GetSysClockFreq>
 8005782:	4602      	mov	r2, r0
 8005784:	4b10      	ldr	r3, [pc, #64]	; (80057c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	0a1b      	lsrs	r3, r3, #8
 800578a:	f003 030f 	and.w	r3, r3, #15
 800578e:	490f      	ldr	r1, [pc, #60]	; (80057cc <HAL_RCC_GetHCLKFreq+0x54>)
 8005790:	5ccb      	ldrb	r3, [r1, r3]
 8005792:	f003 031f 	and.w	r3, r3, #31
 8005796:	fa22 f303 	lsr.w	r3, r2, r3
 800579a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800579c:	4b0a      	ldr	r3, [pc, #40]	; (80057c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	f003 030f 	and.w	r3, r3, #15
 80057a4:	4a09      	ldr	r2, [pc, #36]	; (80057cc <HAL_RCC_GetHCLKFreq+0x54>)
 80057a6:	5cd3      	ldrb	r3, [r2, r3]
 80057a8:	f003 031f 	and.w	r3, r3, #31
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	fa22 f303 	lsr.w	r3, r2, r3
 80057b2:	4a07      	ldr	r2, [pc, #28]	; (80057d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80057b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80057b6:	4a07      	ldr	r2, [pc, #28]	; (80057d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80057bc:	4b04      	ldr	r3, [pc, #16]	; (80057d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80057be:	681b      	ldr	r3, [r3, #0]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	58024400 	.word	0x58024400
 80057cc:	0800c364 	.word	0x0800c364
 80057d0:	24000008 	.word	0x24000008
 80057d4:	24000004 	.word	0x24000004

080057d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80057dc:	f7ff ffcc 	bl	8005778 <HAL_RCC_GetHCLKFreq>
 80057e0:	4602      	mov	r2, r0
 80057e2:	4b06      	ldr	r3, [pc, #24]	; (80057fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	091b      	lsrs	r3, r3, #4
 80057e8:	f003 0307 	and.w	r3, r3, #7
 80057ec:	4904      	ldr	r1, [pc, #16]	; (8005800 <HAL_RCC_GetPCLK1Freq+0x28>)
 80057ee:	5ccb      	ldrb	r3, [r1, r3]
 80057f0:	f003 031f 	and.w	r3, r3, #31
 80057f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	58024400 	.word	0x58024400
 8005800:	0800c364 	.word	0x0800c364

08005804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005808:	f7ff ffb6 	bl	8005778 <HAL_RCC_GetHCLKFreq>
 800580c:	4602      	mov	r2, r0
 800580e:	4b06      	ldr	r3, [pc, #24]	; (8005828 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	0a1b      	lsrs	r3, r3, #8
 8005814:	f003 0307 	and.w	r3, r3, #7
 8005818:	4904      	ldr	r1, [pc, #16]	; (800582c <HAL_RCC_GetPCLK2Freq+0x28>)
 800581a:	5ccb      	ldrb	r3, [r1, r3]
 800581c:	f003 031f 	and.w	r3, r3, #31
 8005820:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005824:	4618      	mov	r0, r3
 8005826:	bd80      	pop	{r7, pc}
 8005828:	58024400 	.word	0x58024400
 800582c:	0800c364 	.word	0x0800c364

08005830 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005838:	2300      	movs	r3, #0
 800583a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800583c:	2300      	movs	r3, #0
 800583e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d03f      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005850:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005854:	d02a      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005856:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800585a:	d824      	bhi.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800585c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005860:	d018      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005862:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005866:	d81e      	bhi.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800586c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005870:	d007      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005872:	e018      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005874:	4ba4      	ldr	r3, [pc, #656]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	4aa3      	ldr	r2, [pc, #652]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800587a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800587e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005880:	e015      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	3304      	adds	r3, #4
 8005886:	2102      	movs	r1, #2
 8005888:	4618      	mov	r0, r3
 800588a:	f001 ff01 	bl	8007690 <RCCEx_PLL2_Config>
 800588e:	4603      	mov	r3, r0
 8005890:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005892:	e00c      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3324      	adds	r3, #36	; 0x24
 8005898:	2102      	movs	r1, #2
 800589a:	4618      	mov	r0, r3
 800589c:	f001 ffaa 	bl	80077f4 <RCCEx_PLL3_Config>
 80058a0:	4603      	mov	r3, r0
 80058a2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80058a4:	e003      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	75fb      	strb	r3, [r7, #23]
      break;
 80058aa:	e000      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80058ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058ae:	7dfb      	ldrb	r3, [r7, #23]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d109      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80058b4:	4b94      	ldr	r3, [pc, #592]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80058b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058c0:	4991      	ldr	r1, [pc, #580]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	650b      	str	r3, [r1, #80]	; 0x50
 80058c6:	e001      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c8:	7dfb      	ldrb	r3, [r7, #23]
 80058ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d03d      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d826      	bhi.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80058e0:	a201      	add	r2, pc, #4	; (adr r2, 80058e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80058e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e6:	bf00      	nop
 80058e8:	080058fd 	.word	0x080058fd
 80058ec:	0800590b 	.word	0x0800590b
 80058f0:	0800591d 	.word	0x0800591d
 80058f4:	08005935 	.word	0x08005935
 80058f8:	08005935 	.word	0x08005935
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058fc:	4b82      	ldr	r3, [pc, #520]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80058fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005900:	4a81      	ldr	r2, [pc, #516]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005906:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005908:	e015      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	3304      	adds	r3, #4
 800590e:	2100      	movs	r1, #0
 8005910:	4618      	mov	r0, r3
 8005912:	f001 febd 	bl	8007690 <RCCEx_PLL2_Config>
 8005916:	4603      	mov	r3, r0
 8005918:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800591a:	e00c      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3324      	adds	r3, #36	; 0x24
 8005920:	2100      	movs	r1, #0
 8005922:	4618      	mov	r0, r3
 8005924:	f001 ff66 	bl	80077f4 <RCCEx_PLL3_Config>
 8005928:	4603      	mov	r3, r0
 800592a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800592c:	e003      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	75fb      	strb	r3, [r7, #23]
      break;
 8005932:	e000      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005934:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005936:	7dfb      	ldrb	r3, [r7, #23]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d109      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800593c:	4b72      	ldr	r3, [pc, #456]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800593e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005940:	f023 0207 	bic.w	r2, r3, #7
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005948:	496f      	ldr	r1, [pc, #444]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800594a:	4313      	orrs	r3, r2
 800594c:	650b      	str	r3, [r1, #80]	; 0x50
 800594e:	e001      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005950:	7dfb      	ldrb	r3, [r7, #23]
 8005952:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800595c:	2b00      	cmp	r3, #0
 800595e:	d051      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005966:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800596a:	d036      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800596c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005970:	d830      	bhi.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005972:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005976:	d032      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005978:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800597c:	d82a      	bhi.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800597e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005982:	d02e      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005984:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005988:	d824      	bhi.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800598a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800598e:	d018      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005994:	d81e      	bhi.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800599a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800599e:	d007      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80059a0:	e018      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059a2:	4b59      	ldr	r3, [pc, #356]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80059a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a6:	4a58      	ldr	r2, [pc, #352]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80059a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059ae:	e019      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3304      	adds	r3, #4
 80059b4:	2100      	movs	r1, #0
 80059b6:	4618      	mov	r0, r3
 80059b8:	f001 fe6a 	bl	8007690 <RCCEx_PLL2_Config>
 80059bc:	4603      	mov	r3, r0
 80059be:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80059c0:	e010      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	3324      	adds	r3, #36	; 0x24
 80059c6:	2100      	movs	r1, #0
 80059c8:	4618      	mov	r0, r3
 80059ca:	f001 ff13 	bl	80077f4 <RCCEx_PLL3_Config>
 80059ce:	4603      	mov	r3, r0
 80059d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059d2:	e007      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	75fb      	strb	r3, [r7, #23]
      break;
 80059d8:	e004      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80059da:	bf00      	nop
 80059dc:	e002      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80059de:	bf00      	nop
 80059e0:	e000      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80059e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059e4:	7dfb      	ldrb	r3, [r7, #23]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10a      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80059ea:	4b47      	ldr	r3, [pc, #284]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80059ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ee:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80059f8:	4943      	ldr	r1, [pc, #268]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	658b      	str	r3, [r1, #88]	; 0x58
 80059fe:	e001      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a00:	7dfb      	ldrb	r3, [r7, #23]
 8005a02:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d051      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a16:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005a1a:	d036      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005a1c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005a20:	d830      	bhi.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005a22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a26:	d032      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8005a28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a2c:	d82a      	bhi.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005a2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a32:	d02e      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8005a34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a38:	d824      	bhi.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005a3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a3e:	d018      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8005a40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a44:	d81e      	bhi.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005a4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a4e:	d007      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005a50:	e018      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a52:	4b2d      	ldr	r3, [pc, #180]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a56:	4a2c      	ldr	r2, [pc, #176]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a5e:	e019      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	3304      	adds	r3, #4
 8005a64:	2100      	movs	r1, #0
 8005a66:	4618      	mov	r0, r3
 8005a68:	f001 fe12 	bl	8007690 <RCCEx_PLL2_Config>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005a70:	e010      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	3324      	adds	r3, #36	; 0x24
 8005a76:	2100      	movs	r1, #0
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f001 febb 	bl	80077f4 <RCCEx_PLL3_Config>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a82:	e007      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	75fb      	strb	r3, [r7, #23]
      break;
 8005a88:	e004      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005a8a:	bf00      	nop
 8005a8c:	e002      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005a8e:	bf00      	nop
 8005a90:	e000      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005a92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a94:	7dfb      	ldrb	r3, [r7, #23]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10a      	bne.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005a9a:	4b1b      	ldr	r3, [pc, #108]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a9e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005aa8:	4917      	ldr	r1, [pc, #92]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	658b      	str	r3, [r1, #88]	; 0x58
 8005aae:	e001      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab0:	7dfb      	ldrb	r3, [r7, #23]
 8005ab2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d035      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ac4:	2b30      	cmp	r3, #48	; 0x30
 8005ac6:	d01c      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005ac8:	2b30      	cmp	r3, #48	; 0x30
 8005aca:	d817      	bhi.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005acc:	2b20      	cmp	r3, #32
 8005ace:	d00c      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005ad0:	2b20      	cmp	r3, #32
 8005ad2:	d813      	bhi.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d019      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8005ad8:	2b10      	cmp	r3, #16
 8005ada:	d10f      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005adc:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae0:	4a09      	ldr	r2, [pc, #36]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005ae8:	e011      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	3304      	adds	r3, #4
 8005aee:	2102      	movs	r1, #2
 8005af0:	4618      	mov	r0, r3
 8005af2:	f001 fdcd 	bl	8007690 <RCCEx_PLL2_Config>
 8005af6:	4603      	mov	r3, r0
 8005af8:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005afa:	e008      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	75fb      	strb	r3, [r7, #23]
      break;
 8005b00:	e005      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8005b02:	bf00      	nop
 8005b04:	e003      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005b06:	bf00      	nop
 8005b08:	58024400 	.word	0x58024400
      break;
 8005b0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b0e:	7dfb      	ldrb	r3, [r7, #23]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d109      	bne.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005b14:	4ba3      	ldr	r3, [pc, #652]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b18:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b20:	49a0      	ldr	r1, [pc, #640]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005b26:	e001      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b28:	7dfb      	ldrb	r3, [r7, #23]
 8005b2a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d047      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b40:	d030      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005b42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b46:	d82a      	bhi.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005b48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b4c:	d02c      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8005b4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b52:	d824      	bhi.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b58:	d018      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b5e:	d81e      	bhi.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b68:	d007      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005b6a:	e018      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b6c:	4b8d      	ldr	r3, [pc, #564]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	4a8c      	ldr	r2, [pc, #560]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b78:	e017      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	2100      	movs	r1, #0
 8005b80:	4618      	mov	r0, r3
 8005b82:	f001 fd85 	bl	8007690 <RCCEx_PLL2_Config>
 8005b86:	4603      	mov	r3, r0
 8005b88:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b8a:	e00e      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	3324      	adds	r3, #36	; 0x24
 8005b90:	2100      	movs	r1, #0
 8005b92:	4618      	mov	r0, r3
 8005b94:	f001 fe2e 	bl	80077f4 <RCCEx_PLL3_Config>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b9c:	e005      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	75fb      	strb	r3, [r7, #23]
      break;
 8005ba2:	e002      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005ba4:	bf00      	nop
 8005ba6:	e000      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005ba8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005baa:	7dfb      	ldrb	r3, [r7, #23]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d109      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005bb0:	4b7c      	ldr	r3, [pc, #496]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bbc:	4979      	ldr	r1, [pc, #484]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	650b      	str	r3, [r1, #80]	; 0x50
 8005bc2:	e001      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
 8005bc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d049      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bdc:	d02e      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005bde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005be2:	d828      	bhi.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005be4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005be8:	d02a      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005bea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bee:	d822      	bhi.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005bf0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bf4:	d026      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005bf6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bfa:	d81c      	bhi.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005bfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c00:	d010      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005c02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c06:	d816      	bhi.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d01d      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c10:	d111      	bne.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	3304      	adds	r3, #4
 8005c16:	2101      	movs	r1, #1
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f001 fd39 	bl	8007690 <RCCEx_PLL2_Config>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005c22:	e012      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3324      	adds	r3, #36	; 0x24
 8005c28:	2101      	movs	r1, #1
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f001 fde2 	bl	80077f4 <RCCEx_PLL3_Config>
 8005c30:	4603      	mov	r3, r0
 8005c32:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005c34:	e009      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	75fb      	strb	r3, [r7, #23]
      break;
 8005c3a:	e006      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005c3c:	bf00      	nop
 8005c3e:	e004      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005c40:	bf00      	nop
 8005c42:	e002      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005c44:	bf00      	nop
 8005c46:	e000      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005c48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c4a:	7dfb      	ldrb	r3, [r7, #23]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d109      	bne.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005c50:	4b54      	ldr	r3, [pc, #336]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c54:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c5c:	4951      	ldr	r1, [pc, #324]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	650b      	str	r3, [r1, #80]	; 0x50
 8005c62:	e001      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c64:	7dfb      	ldrb	r3, [r7, #23]
 8005c66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d04b      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005c7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c7e:	d02e      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c84:	d828      	bhi.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c8a:	d02a      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c90:	d822      	bhi.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005c92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c96:	d026      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005c98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c9c:	d81c      	bhi.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ca2:	d010      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8005ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ca8:	d816      	bhi.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d01d      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005cae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cb2:	d111      	bne.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3304      	adds	r3, #4
 8005cb8:	2101      	movs	r1, #1
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f001 fce8 	bl	8007690 <RCCEx_PLL2_Config>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005cc4:	e012      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	3324      	adds	r3, #36	; 0x24
 8005cca:	2101      	movs	r1, #1
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f001 fd91 	bl	80077f4 <RCCEx_PLL3_Config>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005cd6:	e009      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	75fb      	strb	r3, [r7, #23]
      break;
 8005cdc:	e006      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005cde:	bf00      	nop
 8005ce0:	e004      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005ce2:	bf00      	nop
 8005ce4:	e002      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005ce6:	bf00      	nop
 8005ce8:	e000      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005cea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cec:	7dfb      	ldrb	r3, [r7, #23]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10a      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005cf2:	4b2c      	ldr	r3, [pc, #176]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d00:	4928      	ldr	r1, [pc, #160]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	658b      	str	r3, [r1, #88]	; 0x58
 8005d06:	e001      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d08:	7dfb      	ldrb	r3, [r7, #23]
 8005d0a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d02f      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d20:	d00e      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8005d22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d26:	d814      	bhi.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d015      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005d2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d30:	d10f      	bne.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d32:	4b1c      	ldr	r3, [pc, #112]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d36:	4a1b      	ldr	r2, [pc, #108]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005d3e:	e00c      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3304      	adds	r3, #4
 8005d44:	2101      	movs	r1, #1
 8005d46:	4618      	mov	r0, r3
 8005d48:	f001 fca2 	bl	8007690 <RCCEx_PLL2_Config>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005d50:	e003      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	75fb      	strb	r3, [r7, #23]
      break;
 8005d56:	e000      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8005d58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d5a:	7dfb      	ldrb	r3, [r7, #23]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d109      	bne.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d60:	4b10      	ldr	r3, [pc, #64]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d64:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d6c:	490d      	ldr	r1, [pc, #52]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	650b      	str	r3, [r1, #80]	; 0x50
 8005d72:	e001      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d74:	7dfb      	ldrb	r3, [r7, #23]
 8005d76:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d034      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d88:	2b03      	cmp	r3, #3
 8005d8a:	d81d      	bhi.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005d8c:	a201      	add	r2, pc, #4	; (adr r2, 8005d94 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d92:	bf00      	nop
 8005d94:	08005dcf 	.word	0x08005dcf
 8005d98:	08005da9 	.word	0x08005da9
 8005d9c:	08005db7 	.word	0x08005db7
 8005da0:	08005dcf 	.word	0x08005dcf
 8005da4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005da8:	4bb1      	ldr	r3, [pc, #708]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dac:	4ab0      	ldr	r2, [pc, #704]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005db2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005db4:	e00c      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	3304      	adds	r3, #4
 8005dba:	2102      	movs	r1, #2
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f001 fc67 	bl	8007690 <RCCEx_PLL2_Config>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005dc6:	e003      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	75fb      	strb	r3, [r7, #23]
      break;
 8005dcc:	e000      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8005dce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dd0:	7dfb      	ldrb	r3, [r7, #23]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d109      	bne.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005dd6:	4ba6      	ldr	r3, [pc, #664]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dda:	f023 0203 	bic.w	r2, r3, #3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de2:	49a3      	ldr	r1, [pc, #652]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005de8:	e001      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dea:	7dfb      	ldrb	r3, [r7, #23]
 8005dec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 8086 	beq.w	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dfc:	4b9d      	ldr	r3, [pc, #628]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a9c      	ldr	r2, [pc, #624]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e08:	f7fb ff80 	bl	8001d0c <HAL_GetTick>
 8005e0c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e0e:	e009      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e10:	f7fb ff7c 	bl	8001d0c <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b64      	cmp	r3, #100	; 0x64
 8005e1c:	d902      	bls.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	75fb      	strb	r3, [r7, #23]
        break;
 8005e22:	e005      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e24:	4b93      	ldr	r3, [pc, #588]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0ef      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8005e30:	7dfb      	ldrb	r3, [r7, #23]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d166      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005e36:	4b8e      	ldr	r3, [pc, #568]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005e40:	4053      	eors	r3, r2
 8005e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d013      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e4a:	4b89      	ldr	r3, [pc, #548]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e52:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e54:	4b86      	ldr	r3, [pc, #536]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e58:	4a85      	ldr	r2, [pc, #532]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e5e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e60:	4b83      	ldr	r3, [pc, #524]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e64:	4a82      	ldr	r2, [pc, #520]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e6a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e6c:	4a80      	ldr	r2, [pc, #512]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e7c:	d115      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e7e:	f7fb ff45 	bl	8001d0c <HAL_GetTick>
 8005e82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e84:	e00b      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e86:	f7fb ff41 	bl	8001d0c <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d902      	bls.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	75fb      	strb	r3, [r7, #23]
            break;
 8005e9c:	e005      	b.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e9e:	4b74      	ldr	r3, [pc, #464]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d0ed      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8005eaa:	7dfb      	ldrb	r3, [r7, #23]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d126      	bne.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ebe:	d10d      	bne.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8005ec0:	4b6b      	ldr	r3, [pc, #428]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005ece:	0919      	lsrs	r1, r3, #4
 8005ed0:	4b69      	ldr	r3, [pc, #420]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ed2:	400b      	ands	r3, r1
 8005ed4:	4966      	ldr	r1, [pc, #408]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	610b      	str	r3, [r1, #16]
 8005eda:	e005      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8005edc:	4b64      	ldr	r3, [pc, #400]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	4a63      	ldr	r2, [pc, #396]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005ee2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005ee6:	6113      	str	r3, [r2, #16]
 8005ee8:	4b61      	ldr	r3, [pc, #388]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005eea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ef6:	495e      	ldr	r1, [pc, #376]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	670b      	str	r3, [r1, #112]	; 0x70
 8005efc:	e004      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005efe:	7dfb      	ldrb	r3, [r7, #23]
 8005f00:	75bb      	strb	r3, [r7, #22]
 8005f02:	e001      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f04:	7dfb      	ldrb	r3, [r7, #23]
 8005f06:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d07e      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f18:	2b28      	cmp	r3, #40	; 0x28
 8005f1a:	d867      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8005f1c:	a201      	add	r2, pc, #4	; (adr r2, 8005f24 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8005f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f22:	bf00      	nop
 8005f24:	08005ff3 	.word	0x08005ff3
 8005f28:	08005fed 	.word	0x08005fed
 8005f2c:	08005fed 	.word	0x08005fed
 8005f30:	08005fed 	.word	0x08005fed
 8005f34:	08005fed 	.word	0x08005fed
 8005f38:	08005fed 	.word	0x08005fed
 8005f3c:	08005fed 	.word	0x08005fed
 8005f40:	08005fed 	.word	0x08005fed
 8005f44:	08005fc9 	.word	0x08005fc9
 8005f48:	08005fed 	.word	0x08005fed
 8005f4c:	08005fed 	.word	0x08005fed
 8005f50:	08005fed 	.word	0x08005fed
 8005f54:	08005fed 	.word	0x08005fed
 8005f58:	08005fed 	.word	0x08005fed
 8005f5c:	08005fed 	.word	0x08005fed
 8005f60:	08005fed 	.word	0x08005fed
 8005f64:	08005fdb 	.word	0x08005fdb
 8005f68:	08005fed 	.word	0x08005fed
 8005f6c:	08005fed 	.word	0x08005fed
 8005f70:	08005fed 	.word	0x08005fed
 8005f74:	08005fed 	.word	0x08005fed
 8005f78:	08005fed 	.word	0x08005fed
 8005f7c:	08005fed 	.word	0x08005fed
 8005f80:	08005fed 	.word	0x08005fed
 8005f84:	08005ff3 	.word	0x08005ff3
 8005f88:	08005fed 	.word	0x08005fed
 8005f8c:	08005fed 	.word	0x08005fed
 8005f90:	08005fed 	.word	0x08005fed
 8005f94:	08005fed 	.word	0x08005fed
 8005f98:	08005fed 	.word	0x08005fed
 8005f9c:	08005fed 	.word	0x08005fed
 8005fa0:	08005fed 	.word	0x08005fed
 8005fa4:	08005ff3 	.word	0x08005ff3
 8005fa8:	08005fed 	.word	0x08005fed
 8005fac:	08005fed 	.word	0x08005fed
 8005fb0:	08005fed 	.word	0x08005fed
 8005fb4:	08005fed 	.word	0x08005fed
 8005fb8:	08005fed 	.word	0x08005fed
 8005fbc:	08005fed 	.word	0x08005fed
 8005fc0:	08005fed 	.word	0x08005fed
 8005fc4:	08005ff3 	.word	0x08005ff3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	2101      	movs	r1, #1
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f001 fb5e 	bl	8007690 <RCCEx_PLL2_Config>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005fd8:	e00c      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3324      	adds	r3, #36	; 0x24
 8005fde:	2101      	movs	r1, #1
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f001 fc07 	bl	80077f4 <RCCEx_PLL3_Config>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005fea:	e003      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	75fb      	strb	r3, [r7, #23]
      break;
 8005ff0:	e000      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8005ff2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ff4:	7dfb      	ldrb	r3, [r7, #23]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d109      	bne.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005ffa:	4b1d      	ldr	r3, [pc, #116]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ffe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006006:	491a      	ldr	r1, [pc, #104]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006008:	4313      	orrs	r3, r2
 800600a:	654b      	str	r3, [r1, #84]	; 0x54
 800600c:	e001      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800600e:	7dfb      	ldrb	r3, [r7, #23]
 8006010:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d03e      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006022:	2b05      	cmp	r3, #5
 8006024:	d820      	bhi.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8006026:	a201      	add	r2, pc, #4	; (adr r2, 800602c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8006028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602c:	0800607d 	.word	0x0800607d
 8006030:	08006045 	.word	0x08006045
 8006034:	08006057 	.word	0x08006057
 8006038:	0800607d 	.word	0x0800607d
 800603c:	0800607d 	.word	0x0800607d
 8006040:	0800607d 	.word	0x0800607d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	3304      	adds	r3, #4
 8006048:	2101      	movs	r1, #1
 800604a:	4618      	mov	r0, r3
 800604c:	f001 fb20 	bl	8007690 <RCCEx_PLL2_Config>
 8006050:	4603      	mov	r3, r0
 8006052:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006054:	e013      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	3324      	adds	r3, #36	; 0x24
 800605a:	2101      	movs	r1, #1
 800605c:	4618      	mov	r0, r3
 800605e:	f001 fbc9 	bl	80077f4 <RCCEx_PLL3_Config>
 8006062:	4603      	mov	r3, r0
 8006064:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006066:	e00a      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	75fb      	strb	r3, [r7, #23]
      break;
 800606c:	e007      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800606e:	bf00      	nop
 8006070:	58024400 	.word	0x58024400
 8006074:	58024800 	.word	0x58024800
 8006078:	00ffffcf 	.word	0x00ffffcf
      break;
 800607c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800607e:	7dfb      	ldrb	r3, [r7, #23]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d109      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006084:	4b9f      	ldr	r3, [pc, #636]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006088:	f023 0207 	bic.w	r2, r3, #7
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006090:	499c      	ldr	r1, [pc, #624]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006092:	4313      	orrs	r3, r2
 8006094:	654b      	str	r3, [r1, #84]	; 0x54
 8006096:	e001      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006098:	7dfb      	ldrb	r3, [r7, #23]
 800609a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d039      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ae:	2b05      	cmp	r3, #5
 80060b0:	d820      	bhi.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80060b2:	a201      	add	r2, pc, #4	; (adr r2, 80060b8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80060b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b8:	080060fb 	.word	0x080060fb
 80060bc:	080060d1 	.word	0x080060d1
 80060c0:	080060e3 	.word	0x080060e3
 80060c4:	080060fb 	.word	0x080060fb
 80060c8:	080060fb 	.word	0x080060fb
 80060cc:	080060fb 	.word	0x080060fb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3304      	adds	r3, #4
 80060d4:	2101      	movs	r1, #1
 80060d6:	4618      	mov	r0, r3
 80060d8:	f001 fada 	bl	8007690 <RCCEx_PLL2_Config>
 80060dc:	4603      	mov	r3, r0
 80060de:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80060e0:	e00c      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	3324      	adds	r3, #36	; 0x24
 80060e6:	2101      	movs	r1, #1
 80060e8:	4618      	mov	r0, r3
 80060ea:	f001 fb83 	bl	80077f4 <RCCEx_PLL3_Config>
 80060ee:	4603      	mov	r3, r0
 80060f0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80060f2:	e003      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	75fb      	strb	r3, [r7, #23]
      break;
 80060f8:	e000      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80060fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060fc:	7dfb      	ldrb	r3, [r7, #23]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10a      	bne.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006102:	4b80      	ldr	r3, [pc, #512]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006106:	f023 0207 	bic.w	r2, r3, #7
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006110:	497c      	ldr	r1, [pc, #496]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006112:	4313      	orrs	r3, r2
 8006114:	658b      	str	r3, [r1, #88]	; 0x58
 8006116:	e001      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006118:	7dfb      	ldrb	r3, [r7, #23]
 800611a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0320 	and.w	r3, r3, #32
 8006124:	2b00      	cmp	r3, #0
 8006126:	d04b      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800612e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006132:	d02e      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8006134:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006138:	d828      	bhi.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800613a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800613e:	d02a      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006144:	d822      	bhi.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8006146:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800614a:	d026      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800614c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006150:	d81c      	bhi.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8006152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006156:	d010      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8006158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800615c:	d816      	bhi.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800615e:	2b00      	cmp	r3, #0
 8006160:	d01d      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006162:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006166:	d111      	bne.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	3304      	adds	r3, #4
 800616c:	2100      	movs	r1, #0
 800616e:	4618      	mov	r0, r3
 8006170:	f001 fa8e 	bl	8007690 <RCCEx_PLL2_Config>
 8006174:	4603      	mov	r3, r0
 8006176:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006178:	e012      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	3324      	adds	r3, #36	; 0x24
 800617e:	2102      	movs	r1, #2
 8006180:	4618      	mov	r0, r3
 8006182:	f001 fb37 	bl	80077f4 <RCCEx_PLL3_Config>
 8006186:	4603      	mov	r3, r0
 8006188:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800618a:	e009      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	75fb      	strb	r3, [r7, #23]
      break;
 8006190:	e006      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8006192:	bf00      	nop
 8006194:	e004      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8006196:	bf00      	nop
 8006198:	e002      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800619a:	bf00      	nop
 800619c:	e000      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800619e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061a0:	7dfb      	ldrb	r3, [r7, #23]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10a      	bne.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061a6:	4b57      	ldr	r3, [pc, #348]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80061a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061aa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b4:	4953      	ldr	r1, [pc, #332]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	654b      	str	r3, [r1, #84]	; 0x54
 80061ba:	e001      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061bc:	7dfb      	ldrb	r3, [r7, #23]
 80061be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d04b      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80061d6:	d02e      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80061d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80061dc:	d828      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80061de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e2:	d02a      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80061e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e8:	d822      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80061ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061ee:	d026      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80061f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061f4:	d81c      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80061f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061fa:	d010      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80061fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006200:	d816      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8006202:	2b00      	cmp	r3, #0
 8006204:	d01d      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800620a:	d111      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	3304      	adds	r3, #4
 8006210:	2100      	movs	r1, #0
 8006212:	4618      	mov	r0, r3
 8006214:	f001 fa3c 	bl	8007690 <RCCEx_PLL2_Config>
 8006218:	4603      	mov	r3, r0
 800621a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800621c:	e012      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	3324      	adds	r3, #36	; 0x24
 8006222:	2102      	movs	r1, #2
 8006224:	4618      	mov	r0, r3
 8006226:	f001 fae5 	bl	80077f4 <RCCEx_PLL3_Config>
 800622a:	4603      	mov	r3, r0
 800622c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800622e:	e009      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	75fb      	strb	r3, [r7, #23]
      break;
 8006234:	e006      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8006236:	bf00      	nop
 8006238:	e004      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800623a:	bf00      	nop
 800623c:	e002      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800623e:	bf00      	nop
 8006240:	e000      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8006242:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006244:	7dfb      	ldrb	r3, [r7, #23]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10a      	bne.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800624a:	4b2e      	ldr	r3, [pc, #184]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800624c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800624e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006258:	492a      	ldr	r1, [pc, #168]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800625a:	4313      	orrs	r3, r2
 800625c:	658b      	str	r3, [r1, #88]	; 0x58
 800625e:	e001      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006260:	7dfb      	ldrb	r3, [r7, #23]
 8006262:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626c:	2b00      	cmp	r3, #0
 800626e:	d04d      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006276:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800627a:	d02e      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800627c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006280:	d828      	bhi.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006286:	d02a      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8006288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800628c:	d822      	bhi.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800628e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006292:	d026      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006294:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006298:	d81c      	bhi.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800629a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800629e:	d010      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80062a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062a4:	d816      	bhi.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d01d      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80062aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ae:	d111      	bne.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	3304      	adds	r3, #4
 80062b4:	2100      	movs	r1, #0
 80062b6:	4618      	mov	r0, r3
 80062b8:	f001 f9ea 	bl	8007690 <RCCEx_PLL2_Config>
 80062bc:	4603      	mov	r3, r0
 80062be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80062c0:	e012      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	3324      	adds	r3, #36	; 0x24
 80062c6:	2102      	movs	r1, #2
 80062c8:	4618      	mov	r0, r3
 80062ca:	f001 fa93 	bl	80077f4 <RCCEx_PLL3_Config>
 80062ce:	4603      	mov	r3, r0
 80062d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80062d2:	e009      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	75fb      	strb	r3, [r7, #23]
      break;
 80062d8:	e006      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80062da:	bf00      	nop
 80062dc:	e004      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80062de:	bf00      	nop
 80062e0:	e002      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80062e2:	bf00      	nop
 80062e4:	e000      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80062e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062e8:	7dfb      	ldrb	r3, [r7, #23]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10c      	bne.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80062ee:	4b05      	ldr	r3, [pc, #20]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80062f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062fc:	4901      	ldr	r1, [pc, #4]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	658b      	str	r3, [r1, #88]	; 0x58
 8006302:	e003      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8006304:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006308:	7dfb      	ldrb	r3, [r7, #23]
 800630a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0308 	and.w	r3, r3, #8
 8006314:	2b00      	cmp	r3, #0
 8006316:	d018      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800631c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006320:	d10a      	bne.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	3324      	adds	r3, #36	; 0x24
 8006326:	2102      	movs	r1, #2
 8006328:	4618      	mov	r0, r3
 800632a:	f001 fa63 	bl	80077f4 <RCCEx_PLL3_Config>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006338:	4b8a      	ldr	r3, [pc, #552]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800633a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006344:	4987      	ldr	r1, [pc, #540]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006346:	4313      	orrs	r3, r2
 8006348:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0310 	and.w	r3, r3, #16
 8006352:	2b00      	cmp	r3, #0
 8006354:	d01a      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800635c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006360:	d10a      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	3324      	adds	r3, #36	; 0x24
 8006366:	2102      	movs	r1, #2
 8006368:	4618      	mov	r0, r3
 800636a:	f001 fa43 	bl	80077f4 <RCCEx_PLL3_Config>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006378:	4b7a      	ldr	r3, [pc, #488]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800637a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800637c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006386:	4977      	ldr	r1, [pc, #476]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006388:	4313      	orrs	r3, r2
 800638a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d034      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800639e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063a2:	d01d      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80063a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063a8:	d817      	bhi.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80063ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063b2:	d009      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80063b4:	e011      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	3304      	adds	r3, #4
 80063ba:	2100      	movs	r1, #0
 80063bc:	4618      	mov	r0, r3
 80063be:	f001 f967 	bl	8007690 <RCCEx_PLL2_Config>
 80063c2:	4603      	mov	r3, r0
 80063c4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80063c6:	e00c      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3324      	adds	r3, #36	; 0x24
 80063cc:	2102      	movs	r1, #2
 80063ce:	4618      	mov	r0, r3
 80063d0:	f001 fa10 	bl	80077f4 <RCCEx_PLL3_Config>
 80063d4:	4603      	mov	r3, r0
 80063d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80063d8:	e003      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	75fb      	strb	r3, [r7, #23]
      break;
 80063de:	e000      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80063e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063e2:	7dfb      	ldrb	r3, [r7, #23]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10a      	bne.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063e8:	4b5e      	ldr	r3, [pc, #376]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80063ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063f6:	495b      	ldr	r1, [pc, #364]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	658b      	str	r3, [r1, #88]	; 0x58
 80063fc:	e001      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fe:	7dfb      	ldrb	r3, [r7, #23]
 8006400:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d033      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006414:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006418:	d01c      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800641a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800641e:	d816      	bhi.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006420:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006424:	d003      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006426:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800642a:	d007      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800642c:	e00f      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800642e:	4b4d      	ldr	r3, [pc, #308]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006432:	4a4c      	ldr	r2, [pc, #304]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006438:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800643a:	e00c      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	3324      	adds	r3, #36	; 0x24
 8006440:	2101      	movs	r1, #1
 8006442:	4618      	mov	r0, r3
 8006444:	f001 f9d6 	bl	80077f4 <RCCEx_PLL3_Config>
 8006448:	4603      	mov	r3, r0
 800644a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800644c:	e003      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	75fb      	strb	r3, [r7, #23]
      break;
 8006452:	e000      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8006454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006456:	7dfb      	ldrb	r3, [r7, #23]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10a      	bne.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800645c:	4b41      	ldr	r3, [pc, #260]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800645e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006460:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800646a:	493e      	ldr	r1, [pc, #248]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800646c:	4313      	orrs	r3, r2
 800646e:	654b      	str	r3, [r1, #84]	; 0x54
 8006470:	e001      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006472:	7dfb      	ldrb	r3, [r7, #23]
 8006474:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d029      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800648a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800648e:	d007      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006490:	e00f      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006492:	4b34      	ldr	r3, [pc, #208]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006496:	4a33      	ldr	r2, [pc, #204]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800649c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800649e:	e00b      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3304      	adds	r3, #4
 80064a4:	2102      	movs	r1, #2
 80064a6:	4618      	mov	r0, r3
 80064a8:	f001 f8f2 	bl	8007690 <RCCEx_PLL2_Config>
 80064ac:	4603      	mov	r3, r0
 80064ae:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80064b0:	e002      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	75fb      	strb	r3, [r7, #23]
      break;
 80064b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064b8:	7dfb      	ldrb	r3, [r7, #23]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d109      	bne.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80064be:	4b29      	ldr	r3, [pc, #164]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80064c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ca:	4926      	ldr	r1, [pc, #152]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 80064d0:	e001      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d2:	7dfb      	ldrb	r3, [r7, #23]
 80064d4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	3324      	adds	r3, #36	; 0x24
 80064e6:	2102      	movs	r1, #2
 80064e8:	4618      	mov	r0, r3
 80064ea:	f001 f983 	bl	80077f4 <RCCEx_PLL3_Config>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d033      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006508:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800650c:	d017      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800650e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006512:	d811      	bhi.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006518:	d013      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800651a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800651e:	d80b      	bhi.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006520:	2b00      	cmp	r3, #0
 8006522:	d010      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8006524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006528:	d106      	bne.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800652a:	4b0e      	ldr	r3, [pc, #56]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800652c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652e:	4a0d      	ldr	r2, [pc, #52]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006534:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006536:	e007      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	75fb      	strb	r3, [r7, #23]
      break;
 800653c:	e004      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800653e:	bf00      	nop
 8006540:	e002      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8006542:	bf00      	nop
 8006544:	e000      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8006546:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006548:	7dfb      	ldrb	r3, [r7, #23]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10c      	bne.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800654e:	4b05      	ldr	r3, [pc, #20]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006552:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800655a:	4902      	ldr	r1, [pc, #8]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800655c:	4313      	orrs	r3, r2
 800655e:	654b      	str	r3, [r1, #84]	; 0x54
 8006560:	e004      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8006562:	bf00      	nop
 8006564:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006568:	7dfb      	ldrb	r3, [r7, #23]
 800656a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d008      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006578:	4b29      	ldr	r3, [pc, #164]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800657a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800657c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006584:	4926      	ldr	r1, [pc, #152]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006586:	4313      	orrs	r3, r2
 8006588:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d008      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006596:	4b22      	ldr	r3, [pc, #136]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800659a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065a2:	491f      	ldr	r1, [pc, #124]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00d      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065b4:	4b1a      	ldr	r3, [pc, #104]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	4a19      	ldr	r2, [pc, #100]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80065ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065be:	6113      	str	r3, [r2, #16]
 80065c0:	4b17      	ldr	r3, [pc, #92]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80065c2:	691a      	ldr	r2, [r3, #16]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80065ca:	4915      	ldr	r1, [pc, #84]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	da08      	bge.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80065d8:	4b11      	ldr	r3, [pc, #68]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80065da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065dc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e4:	490e      	ldr	r1, [pc, #56]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d009      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80065f6:	4b0a      	ldr	r3, [pc, #40]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80065f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006604:	4906      	ldr	r1, [pc, #24]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006606:	4313      	orrs	r3, r2
 8006608:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800660a:	7dbb      	ldrb	r3, [r7, #22]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	e000      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
}
 8006616:	4618      	mov	r0, r3
 8006618:	3718      	adds	r7, #24
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	58024400 	.word	0x58024400

08006624 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b090      	sub	sp, #64	; 0x40
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006632:	f040 8089 	bne.w	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006636:	4b95      	ldr	r3, [pc, #596]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800663a:	f003 0307 	and.w	r3, r3, #7
 800663e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006642:	2b04      	cmp	r3, #4
 8006644:	d87d      	bhi.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8006646:	a201      	add	r2, pc, #4	; (adr r2, 800664c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664c:	08006661 	.word	0x08006661
 8006650:	08006685 	.word	0x08006685
 8006654:	080066a9 	.word	0x080066a9
 8006658:	0800673d 	.word	0x0800673d
 800665c:	080066cd 	.word	0x080066cd
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006660:	4b8a      	ldr	r3, [pc, #552]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006668:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800666c:	d107      	bne.n	800667e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800666e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006672:	4618      	mov	r0, r3
 8006674:	f000 feba 	bl	80073ec <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800667c:	e3ef      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800667e:	2300      	movs	r3, #0
 8006680:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006682:	e3ec      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006684:	4b81      	ldr	r3, [pc, #516]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800668c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006690:	d107      	bne.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006692:	f107 0318 	add.w	r3, r7, #24
 8006696:	4618      	mov	r0, r3
 8006698:	f000 fc00 	bl	8006e9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80066a0:	e3dd      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80066a2:	2300      	movs	r3, #0
 80066a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066a6:	e3da      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066a8:	4b78      	ldr	r3, [pc, #480]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066b4:	d107      	bne.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066b6:	f107 030c 	add.w	r3, r7, #12
 80066ba:	4618      	mov	r0, r3
 80066bc:	f000 fd42 	bl	8007144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80066c4:	e3cb      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80066c6:	2300      	movs	r3, #0
 80066c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066ca:	e3c8      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80066cc:	4b6f      	ldr	r3, [pc, #444]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80066ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066d4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066d6:	4b6d      	ldr	r3, [pc, #436]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0304 	and.w	r3, r3, #4
 80066de:	2b04      	cmp	r3, #4
 80066e0:	d10c      	bne.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80066e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d109      	bne.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066e8:	4b68      	ldr	r3, [pc, #416]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	08db      	lsrs	r3, r3, #3
 80066ee:	f003 0303 	and.w	r3, r3, #3
 80066f2:	4a67      	ldr	r2, [pc, #412]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80066f4:	fa22 f303 	lsr.w	r3, r2, r3
 80066f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066fa:	e01e      	b.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066fc:	4b63      	ldr	r3, [pc, #396]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006708:	d106      	bne.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800670a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800670c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006710:	d102      	bne.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006712:	4b60      	ldr	r3, [pc, #384]	; (8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006714:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006716:	e010      	b.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006718:	4b5c      	ldr	r3, [pc, #368]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006720:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006724:	d106      	bne.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006728:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800672c:	d102      	bne.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800672e:	4b5a      	ldr	r3, [pc, #360]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006730:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006732:	e002      	b.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006734:	2300      	movs	r3, #0
 8006736:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006738:	e391      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800673a:	e390      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800673c:	4b57      	ldr	r3, [pc, #348]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800673e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006740:	e38d      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 8006742:	2300      	movs	r3, #0
 8006744:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006746:	e38a      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800674e:	f040 80a7 	bne.w	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006752:	4b4e      	ldr	r3, [pc, #312]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006756:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800675a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800675c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006762:	d054      	beq.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006766:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800676a:	f200 808b 	bhi.w	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006774:	f000 8083 	beq.w	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800677e:	f200 8081 	bhi.w	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8006782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006784:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006788:	d02f      	beq.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006790:	d878      	bhi.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8006792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006794:	2b00      	cmp	r3, #0
 8006796:	d004      	beq.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8006798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800679e:	d012      	beq.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80067a0:	e070      	b.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067a2:	4b3a      	ldr	r3, [pc, #232]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067ae:	d107      	bne.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 fe19 	bl	80073ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80067be:	e34e      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80067c0:	2300      	movs	r3, #0
 80067c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067c4:	e34b      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067c6:	4b31      	ldr	r3, [pc, #196]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067d2:	d107      	bne.n	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067d4:	f107 0318 	add.w	r3, r7, #24
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 fb5f 	bl	8006e9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80067e2:	e33c      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80067e4:	2300      	movs	r3, #0
 80067e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067e8:	e339      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067ea:	4b28      	ldr	r3, [pc, #160]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067f6:	d107      	bne.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067f8:	f107 030c 	add.w	r3, r7, #12
 80067fc:	4618      	mov	r0, r3
 80067fe:	f000 fca1 	bl	8007144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006806:	e32a      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8006808:	2300      	movs	r3, #0
 800680a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800680c:	e327      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800680e:	4b1f      	ldr	r3, [pc, #124]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006812:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006816:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006818:	4b1c      	ldr	r3, [pc, #112]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0304 	and.w	r3, r3, #4
 8006820:	2b04      	cmp	r3, #4
 8006822:	d10c      	bne.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8006824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006826:	2b00      	cmp	r3, #0
 8006828:	d109      	bne.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800682a:	4b18      	ldr	r3, [pc, #96]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	08db      	lsrs	r3, r3, #3
 8006830:	f003 0303 	and.w	r3, r3, #3
 8006834:	4a16      	ldr	r2, [pc, #88]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8006836:	fa22 f303 	lsr.w	r3, r2, r3
 800683a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800683c:	e01e      	b.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800683e:	4b13      	ldr	r3, [pc, #76]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800684a:	d106      	bne.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800684c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800684e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006852:	d102      	bne.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006854:	4b0f      	ldr	r3, [pc, #60]	; (8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006858:	e010      	b.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800685a:	4b0c      	ldr	r3, [pc, #48]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006862:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006866:	d106      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800686e:	d102      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006870:	4b09      	ldr	r3, [pc, #36]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006874:	e002      	b.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006876:	2300      	movs	r3, #0
 8006878:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800687a:	e2f0      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800687c:	e2ef      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800687e:	4b07      	ldr	r3, [pc, #28]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006880:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006882:	e2ec      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 8006884:	2300      	movs	r3, #0
 8006886:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006888:	e2e9      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800688a:	bf00      	nop
 800688c:	58024400 	.word	0x58024400
 8006890:	03d09000 	.word	0x03d09000
 8006894:	003d0900 	.word	0x003d0900
 8006898:	007a1200 	.word	0x007a1200
 800689c:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068a6:	f040 809c 	bne.w	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80068aa:	4b9d      	ldr	r3, [pc, #628]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80068ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ae:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80068b2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80068b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068ba:	d054      	beq.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80068bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068c2:	f200 808b 	bhi.w	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80068c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80068cc:	f000 8083 	beq.w	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80068d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80068d6:	f200 8081 	bhi.w	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80068da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068e0:	d02f      	beq.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068e8:	d878      	bhi.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80068ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d004      	beq.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80068f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068f6:	d012      	beq.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80068f8:	e070      	b.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068fa:	4b89      	ldr	r3, [pc, #548]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006902:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006906:	d107      	bne.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800690c:	4618      	mov	r0, r3
 800690e:	f000 fd6d 	bl	80073ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006914:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006916:	e2a2      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8006918:	2300      	movs	r3, #0
 800691a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800691c:	e29f      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800691e:	4b80      	ldr	r3, [pc, #512]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006926:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800692a:	d107      	bne.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800692c:	f107 0318 	add.w	r3, r7, #24
 8006930:	4618      	mov	r0, r3
 8006932:	f000 fab3 	bl	8006e9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800693a:	e290      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800693c:	2300      	movs	r3, #0
 800693e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006940:	e28d      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006942:	4b77      	ldr	r3, [pc, #476]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800694a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800694e:	d107      	bne.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006950:	f107 030c 	add.w	r3, r7, #12
 8006954:	4618      	mov	r0, r3
 8006956:	f000 fbf5 	bl	8007144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800695e:	e27e      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8006960:	2300      	movs	r3, #0
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006964:	e27b      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006966:	4b6e      	ldr	r3, [pc, #440]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8006968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800696a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800696e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006970:	4b6b      	ldr	r3, [pc, #428]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b04      	cmp	r3, #4
 800697a:	d10c      	bne.n	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800697c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697e:	2b00      	cmp	r3, #0
 8006980:	d109      	bne.n	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006982:	4b67      	ldr	r3, [pc, #412]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	08db      	lsrs	r3, r3, #3
 8006988:	f003 0303 	and.w	r3, r3, #3
 800698c:	4a65      	ldr	r2, [pc, #404]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800698e:	fa22 f303 	lsr.w	r3, r2, r3
 8006992:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006994:	e01e      	b.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006996:	4b62      	ldr	r3, [pc, #392]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800699e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069a2:	d106      	bne.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80069a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069aa:	d102      	bne.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80069ac:	4b5e      	ldr	r3, [pc, #376]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80069ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069b0:	e010      	b.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069b2:	4b5b      	ldr	r3, [pc, #364]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069be:	d106      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80069c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069c6:	d102      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80069c8:	4b58      	ldr	r3, [pc, #352]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80069ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069cc:	e002      	b.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80069d2:	e244      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80069d4:	e243      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80069d6:	4b56      	ldr	r3, [pc, #344]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80069d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069da:	e240      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 80069dc:	2300      	movs	r3, #0
 80069de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069e0:	e23d      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069e8:	f040 80a7 	bne.w	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80069ec:	4b4c      	ldr	r3, [pc, #304]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80069ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069f0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80069f4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80069f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069fc:	d055      	beq.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 80069fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a04:	f200 8096 	bhi.w	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8006a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a0e:	f000 8084 	beq.w	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a18:	f200 808c 	bhi.w	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8006a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a22:	d030      	beq.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8006a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a2a:	f200 8083 	bhi.w	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d004      	beq.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8006a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a3a:	d012      	beq.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
 8006a3c:	e07a      	b.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a3e:	4b38      	ldr	r3, [pc, #224]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a4a:	d107      	bne.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x438>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a50:	4618      	mov	r0, r3
 8006a52:	f000 fccb 	bl	80073ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a58:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a5a:	e200      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a60:	e1fd      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a62:	4b2f      	ldr	r3, [pc, #188]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a6e:	d107      	bne.n	8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a70:	f107 0318 	add.w	r3, r7, #24
 8006a74:	4618      	mov	r0, r3
 8006a76:	f000 fa11 	bl	8006e9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a7e:	e1ee      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8006a80:	2300      	movs	r3, #0
 8006a82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a84:	e1eb      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a86:	4b26      	ldr	r3, [pc, #152]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a92:	d107      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a94:	f107 030c 	add.w	r3, r7, #12
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 fb53 	bl	8007144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006aa2:	e1dc      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006aa8:	e1d9      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006aaa:	4b1d      	ldr	r3, [pc, #116]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8006aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ab2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ab4:	4b1a      	ldr	r3, [pc, #104]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0304 	and.w	r3, r3, #4
 8006abc:	2b04      	cmp	r3, #4
 8006abe:	d10c      	bne.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 8006ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d109      	bne.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ac6:	4b16      	ldr	r3, [pc, #88]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	08db      	lsrs	r3, r3, #3
 8006acc:	f003 0303 	and.w	r3, r3, #3
 8006ad0:	4a14      	ldr	r2, [pc, #80]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ad8:	e01e      	b.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ada:	4b11      	ldr	r3, [pc, #68]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ae6:	d106      	bne.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 8006ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aee:	d102      	bne.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006af0:	4b0d      	ldr	r3, [pc, #52]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006af4:	e010      	b.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006af6:	4b0a      	ldr	r3, [pc, #40]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006afe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b02:	d106      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8006b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b0a:	d102      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006b0c:	4b07      	ldr	r3, [pc, #28]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b10:	e002      	b.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006b12:	2300      	movs	r3, #0
 8006b14:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006b16:	e1a2      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006b18:	e1a1      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006b1a:	4b05      	ldr	r3, [pc, #20]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b1e:	e19e      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006b20:	58024400 	.word	0x58024400
 8006b24:	03d09000 	.word	0x03d09000
 8006b28:	003d0900 	.word	0x003d0900
 8006b2c:	007a1200 	.word	0x007a1200
 8006b30:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 8006b34:	2300      	movs	r3, #0
 8006b36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b38:	e191      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b40:	d173      	bne.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006b42:	4b9b      	ldr	r3, [pc, #620]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b4a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b52:	d02f      	beq.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8006b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b5a:	d863      	bhi.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8006b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d004      	beq.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b68:	d012      	beq.n	8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8006b6a:	e05b      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b6c:	4b90      	ldr	r3, [pc, #576]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b78:	d107      	bne.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b7a:	f107 0318 	add.w	r3, r7, #24
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 f98c 	bl	8006e9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b88:	e169      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b8e:	e166      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b90:	4b87      	ldr	r3, [pc, #540]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b9c:	d107      	bne.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b9e:	f107 030c 	add.w	r3, r7, #12
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 face 	bl	8007144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006bac:	e157      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bb2:	e154      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006bb4:	4b7e      	ldr	r3, [pc, #504]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006bbc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bbe:	4b7c      	ldr	r3, [pc, #496]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0304 	and.w	r3, r3, #4
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	d10c      	bne.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8006bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d109      	bne.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006bd0:	4b77      	ldr	r3, [pc, #476]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	08db      	lsrs	r3, r3, #3
 8006bd6:	f003 0303 	and.w	r3, r3, #3
 8006bda:	4a76      	ldr	r2, [pc, #472]	; (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8006bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8006be0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006be2:	e01e      	b.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006be4:	4b72      	ldr	r3, [pc, #456]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bf0:	d106      	bne.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 8006bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bf8:	d102      	bne.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006bfa:	4b6f      	ldr	r3, [pc, #444]	; (8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8006bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bfe:	e010      	b.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c00:	4b6b      	ldr	r3, [pc, #428]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c0c:	d106      	bne.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 8006c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c14:	d102      	bne.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006c16:	4b69      	ldr	r3, [pc, #420]	; (8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006c18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c1a:	e002      	b.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006c20:	e11d      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006c22:	e11c      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 8006c24:	2300      	movs	r3, #0
 8006c26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c28:	e119      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c30:	d133      	bne.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x676>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006c32:	4b5f      	ldr	r3, [pc, #380]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c3a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d004      	beq.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 8006c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c48:	d012      	beq.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006c4a:	e023      	b.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c4c:	4b58      	ldr	r3, [pc, #352]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c58:	d107      	bne.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x646>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 fbc4 	bl	80073ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006c68:	e0f9      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c6e:	e0f6      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c70:	4b4f      	ldr	r3, [pc, #316]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c7c:	d107      	bne.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c7e:	f107 0318 	add.w	r3, r7, #24
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 f90a 	bl	8006e9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006c8c:	e0e7      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c92:	e0e4      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 8006c94:	2300      	movs	r3, #0
 8006c96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c98:	e0e1      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ca0:	f040 808e 	bne.w	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006ca4:	4b42      	ldr	r3, [pc, #264]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006cac:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cb4:	d06b      	beq.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8006cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cbc:	d874      	bhi.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8006cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc4:	d056      	beq.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 8006cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ccc:	d86c      	bhi.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8006cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cd4:	d03b      	beq.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8006cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cdc:	d864      	bhi.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8006cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ce4:	d021      	beq.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 8006ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cec:	d85c      	bhi.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8006cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d004      	beq.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8006cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cfa:	d004      	beq.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 8006cfc:	e054      	b.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006cfe:	f000 f8b7 	bl	8006e70 <HAL_RCCEx_GetD3PCLK1Freq>
 8006d02:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006d04:	e0ab      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d06:	4b2a      	ldr	r3, [pc, #168]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d12:	d107      	bne.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d14:	f107 0318 	add.w	r3, r7, #24
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 f8bf 	bl	8006e9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006d22:	e09c      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8006d24:	2300      	movs	r3, #0
 8006d26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d28:	e099      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d2a:	4b21      	ldr	r3, [pc, #132]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d36:	d107      	bne.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d38:	f107 030c 	add.w	r3, r7, #12
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f000 fa01 	bl	8007144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006d46:	e08a      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d4c:	e087      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d4e:	4b18      	ldr	r3, [pc, #96]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0304 	and.w	r3, r3, #4
 8006d56:	2b04      	cmp	r3, #4
 8006d58:	d109      	bne.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d5a:	4b15      	ldr	r3, [pc, #84]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	08db      	lsrs	r3, r3, #3
 8006d60:	f003 0303 	and.w	r3, r3, #3
 8006d64:	4a13      	ldr	r2, [pc, #76]	; (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8006d66:	fa22 f303 	lsr.w	r3, r2, r3
 8006d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006d6c:	e077      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d72:	e074      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006d74:	4b0e      	ldr	r3, [pc, #56]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d80:	d102      	bne.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
         {
          frequency = CSI_VALUE;
 8006d82:	4b0d      	ldr	r3, [pc, #52]	; (8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8006d84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d86:	e06a      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d8c:	e067      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d8e:	4b08      	ldr	r3, [pc, #32]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d9a:	d102      	bne.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
         {
          frequency = HSE_VALUE;
 8006d9c:	4b07      	ldr	r3, [pc, #28]	; (8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006da0:	e05d      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8006da2:	2300      	movs	r3, #0
 8006da4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006da6:	e05a      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006da8:	2300      	movs	r3, #0
 8006daa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dac:	e057      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006dae:	bf00      	nop
 8006db0:	58024400 	.word	0x58024400
 8006db4:	03d09000 	.word	0x03d09000
 8006db8:	003d0900 	.word	0x003d0900
 8006dbc:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dc6:	d148      	bne.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006dc8:	4b27      	ldr	r3, [pc, #156]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006dd0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dd8:	d02a      	beq.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 8006dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ddc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006de0:	d838      	bhi.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 8006de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d004      	beq.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
 8006de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dee:	d00d      	beq.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 8006df0:	e030      	b.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006df2:	4b1d      	ldr	r3, [pc, #116]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dfe:	d102      	bne.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
         {
          frequency = HSE_VALUE;
 8006e00:	4b1a      	ldr	r3, [pc, #104]	; (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8006e02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006e04:	e02b      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8006e06:	2300      	movs	r3, #0
 8006e08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e0a:	e028      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e0c:	4b16      	ldr	r3, [pc, #88]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e18:	d107      	bne.n	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0x806>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 fae4 	bl	80073ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006e28:	e019      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e2e:	e016      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e30:	4b0d      	ldr	r3, [pc, #52]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e3c:	d107      	bne.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e3e:	f107 0318 	add.w	r3, r7, #24
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 f82a 	bl	8006e9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006e4c:	e007      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e52:	e004      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 8006e54:	2300      	movs	r3, #0
 8006e56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e58:	e001      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else
    {
      frequency = 0;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3740      	adds	r7, #64	; 0x40
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	58024400 	.word	0x58024400
 8006e6c:	007a1200 	.word	0x007a1200

08006e70 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e74:	f7fe fc80 	bl	8005778 <HAL_RCC_GetHCLKFreq>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	4b06      	ldr	r3, [pc, #24]	; (8006e94 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	091b      	lsrs	r3, r3, #4
 8006e80:	f003 0307 	and.w	r3, r3, #7
 8006e84:	4904      	ldr	r1, [pc, #16]	; (8006e98 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e86:	5ccb      	ldrb	r3, [r1, r3]
 8006e88:	f003 031f 	and.w	r3, r3, #31
 8006e8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	58024400 	.word	0x58024400
 8006e98:	0800c364 	.word	0x0800c364

08006e9c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b089      	sub	sp, #36	; 0x24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ea4:	4ba1      	ldr	r3, [pc, #644]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea8:	f003 0303 	and.w	r3, r3, #3
 8006eac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006eae:	4b9f      	ldr	r3, [pc, #636]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb2:	0b1b      	lsrs	r3, r3, #12
 8006eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eb8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006eba:	4b9c      	ldr	r3, [pc, #624]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebe:	091b      	lsrs	r3, r3, #4
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006ec6:	4b99      	ldr	r3, [pc, #612]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eca:	08db      	lsrs	r3, r3, #3
 8006ecc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	fb02 f303 	mul.w	r3, r2, r3
 8006ed6:	ee07 3a90 	vmov	s15, r3
 8006eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ede:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f000 8111 	beq.w	800710c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	f000 8083 	beq.w	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	f200 80a1 	bhi.w	800703c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d003      	beq.n	8006f08 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d056      	beq.n	8006fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006f06:	e099      	b.n	800703c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f08:	4b88      	ldr	r3, [pc, #544]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0320 	and.w	r3, r3, #32
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d02d      	beq.n	8006f70 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f14:	4b85      	ldr	r3, [pc, #532]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	08db      	lsrs	r3, r3, #3
 8006f1a:	f003 0303 	and.w	r3, r3, #3
 8006f1e:	4a84      	ldr	r2, [pc, #528]	; (8007130 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006f20:	fa22 f303 	lsr.w	r3, r2, r3
 8006f24:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	ee07 3a90 	vmov	s15, r3
 8006f2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	ee07 3a90 	vmov	s15, r3
 8006f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f3e:	4b7b      	ldr	r3, [pc, #492]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f52:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007134 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f6a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006f6e:	e087      	b.n	8007080 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007138 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f82:	4b6a      	ldr	r3, [pc, #424]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f96:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007134 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fb2:	e065      	b.n	8007080 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	ee07 3a90 	vmov	s15, r3
 8006fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fbe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800713c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fc6:	4b59      	ldr	r3, [pc, #356]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fce:	ee07 3a90 	vmov	s15, r3
 8006fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fda:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007134 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ff2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ff6:	e043      	b.n	8007080 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007002:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007140 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800700a:	4b48      	ldr	r3, [pc, #288]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800700c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007012:	ee07 3a90 	vmov	s15, r3
 8007016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800701a:	ed97 6a03 	vldr	s12, [r7, #12]
 800701e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007134 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800702a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800702e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007036:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800703a:	e021      	b.n	8007080 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	ee07 3a90 	vmov	s15, r3
 8007042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007046:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800713c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800704a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800704e:	4b37      	ldr	r3, [pc, #220]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007056:	ee07 3a90 	vmov	s15, r3
 800705a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800705e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007062:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007134 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800706a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800706e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800707a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800707e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007080:	4b2a      	ldr	r3, [pc, #168]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007084:	0a5b      	lsrs	r3, r3, #9
 8007086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800708a:	ee07 3a90 	vmov	s15, r3
 800708e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007092:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007096:	ee37 7a87 	vadd.f32	s14, s15, s14
 800709a:	edd7 6a07 	vldr	s13, [r7, #28]
 800709e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070a6:	ee17 2a90 	vmov	r2, s15
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80070ae:	4b1f      	ldr	r3, [pc, #124]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b2:	0c1b      	lsrs	r3, r3, #16
 80070b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070b8:	ee07 3a90 	vmov	s15, r3
 80070bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80070cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070d4:	ee17 2a90 	vmov	r2, s15
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80070dc:	4b13      	ldr	r3, [pc, #76]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e0:	0e1b      	lsrs	r3, r3, #24
 80070e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070e6:	ee07 3a90 	vmov	s15, r3
 80070ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80070fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007102:	ee17 2a90 	vmov	r2, s15
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800710a:	e008      	b.n	800711e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	609a      	str	r2, [r3, #8]
}
 800711e:	bf00      	nop
 8007120:	3724      	adds	r7, #36	; 0x24
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	58024400 	.word	0x58024400
 8007130:	03d09000 	.word	0x03d09000
 8007134:	46000000 	.word	0x46000000
 8007138:	4c742400 	.word	0x4c742400
 800713c:	4a742400 	.word	0x4a742400
 8007140:	4af42400 	.word	0x4af42400

08007144 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007144:	b480      	push	{r7}
 8007146:	b089      	sub	sp, #36	; 0x24
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800714c:	4ba1      	ldr	r3, [pc, #644]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800714e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007150:	f003 0303 	and.w	r3, r3, #3
 8007154:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007156:	4b9f      	ldr	r3, [pc, #636]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715a:	0d1b      	lsrs	r3, r3, #20
 800715c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007160:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007162:	4b9c      	ldr	r3, [pc, #624]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007166:	0a1b      	lsrs	r3, r3, #8
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800716e:	4b99      	ldr	r3, [pc, #612]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007172:	08db      	lsrs	r3, r3, #3
 8007174:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	fb02 f303 	mul.w	r3, r2, r3
 800717e:	ee07 3a90 	vmov	s15, r3
 8007182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007186:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 8111 	beq.w	80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	2b02      	cmp	r3, #2
 8007196:	f000 8083 	beq.w	80072a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	2b02      	cmp	r3, #2
 800719e:	f200 80a1 	bhi.w	80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d003      	beq.n	80071b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d056      	beq.n	800725c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80071ae:	e099      	b.n	80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071b0:	4b88      	ldr	r3, [pc, #544]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0320 	and.w	r3, r3, #32
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d02d      	beq.n	8007218 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071bc:	4b85      	ldr	r3, [pc, #532]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	08db      	lsrs	r3, r3, #3
 80071c2:	f003 0303 	and.w	r3, r3, #3
 80071c6:	4a84      	ldr	r2, [pc, #528]	; (80073d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80071c8:	fa22 f303 	lsr.w	r3, r2, r3
 80071cc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	ee07 3a90 	vmov	s15, r3
 80071d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e6:	4b7b      	ldr	r3, [pc, #492]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ee:	ee07 3a90 	vmov	s15, r3
 80071f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800720a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800720e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007212:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007216:	e087      	b.n	8007328 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	ee07 3a90 	vmov	s15, r3
 800721e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007222:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80073e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800722a:	4b6a      	ldr	r3, [pc, #424]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800723a:	ed97 6a03 	vldr	s12, [r7, #12]
 800723e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800724a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800724e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007256:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800725a:	e065      	b.n	8007328 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	ee07 3a90 	vmov	s15, r3
 8007262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007266:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80073e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800726a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800726e:	4b59      	ldr	r3, [pc, #356]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800727e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007282:	eddf 5a56 	vldr	s11, [pc, #344]	; 80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800728a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800728e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800729a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800729e:	e043      	b.n	8007328 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80073e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80072ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072b2:	4b48      	ldr	r3, [pc, #288]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ba:	ee07 3a90 	vmov	s15, r3
 80072be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072e2:	e021      	b.n	8007328 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80073e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80072f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072f6:	4b37      	ldr	r3, [pc, #220]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072fe:	ee07 3a90 	vmov	s15, r3
 8007302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007306:	ed97 6a03 	vldr	s12, [r7, #12]
 800730a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800730e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800731a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800731e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007322:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007326:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007328:	4b2a      	ldr	r3, [pc, #168]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800732a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732c:	0a5b      	lsrs	r3, r3, #9
 800732e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800733e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007342:	edd7 6a07 	vldr	s13, [r7, #28]
 8007346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800734a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800734e:	ee17 2a90 	vmov	r2, s15
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007356:	4b1f      	ldr	r3, [pc, #124]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735a:	0c1b      	lsrs	r3, r3, #16
 800735c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007360:	ee07 3a90 	vmov	s15, r3
 8007364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007368:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800736c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007370:	edd7 6a07 	vldr	s13, [r7, #28]
 8007374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800737c:	ee17 2a90 	vmov	r2, s15
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007384:	4b13      	ldr	r3, [pc, #76]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007388:	0e1b      	lsrs	r3, r3, #24
 800738a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800738e:	ee07 3a90 	vmov	s15, r3
 8007392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007396:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800739a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800739e:	edd7 6a07 	vldr	s13, [r7, #28]
 80073a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073aa:	ee17 2a90 	vmov	r2, s15
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80073b2:	e008      	b.n	80073c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	609a      	str	r2, [r3, #8]
}
 80073c6:	bf00      	nop
 80073c8:	3724      	adds	r7, #36	; 0x24
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	58024400 	.word	0x58024400
 80073d8:	03d09000 	.word	0x03d09000
 80073dc:	46000000 	.word	0x46000000
 80073e0:	4c742400 	.word	0x4c742400
 80073e4:	4a742400 	.word	0x4a742400
 80073e8:	4af42400 	.word	0x4af42400

080073ec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b089      	sub	sp, #36	; 0x24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073f4:	4ba0      	ldr	r3, [pc, #640]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f8:	f003 0303 	and.w	r3, r3, #3
 80073fc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80073fe:	4b9e      	ldr	r3, [pc, #632]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007402:	091b      	lsrs	r3, r3, #4
 8007404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007408:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800740a:	4b9b      	ldr	r3, [pc, #620]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800740c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007414:	4b98      	ldr	r3, [pc, #608]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007418:	08db      	lsrs	r3, r3, #3
 800741a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	fb02 f303 	mul.w	r3, r2, r3
 8007424:	ee07 3a90 	vmov	s15, r3
 8007428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 8111 	beq.w	800765a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	2b02      	cmp	r3, #2
 800743c:	f000 8083 	beq.w	8007546 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	2b02      	cmp	r3, #2
 8007444:	f200 80a1 	bhi.w	800758a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d056      	beq.n	8007502 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007454:	e099      	b.n	800758a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007456:	4b88      	ldr	r3, [pc, #544]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0320 	and.w	r3, r3, #32
 800745e:	2b00      	cmp	r3, #0
 8007460:	d02d      	beq.n	80074be <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007462:	4b85      	ldr	r3, [pc, #532]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	08db      	lsrs	r3, r3, #3
 8007468:	f003 0303 	and.w	r3, r3, #3
 800746c:	4a83      	ldr	r2, [pc, #524]	; (800767c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800746e:	fa22 f303 	lsr.w	r3, r2, r3
 8007472:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	ee07 3a90 	vmov	s15, r3
 800747a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	ee07 3a90 	vmov	s15, r3
 8007484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007488:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800748c:	4b7a      	ldr	r3, [pc, #488]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800748e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007494:	ee07 3a90 	vmov	s15, r3
 8007498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800749c:	ed97 6a03 	vldr	s12, [r7, #12]
 80074a0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007680 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80074a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80074bc:	e087      	b.n	80075ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	ee07 3a90 	vmov	s15, r3
 80074c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007684 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80074cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d0:	4b69      	ldr	r3, [pc, #420]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d8:	ee07 3a90 	vmov	s15, r3
 80074dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80074e4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007680 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80074e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007500:	e065      	b.n	80075ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	ee07 3a90 	vmov	s15, r3
 8007508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007688 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007510:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007514:	4b58      	ldr	r3, [pc, #352]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800751c:	ee07 3a90 	vmov	s15, r3
 8007520:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007524:	ed97 6a03 	vldr	s12, [r7, #12]
 8007528:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007680 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800752c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007530:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007534:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007538:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800753c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007540:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007544:	e043      	b.n	80075ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	ee07 3a90 	vmov	s15, r3
 800754c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007550:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800768c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007554:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007558:	4b47      	ldr	r3, [pc, #284]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800755a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007560:	ee07 3a90 	vmov	s15, r3
 8007564:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007568:	ed97 6a03 	vldr	s12, [r7, #12]
 800756c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007680 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007570:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007574:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007578:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800757c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007584:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007588:	e021      	b.n	80075ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	ee07 3a90 	vmov	s15, r3
 8007590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007594:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007684 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007598:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800759c:	4b36      	ldr	r3, [pc, #216]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800759e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a4:	ee07 3a90 	vmov	s15, r3
 80075a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80075b0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007680 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80075b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075cc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80075ce:	4b2a      	ldr	r3, [pc, #168]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d2:	0a5b      	lsrs	r3, r3, #9
 80075d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075d8:	ee07 3a90 	vmov	s15, r3
 80075dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075f4:	ee17 2a90 	vmov	r2, s15
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80075fc:	4b1e      	ldr	r3, [pc, #120]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007600:	0c1b      	lsrs	r3, r3, #16
 8007602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007606:	ee07 3a90 	vmov	s15, r3
 800760a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007612:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007616:	edd7 6a07 	vldr	s13, [r7, #28]
 800761a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800761e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007622:	ee17 2a90 	vmov	r2, s15
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800762a:	4b13      	ldr	r3, [pc, #76]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800762c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762e:	0e1b      	lsrs	r3, r3, #24
 8007630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007634:	ee07 3a90 	vmov	s15, r3
 8007638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007640:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007644:	edd7 6a07 	vldr	s13, [r7, #28]
 8007648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800764c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007650:	ee17 2a90 	vmov	r2, s15
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007658:	e008      	b.n	800766c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	609a      	str	r2, [r3, #8]
}
 800766c:	bf00      	nop
 800766e:	3724      	adds	r7, #36	; 0x24
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr
 8007678:	58024400 	.word	0x58024400
 800767c:	03d09000 	.word	0x03d09000
 8007680:	46000000 	.word	0x46000000
 8007684:	4c742400 	.word	0x4c742400
 8007688:	4a742400 	.word	0x4a742400
 800768c:	4af42400 	.word	0x4af42400

08007690 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800769e:	4b53      	ldr	r3, [pc, #332]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80076a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a2:	f003 0303 	and.w	r3, r3, #3
 80076a6:	2b03      	cmp	r3, #3
 80076a8:	d101      	bne.n	80076ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e099      	b.n	80077e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80076ae:	4b4f      	ldr	r3, [pc, #316]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a4e      	ldr	r2, [pc, #312]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80076b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80076b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076ba:	f7fa fb27 	bl	8001d0c <HAL_GetTick>
 80076be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076c0:	e008      	b.n	80076d4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80076c2:	f7fa fb23 	bl	8001d0c <HAL_GetTick>
 80076c6:	4602      	mov	r2, r0
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d901      	bls.n	80076d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e086      	b.n	80077e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076d4:	4b45      	ldr	r3, [pc, #276]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1f0      	bne.n	80076c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80076e0:	4b42      	ldr	r3, [pc, #264]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80076e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	031b      	lsls	r3, r3, #12
 80076ee:	493f      	ldr	r1, [pc, #252]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80076f0:	4313      	orrs	r3, r2
 80076f2:	628b      	str	r3, [r1, #40]	; 0x28
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	3b01      	subs	r3, #1
 80076fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	3b01      	subs	r3, #1
 8007704:	025b      	lsls	r3, r3, #9
 8007706:	b29b      	uxth	r3, r3
 8007708:	431a      	orrs	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	3b01      	subs	r3, #1
 8007710:	041b      	lsls	r3, r3, #16
 8007712:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007716:	431a      	orrs	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	3b01      	subs	r3, #1
 800771e:	061b      	lsls	r3, r3, #24
 8007720:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007724:	4931      	ldr	r1, [pc, #196]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 8007726:	4313      	orrs	r3, r2
 8007728:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800772a:	4b30      	ldr	r3, [pc, #192]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 800772c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	492d      	ldr	r1, [pc, #180]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 8007738:	4313      	orrs	r3, r2
 800773a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800773c:	4b2b      	ldr	r3, [pc, #172]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 800773e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007740:	f023 0220 	bic.w	r2, r3, #32
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	4928      	ldr	r1, [pc, #160]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 800774a:	4313      	orrs	r3, r2
 800774c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800774e:	4b27      	ldr	r3, [pc, #156]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 8007750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007752:	4a26      	ldr	r2, [pc, #152]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 8007754:	f023 0310 	bic.w	r3, r3, #16
 8007758:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800775a:	4b24      	ldr	r3, [pc, #144]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 800775c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800775e:	4b24      	ldr	r3, [pc, #144]	; (80077f0 <RCCEx_PLL2_Config+0x160>)
 8007760:	4013      	ands	r3, r2
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	69d2      	ldr	r2, [r2, #28]
 8007766:	00d2      	lsls	r2, r2, #3
 8007768:	4920      	ldr	r1, [pc, #128]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 800776a:	4313      	orrs	r3, r2
 800776c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800776e:	4b1f      	ldr	r3, [pc, #124]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 8007770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007772:	4a1e      	ldr	r2, [pc, #120]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 8007774:	f043 0310 	orr.w	r3, r3, #16
 8007778:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d106      	bne.n	800778e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007780:	4b1a      	ldr	r3, [pc, #104]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 8007782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007784:	4a19      	ldr	r2, [pc, #100]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 8007786:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800778a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800778c:	e00f      	b.n	80077ae <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d106      	bne.n	80077a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007794:	4b15      	ldr	r3, [pc, #84]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007798:	4a14      	ldr	r2, [pc, #80]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 800779a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800779e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077a0:	e005      	b.n	80077ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80077a2:	4b12      	ldr	r3, [pc, #72]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80077a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a6:	4a11      	ldr	r2, [pc, #68]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80077a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80077ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80077ae:	4b0f      	ldr	r3, [pc, #60]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a0e      	ldr	r2, [pc, #56]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80077b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077ba:	f7fa faa7 	bl	8001d0c <HAL_GetTick>
 80077be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077c0:	e008      	b.n	80077d4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80077c2:	f7fa faa3 	bl	8001d0c <HAL_GetTick>
 80077c6:	4602      	mov	r2, r0
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d901      	bls.n	80077d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e006      	b.n	80077e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077d4:	4b05      	ldr	r3, [pc, #20]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d0f0      	beq.n	80077c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	58024400 	.word	0x58024400
 80077f0:	ffff0007 	.word	0xffff0007

080077f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007802:	4b53      	ldr	r3, [pc, #332]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 8007804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007806:	f003 0303 	and.w	r3, r3, #3
 800780a:	2b03      	cmp	r3, #3
 800780c:	d101      	bne.n	8007812 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e099      	b.n	8007946 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007812:	4b4f      	ldr	r3, [pc, #316]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a4e      	ldr	r2, [pc, #312]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 8007818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800781c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800781e:	f7fa fa75 	bl	8001d0c <HAL_GetTick>
 8007822:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007824:	e008      	b.n	8007838 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007826:	f7fa fa71 	bl	8001d0c <HAL_GetTick>
 800782a:	4602      	mov	r2, r0
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	2b02      	cmp	r3, #2
 8007832:	d901      	bls.n	8007838 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e086      	b.n	8007946 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007838:	4b45      	ldr	r3, [pc, #276]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1f0      	bne.n	8007826 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007844:	4b42      	ldr	r3, [pc, #264]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 8007846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007848:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	051b      	lsls	r3, r3, #20
 8007852:	493f      	ldr	r1, [pc, #252]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 8007854:	4313      	orrs	r3, r2
 8007856:	628b      	str	r3, [r1, #40]	; 0x28
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	3b01      	subs	r3, #1
 800785e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	3b01      	subs	r3, #1
 8007868:	025b      	lsls	r3, r3, #9
 800786a:	b29b      	uxth	r3, r3
 800786c:	431a      	orrs	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	3b01      	subs	r3, #1
 8007874:	041b      	lsls	r3, r3, #16
 8007876:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800787a:	431a      	orrs	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	3b01      	subs	r3, #1
 8007882:	061b      	lsls	r3, r3, #24
 8007884:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007888:	4931      	ldr	r1, [pc, #196]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 800788a:	4313      	orrs	r3, r2
 800788c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800788e:	4b30      	ldr	r3, [pc, #192]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 8007890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007892:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	492d      	ldr	r1, [pc, #180]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 800789c:	4313      	orrs	r3, r2
 800789e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80078a0:	4b2b      	ldr	r3, [pc, #172]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	4928      	ldr	r1, [pc, #160]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80078b2:	4b27      	ldr	r3, [pc, #156]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b6:	4a26      	ldr	r2, [pc, #152]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80078be:	4b24      	ldr	r3, [pc, #144]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078c2:	4b24      	ldr	r3, [pc, #144]	; (8007954 <RCCEx_PLL3_Config+0x160>)
 80078c4:	4013      	ands	r3, r2
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	69d2      	ldr	r2, [r2, #28]
 80078ca:	00d2      	lsls	r2, r2, #3
 80078cc:	4920      	ldr	r1, [pc, #128]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80078d2:	4b1f      	ldr	r3, [pc, #124]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d6:	4a1e      	ldr	r2, [pc, #120]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d106      	bne.n	80078f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80078e4:	4b1a      	ldr	r3, [pc, #104]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e8:	4a19      	ldr	r2, [pc, #100]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80078ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078f0:	e00f      	b.n	8007912 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d106      	bne.n	8007906 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80078f8:	4b15      	ldr	r3, [pc, #84]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fc:	4a14      	ldr	r2, [pc, #80]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007902:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007904:	e005      	b.n	8007912 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007906:	4b12      	ldr	r3, [pc, #72]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 8007908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790a:	4a11      	ldr	r2, [pc, #68]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 800790c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007910:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007912:	4b0f      	ldr	r3, [pc, #60]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a0e      	ldr	r2, [pc, #56]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 8007918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800791c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800791e:	f7fa f9f5 	bl	8001d0c <HAL_GetTick>
 8007922:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007924:	e008      	b.n	8007938 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007926:	f7fa f9f1 	bl	8001d0c <HAL_GetTick>
 800792a:	4602      	mov	r2, r0
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	2b02      	cmp	r3, #2
 8007932:	d901      	bls.n	8007938 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e006      	b.n	8007946 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007938:	4b05      	ldr	r3, [pc, #20]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007940:	2b00      	cmp	r3, #0
 8007942:	d0f0      	beq.n	8007926 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007944:	7bfb      	ldrb	r3, [r7, #15]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	58024400 	.word	0x58024400
 8007954:	ffff0007 	.word	0xffff0007

08007958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d101      	bne.n	800796a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e049      	b.n	80079fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b00      	cmp	r3, #0
 8007974:	d106      	bne.n	8007984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7fa f832 	bl	80019e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2202      	movs	r2, #2
 8007988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	3304      	adds	r3, #4
 8007994:	4619      	mov	r1, r3
 8007996:	4610      	mov	r0, r2
 8007998:	f000 fa32 	bl	8007e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
	...

08007a08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d001      	beq.n	8007a20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e05e      	b.n	8007ade <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2202      	movs	r2, #2
 8007a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68da      	ldr	r2, [r3, #12]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f042 0201 	orr.w	r2, r2, #1
 8007a36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a2b      	ldr	r2, [pc, #172]	; (8007aec <HAL_TIM_Base_Start_IT+0xe4>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d02c      	beq.n	8007a9c <HAL_TIM_Base_Start_IT+0x94>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a4a:	d027      	beq.n	8007a9c <HAL_TIM_Base_Start_IT+0x94>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a27      	ldr	r2, [pc, #156]	; (8007af0 <HAL_TIM_Base_Start_IT+0xe8>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d022      	beq.n	8007a9c <HAL_TIM_Base_Start_IT+0x94>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a26      	ldr	r2, [pc, #152]	; (8007af4 <HAL_TIM_Base_Start_IT+0xec>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d01d      	beq.n	8007a9c <HAL_TIM_Base_Start_IT+0x94>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a24      	ldr	r2, [pc, #144]	; (8007af8 <HAL_TIM_Base_Start_IT+0xf0>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d018      	beq.n	8007a9c <HAL_TIM_Base_Start_IT+0x94>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a23      	ldr	r2, [pc, #140]	; (8007afc <HAL_TIM_Base_Start_IT+0xf4>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d013      	beq.n	8007a9c <HAL_TIM_Base_Start_IT+0x94>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a21      	ldr	r2, [pc, #132]	; (8007b00 <HAL_TIM_Base_Start_IT+0xf8>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d00e      	beq.n	8007a9c <HAL_TIM_Base_Start_IT+0x94>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a20      	ldr	r2, [pc, #128]	; (8007b04 <HAL_TIM_Base_Start_IT+0xfc>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d009      	beq.n	8007a9c <HAL_TIM_Base_Start_IT+0x94>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a1e      	ldr	r2, [pc, #120]	; (8007b08 <HAL_TIM_Base_Start_IT+0x100>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d004      	beq.n	8007a9c <HAL_TIM_Base_Start_IT+0x94>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a1d      	ldr	r2, [pc, #116]	; (8007b0c <HAL_TIM_Base_Start_IT+0x104>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d115      	bne.n	8007ac8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	689a      	ldr	r2, [r3, #8]
 8007aa2:	4b1b      	ldr	r3, [pc, #108]	; (8007b10 <HAL_TIM_Base_Start_IT+0x108>)
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2b06      	cmp	r3, #6
 8007aac:	d015      	beq.n	8007ada <HAL_TIM_Base_Start_IT+0xd2>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ab4:	d011      	beq.n	8007ada <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f042 0201 	orr.w	r2, r2, #1
 8007ac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ac6:	e008      	b.n	8007ada <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f042 0201 	orr.w	r2, r2, #1
 8007ad6:	601a      	str	r2, [r3, #0]
 8007ad8:	e000      	b.n	8007adc <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ada:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	40010000 	.word	0x40010000
 8007af0:	40000400 	.word	0x40000400
 8007af4:	40000800 	.word	0x40000800
 8007af8:	40000c00 	.word	0x40000c00
 8007afc:	40010400 	.word	0x40010400
 8007b00:	40001800 	.word	0x40001800
 8007b04:	40014000 	.word	0x40014000
 8007b08:	4000e000 	.word	0x4000e000
 8007b0c:	4000e400 	.word	0x4000e400
 8007b10:	00010007 	.word	0x00010007

08007b14 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68da      	ldr	r2, [r3, #12]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f022 0201 	bic.w	r2, r2, #1
 8007b2a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6a1a      	ldr	r2, [r3, #32]
 8007b32:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b36:	4013      	ands	r3, r2
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10f      	bne.n	8007b5c <HAL_TIM_Base_Stop_IT+0x48>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6a1a      	ldr	r2, [r3, #32]
 8007b42:	f240 4344 	movw	r3, #1092	; 0x444
 8007b46:	4013      	ands	r3, r2
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d107      	bne.n	8007b5c <HAL_TIM_Base_Stop_IT+0x48>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f022 0201 	bic.w	r2, r2, #1
 8007b5a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr

08007b72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b082      	sub	sp, #8
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	f003 0302 	and.w	r3, r3, #2
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d122      	bne.n	8007bce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d11b      	bne.n	8007bce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f06f 0202 	mvn.w	r2, #2
 8007b9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	f003 0303 	and.w	r3, r3, #3
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d003      	beq.n	8007bbc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f905 	bl	8007dc4 <HAL_TIM_IC_CaptureCallback>
 8007bba:	e005      	b.n	8007bc8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f8f7 	bl	8007db0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f908 	bl	8007dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	f003 0304 	and.w	r3, r3, #4
 8007bd8:	2b04      	cmp	r3, #4
 8007bda:	d122      	bne.n	8007c22 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	f003 0304 	and.w	r3, r3, #4
 8007be6:	2b04      	cmp	r3, #4
 8007be8:	d11b      	bne.n	8007c22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f06f 0204 	mvn.w	r2, #4
 8007bf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d003      	beq.n	8007c10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f8db 	bl	8007dc4 <HAL_TIM_IC_CaptureCallback>
 8007c0e:	e005      	b.n	8007c1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f8cd 	bl	8007db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f8de 	bl	8007dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	f003 0308 	and.w	r3, r3, #8
 8007c2c:	2b08      	cmp	r3, #8
 8007c2e:	d122      	bne.n	8007c76 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	f003 0308 	and.w	r3, r3, #8
 8007c3a:	2b08      	cmp	r3, #8
 8007c3c:	d11b      	bne.n	8007c76 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f06f 0208 	mvn.w	r2, #8
 8007c46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2204      	movs	r2, #4
 8007c4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	69db      	ldr	r3, [r3, #28]
 8007c54:	f003 0303 	and.w	r3, r3, #3
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d003      	beq.n	8007c64 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f8b1 	bl	8007dc4 <HAL_TIM_IC_CaptureCallback>
 8007c62:	e005      	b.n	8007c70 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f8a3 	bl	8007db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f8b4 	bl	8007dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	f003 0310 	and.w	r3, r3, #16
 8007c80:	2b10      	cmp	r3, #16
 8007c82:	d122      	bne.n	8007cca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	f003 0310 	and.w	r3, r3, #16
 8007c8e:	2b10      	cmp	r3, #16
 8007c90:	d11b      	bne.n	8007cca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f06f 0210 	mvn.w	r2, #16
 8007c9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2208      	movs	r2, #8
 8007ca0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	69db      	ldr	r3, [r3, #28]
 8007ca8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d003      	beq.n	8007cb8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f887 	bl	8007dc4 <HAL_TIM_IC_CaptureCallback>
 8007cb6:	e005      	b.n	8007cc4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f879 	bl	8007db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f88a 	bl	8007dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d10e      	bne.n	8007cf6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d107      	bne.n	8007cf6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f06f 0201 	mvn.w	r2, #1
 8007cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f7f9 fa1b 	bl	800112c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d00:	2b80      	cmp	r3, #128	; 0x80
 8007d02:	d10e      	bne.n	8007d22 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d0e:	2b80      	cmp	r3, #128	; 0x80
 8007d10:	d107      	bne.n	8007d22 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f9bb 	bl	8008098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d30:	d10e      	bne.n	8007d50 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d3c:	2b80      	cmp	r3, #128	; 0x80
 8007d3e:	d107      	bne.n	8007d50 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f9ae 	bl	80080ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d5a:	2b40      	cmp	r3, #64	; 0x40
 8007d5c:	d10e      	bne.n	8007d7c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d68:	2b40      	cmp	r3, #64	; 0x40
 8007d6a:	d107      	bne.n	8007d7c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f838 	bl	8007dec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	f003 0320 	and.w	r3, r3, #32
 8007d86:	2b20      	cmp	r3, #32
 8007d88:	d10e      	bne.n	8007da8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	f003 0320 	and.w	r3, r3, #32
 8007d94:	2b20      	cmp	r3, #32
 8007d96:	d107      	bne.n	8007da8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f06f 0220 	mvn.w	r2, #32
 8007da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f96e 	bl	8008084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007da8:	bf00      	nop
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a44      	ldr	r2, [pc, #272]	; (8007f24 <TIM_Base_SetConfig+0x124>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d013      	beq.n	8007e40 <TIM_Base_SetConfig+0x40>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e1e:	d00f      	beq.n	8007e40 <TIM_Base_SetConfig+0x40>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a41      	ldr	r2, [pc, #260]	; (8007f28 <TIM_Base_SetConfig+0x128>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d00b      	beq.n	8007e40 <TIM_Base_SetConfig+0x40>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a40      	ldr	r2, [pc, #256]	; (8007f2c <TIM_Base_SetConfig+0x12c>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d007      	beq.n	8007e40 <TIM_Base_SetConfig+0x40>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a3f      	ldr	r2, [pc, #252]	; (8007f30 <TIM_Base_SetConfig+0x130>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d003      	beq.n	8007e40 <TIM_Base_SetConfig+0x40>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a3e      	ldr	r2, [pc, #248]	; (8007f34 <TIM_Base_SetConfig+0x134>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d108      	bne.n	8007e52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a33      	ldr	r2, [pc, #204]	; (8007f24 <TIM_Base_SetConfig+0x124>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d027      	beq.n	8007eaa <TIM_Base_SetConfig+0xaa>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e60:	d023      	beq.n	8007eaa <TIM_Base_SetConfig+0xaa>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a30      	ldr	r2, [pc, #192]	; (8007f28 <TIM_Base_SetConfig+0x128>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d01f      	beq.n	8007eaa <TIM_Base_SetConfig+0xaa>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a2f      	ldr	r2, [pc, #188]	; (8007f2c <TIM_Base_SetConfig+0x12c>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d01b      	beq.n	8007eaa <TIM_Base_SetConfig+0xaa>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a2e      	ldr	r2, [pc, #184]	; (8007f30 <TIM_Base_SetConfig+0x130>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d017      	beq.n	8007eaa <TIM_Base_SetConfig+0xaa>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a2d      	ldr	r2, [pc, #180]	; (8007f34 <TIM_Base_SetConfig+0x134>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d013      	beq.n	8007eaa <TIM_Base_SetConfig+0xaa>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a2c      	ldr	r2, [pc, #176]	; (8007f38 <TIM_Base_SetConfig+0x138>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d00f      	beq.n	8007eaa <TIM_Base_SetConfig+0xaa>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a2b      	ldr	r2, [pc, #172]	; (8007f3c <TIM_Base_SetConfig+0x13c>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d00b      	beq.n	8007eaa <TIM_Base_SetConfig+0xaa>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a2a      	ldr	r2, [pc, #168]	; (8007f40 <TIM_Base_SetConfig+0x140>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d007      	beq.n	8007eaa <TIM_Base_SetConfig+0xaa>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a29      	ldr	r2, [pc, #164]	; (8007f44 <TIM_Base_SetConfig+0x144>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d003      	beq.n	8007eaa <TIM_Base_SetConfig+0xaa>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a28      	ldr	r2, [pc, #160]	; (8007f48 <TIM_Base_SetConfig+0x148>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d108      	bne.n	8007ebc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	689a      	ldr	r2, [r3, #8]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a10      	ldr	r2, [pc, #64]	; (8007f24 <TIM_Base_SetConfig+0x124>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d00f      	beq.n	8007f08 <TIM_Base_SetConfig+0x108>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a12      	ldr	r2, [pc, #72]	; (8007f34 <TIM_Base_SetConfig+0x134>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d00b      	beq.n	8007f08 <TIM_Base_SetConfig+0x108>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a11      	ldr	r2, [pc, #68]	; (8007f38 <TIM_Base_SetConfig+0x138>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d007      	beq.n	8007f08 <TIM_Base_SetConfig+0x108>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a10      	ldr	r2, [pc, #64]	; (8007f3c <TIM_Base_SetConfig+0x13c>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d003      	beq.n	8007f08 <TIM_Base_SetConfig+0x108>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a0f      	ldr	r2, [pc, #60]	; (8007f40 <TIM_Base_SetConfig+0x140>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d103      	bne.n	8007f10 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	691a      	ldr	r2, [r3, #16]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	615a      	str	r2, [r3, #20]
}
 8007f16:	bf00      	nop
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	40010000 	.word	0x40010000
 8007f28:	40000400 	.word	0x40000400
 8007f2c:	40000800 	.word	0x40000800
 8007f30:	40000c00 	.word	0x40000c00
 8007f34:	40010400 	.word	0x40010400
 8007f38:	40014000 	.word	0x40014000
 8007f3c:	40014400 	.word	0x40014400
 8007f40:	40014800 	.word	0x40014800
 8007f44:	4000e000 	.word	0x4000e000
 8007f48:	4000e400 	.word	0x4000e400

08007f4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d101      	bne.n	8007f64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f60:	2302      	movs	r3, #2
 8007f62:	e077      	b.n	8008054 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2202      	movs	r2, #2
 8007f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a35      	ldr	r2, [pc, #212]	; (8008060 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d004      	beq.n	8007f98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a34      	ldr	r2, [pc, #208]	; (8008064 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d108      	bne.n	8007faa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a25      	ldr	r2, [pc, #148]	; (8008060 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d02c      	beq.n	8008028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fd6:	d027      	beq.n	8008028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a22      	ldr	r2, [pc, #136]	; (8008068 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d022      	beq.n	8008028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a21      	ldr	r2, [pc, #132]	; (800806c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d01d      	beq.n	8008028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a1f      	ldr	r2, [pc, #124]	; (8008070 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d018      	beq.n	8008028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a1a      	ldr	r2, [pc, #104]	; (8008064 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d013      	beq.n	8008028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a1b      	ldr	r2, [pc, #108]	; (8008074 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d00e      	beq.n	8008028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a1a      	ldr	r2, [pc, #104]	; (8008078 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d009      	beq.n	8008028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a18      	ldr	r2, [pc, #96]	; (800807c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d004      	beq.n	8008028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a17      	ldr	r2, [pc, #92]	; (8008080 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d10c      	bne.n	8008042 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800802e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	4313      	orrs	r3, r2
 8008038:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3714      	adds	r7, #20
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr
 8008060:	40010000 	.word	0x40010000
 8008064:	40010400 	.word	0x40010400
 8008068:	40000400 	.word	0x40000400
 800806c:	40000800 	.word	0x40000800
 8008070:	40000c00 	.word	0x40000c00
 8008074:	40001800 	.word	0x40001800
 8008078:	40014000 	.word	0x40014000
 800807c:	4000e000 	.word	0x4000e000
 8008080:	4000e400 	.word	0x4000e400

08008084 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d101      	bne.n	80080d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e042      	b.n	8008158 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d106      	bne.n	80080ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f7f9 fcf3 	bl	8001ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2224      	movs	r2, #36	; 0x24
 80080ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f022 0201 	bic.w	r2, r2, #1
 8008100:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f8c2 	bl	800828c <UART_SetConfig>
 8008108:	4603      	mov	r3, r0
 800810a:	2b01      	cmp	r3, #1
 800810c:	d101      	bne.n	8008112 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e022      	b.n	8008158 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008116:	2b00      	cmp	r3, #0
 8008118:	d002      	beq.n	8008120 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 ff22 	bl	8008f64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	685a      	ldr	r2, [r3, #4]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800812e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	689a      	ldr	r2, [r3, #8]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800813e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f042 0201 	orr.w	r2, r2, #1
 800814e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 ffa9 	bl	80090a8 <UART_CheckIdleState>
 8008156:	4603      	mov	r3, r0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b08a      	sub	sp, #40	; 0x28
 8008164:	af02      	add	r7, sp, #8
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	603b      	str	r3, [r7, #0]
 800816c:	4613      	mov	r3, r2
 800816e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008176:	2b20      	cmp	r3, #32
 8008178:	f040 8083 	bne.w	8008282 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d002      	beq.n	8008188 <HAL_UART_Transmit+0x28>
 8008182:	88fb      	ldrh	r3, [r7, #6]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d101      	bne.n	800818c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e07b      	b.n	8008284 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008192:	2b01      	cmp	r3, #1
 8008194:	d101      	bne.n	800819a <HAL_UART_Transmit+0x3a>
 8008196:	2302      	movs	r3, #2
 8008198:	e074      	b.n	8008284 <HAL_UART_Transmit+0x124>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2221      	movs	r2, #33	; 0x21
 80081ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80081b2:	f7f9 fdab 	bl	8001d0c <HAL_GetTick>
 80081b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	88fa      	ldrh	r2, [r7, #6]
 80081bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	88fa      	ldrh	r2, [r7, #6]
 80081c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081d0:	d108      	bne.n	80081e4 <HAL_UART_Transmit+0x84>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d104      	bne.n	80081e4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80081da:	2300      	movs	r3, #0
 80081dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	61bb      	str	r3, [r7, #24]
 80081e2:	e003      	b.n	80081ec <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081e8:	2300      	movs	r3, #0
 80081ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80081f4:	e02c      	b.n	8008250 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	2200      	movs	r2, #0
 80081fe:	2180      	movs	r1, #128	; 0x80
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f000 ff9c 	bl	800913e <UART_WaitOnFlagUntilTimeout>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d001      	beq.n	8008210 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800820c:	2303      	movs	r3, #3
 800820e:	e039      	b.n	8008284 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d10b      	bne.n	800822e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	881b      	ldrh	r3, [r3, #0]
 800821a:	461a      	mov	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008224:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	3302      	adds	r3, #2
 800822a:	61bb      	str	r3, [r7, #24]
 800822c:	e007      	b.n	800823e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	781a      	ldrb	r2, [r3, #0]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	3301      	adds	r3, #1
 800823c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008244:	b29b      	uxth	r3, r3
 8008246:	3b01      	subs	r3, #1
 8008248:	b29a      	uxth	r2, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008256:	b29b      	uxth	r3, r3
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1cc      	bne.n	80081f6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	2200      	movs	r2, #0
 8008264:	2140      	movs	r1, #64	; 0x40
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f000 ff69 	bl	800913e <UART_WaitOnFlagUntilTimeout>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d001      	beq.n	8008276 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008272:	2303      	movs	r3, #3
 8008274:	e006      	b.n	8008284 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2220      	movs	r2, #32
 800827a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800827e:	2300      	movs	r3, #0
 8008280:	e000      	b.n	8008284 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008282:	2302      	movs	r3, #2
  }
}
 8008284:	4618      	mov	r0, r3
 8008286:	3720      	adds	r7, #32
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800828c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008290:	b092      	sub	sp, #72	; 0x48
 8008292:	af00      	add	r7, sp, #0
 8008294:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	689a      	ldr	r2, [r3, #8]
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	431a      	orrs	r2, r3
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	695b      	ldr	r3, [r3, #20]
 80082aa:	431a      	orrs	r2, r3
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	69db      	ldr	r3, [r3, #28]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	4bbe      	ldr	r3, [pc, #760]	; (80085b4 <UART_SetConfig+0x328>)
 80082bc:	4013      	ands	r3, r2
 80082be:	697a      	ldr	r2, [r7, #20]
 80082c0:	6812      	ldr	r2, [r2, #0]
 80082c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082c4:	430b      	orrs	r3, r1
 80082c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	68da      	ldr	r2, [r3, #12]
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	430a      	orrs	r2, r1
 80082dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4ab3      	ldr	r2, [pc, #716]	; (80085b8 <UART_SetConfig+0x32c>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d004      	beq.n	80082f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	6a1b      	ldr	r3, [r3, #32]
 80082f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082f4:	4313      	orrs	r3, r2
 80082f6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	689a      	ldr	r2, [r3, #8]
 80082fe:	4baf      	ldr	r3, [pc, #700]	; (80085bc <UART_SetConfig+0x330>)
 8008300:	4013      	ands	r3, r2
 8008302:	697a      	ldr	r2, [r7, #20]
 8008304:	6812      	ldr	r2, [r2, #0]
 8008306:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008308:	430b      	orrs	r3, r1
 800830a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008312:	f023 010f 	bic.w	r1, r3, #15
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	430a      	orrs	r2, r1
 8008320:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4aa6      	ldr	r2, [pc, #664]	; (80085c0 <UART_SetConfig+0x334>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d177      	bne.n	800841c <UART_SetConfig+0x190>
 800832c:	4ba5      	ldr	r3, [pc, #660]	; (80085c4 <UART_SetConfig+0x338>)
 800832e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008330:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008334:	2b28      	cmp	r3, #40	; 0x28
 8008336:	d86d      	bhi.n	8008414 <UART_SetConfig+0x188>
 8008338:	a201      	add	r2, pc, #4	; (adr r2, 8008340 <UART_SetConfig+0xb4>)
 800833a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833e:	bf00      	nop
 8008340:	080083e5 	.word	0x080083e5
 8008344:	08008415 	.word	0x08008415
 8008348:	08008415 	.word	0x08008415
 800834c:	08008415 	.word	0x08008415
 8008350:	08008415 	.word	0x08008415
 8008354:	08008415 	.word	0x08008415
 8008358:	08008415 	.word	0x08008415
 800835c:	08008415 	.word	0x08008415
 8008360:	080083ed 	.word	0x080083ed
 8008364:	08008415 	.word	0x08008415
 8008368:	08008415 	.word	0x08008415
 800836c:	08008415 	.word	0x08008415
 8008370:	08008415 	.word	0x08008415
 8008374:	08008415 	.word	0x08008415
 8008378:	08008415 	.word	0x08008415
 800837c:	08008415 	.word	0x08008415
 8008380:	080083f5 	.word	0x080083f5
 8008384:	08008415 	.word	0x08008415
 8008388:	08008415 	.word	0x08008415
 800838c:	08008415 	.word	0x08008415
 8008390:	08008415 	.word	0x08008415
 8008394:	08008415 	.word	0x08008415
 8008398:	08008415 	.word	0x08008415
 800839c:	08008415 	.word	0x08008415
 80083a0:	080083fd 	.word	0x080083fd
 80083a4:	08008415 	.word	0x08008415
 80083a8:	08008415 	.word	0x08008415
 80083ac:	08008415 	.word	0x08008415
 80083b0:	08008415 	.word	0x08008415
 80083b4:	08008415 	.word	0x08008415
 80083b8:	08008415 	.word	0x08008415
 80083bc:	08008415 	.word	0x08008415
 80083c0:	08008405 	.word	0x08008405
 80083c4:	08008415 	.word	0x08008415
 80083c8:	08008415 	.word	0x08008415
 80083cc:	08008415 	.word	0x08008415
 80083d0:	08008415 	.word	0x08008415
 80083d4:	08008415 	.word	0x08008415
 80083d8:	08008415 	.word	0x08008415
 80083dc:	08008415 	.word	0x08008415
 80083e0:	0800840d 	.word	0x0800840d
 80083e4:	2301      	movs	r3, #1
 80083e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ea:	e326      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80083ec:	2304      	movs	r3, #4
 80083ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083f2:	e322      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80083f4:	2308      	movs	r3, #8
 80083f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083fa:	e31e      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80083fc:	2310      	movs	r3, #16
 80083fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008402:	e31a      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008404:	2320      	movs	r3, #32
 8008406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800840a:	e316      	b.n	8008a3a <UART_SetConfig+0x7ae>
 800840c:	2340      	movs	r3, #64	; 0x40
 800840e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008412:	e312      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008414:	2380      	movs	r3, #128	; 0x80
 8008416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800841a:	e30e      	b.n	8008a3a <UART_SetConfig+0x7ae>
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a69      	ldr	r2, [pc, #420]	; (80085c8 <UART_SetConfig+0x33c>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d130      	bne.n	8008488 <UART_SetConfig+0x1fc>
 8008426:	4b67      	ldr	r3, [pc, #412]	; (80085c4 <UART_SetConfig+0x338>)
 8008428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800842a:	f003 0307 	and.w	r3, r3, #7
 800842e:	2b05      	cmp	r3, #5
 8008430:	d826      	bhi.n	8008480 <UART_SetConfig+0x1f4>
 8008432:	a201      	add	r2, pc, #4	; (adr r2, 8008438 <UART_SetConfig+0x1ac>)
 8008434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008438:	08008451 	.word	0x08008451
 800843c:	08008459 	.word	0x08008459
 8008440:	08008461 	.word	0x08008461
 8008444:	08008469 	.word	0x08008469
 8008448:	08008471 	.word	0x08008471
 800844c:	08008479 	.word	0x08008479
 8008450:	2300      	movs	r3, #0
 8008452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008456:	e2f0      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008458:	2304      	movs	r3, #4
 800845a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800845e:	e2ec      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008460:	2308      	movs	r3, #8
 8008462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008466:	e2e8      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008468:	2310      	movs	r3, #16
 800846a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800846e:	e2e4      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008470:	2320      	movs	r3, #32
 8008472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008476:	e2e0      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008478:	2340      	movs	r3, #64	; 0x40
 800847a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800847e:	e2dc      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008480:	2380      	movs	r3, #128	; 0x80
 8008482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008486:	e2d8      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a4f      	ldr	r2, [pc, #316]	; (80085cc <UART_SetConfig+0x340>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d130      	bne.n	80084f4 <UART_SetConfig+0x268>
 8008492:	4b4c      	ldr	r3, [pc, #304]	; (80085c4 <UART_SetConfig+0x338>)
 8008494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008496:	f003 0307 	and.w	r3, r3, #7
 800849a:	2b05      	cmp	r3, #5
 800849c:	d826      	bhi.n	80084ec <UART_SetConfig+0x260>
 800849e:	a201      	add	r2, pc, #4	; (adr r2, 80084a4 <UART_SetConfig+0x218>)
 80084a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a4:	080084bd 	.word	0x080084bd
 80084a8:	080084c5 	.word	0x080084c5
 80084ac:	080084cd 	.word	0x080084cd
 80084b0:	080084d5 	.word	0x080084d5
 80084b4:	080084dd 	.word	0x080084dd
 80084b8:	080084e5 	.word	0x080084e5
 80084bc:	2300      	movs	r3, #0
 80084be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084c2:	e2ba      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80084c4:	2304      	movs	r3, #4
 80084c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ca:	e2b6      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80084cc:	2308      	movs	r3, #8
 80084ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084d2:	e2b2      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80084d4:	2310      	movs	r3, #16
 80084d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084da:	e2ae      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80084dc:	2320      	movs	r3, #32
 80084de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084e2:	e2aa      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80084e4:	2340      	movs	r3, #64	; 0x40
 80084e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ea:	e2a6      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80084ec:	2380      	movs	r3, #128	; 0x80
 80084ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084f2:	e2a2      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a35      	ldr	r2, [pc, #212]	; (80085d0 <UART_SetConfig+0x344>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d130      	bne.n	8008560 <UART_SetConfig+0x2d4>
 80084fe:	4b31      	ldr	r3, [pc, #196]	; (80085c4 <UART_SetConfig+0x338>)
 8008500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008502:	f003 0307 	and.w	r3, r3, #7
 8008506:	2b05      	cmp	r3, #5
 8008508:	d826      	bhi.n	8008558 <UART_SetConfig+0x2cc>
 800850a:	a201      	add	r2, pc, #4	; (adr r2, 8008510 <UART_SetConfig+0x284>)
 800850c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008510:	08008529 	.word	0x08008529
 8008514:	08008531 	.word	0x08008531
 8008518:	08008539 	.word	0x08008539
 800851c:	08008541 	.word	0x08008541
 8008520:	08008549 	.word	0x08008549
 8008524:	08008551 	.word	0x08008551
 8008528:	2300      	movs	r3, #0
 800852a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800852e:	e284      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008530:	2304      	movs	r3, #4
 8008532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008536:	e280      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008538:	2308      	movs	r3, #8
 800853a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800853e:	e27c      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008540:	2310      	movs	r3, #16
 8008542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008546:	e278      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008548:	2320      	movs	r3, #32
 800854a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800854e:	e274      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008550:	2340      	movs	r3, #64	; 0x40
 8008552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008556:	e270      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008558:	2380      	movs	r3, #128	; 0x80
 800855a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800855e:	e26c      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a1b      	ldr	r2, [pc, #108]	; (80085d4 <UART_SetConfig+0x348>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d142      	bne.n	80085f0 <UART_SetConfig+0x364>
 800856a:	4b16      	ldr	r3, [pc, #88]	; (80085c4 <UART_SetConfig+0x338>)
 800856c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800856e:	f003 0307 	and.w	r3, r3, #7
 8008572:	2b05      	cmp	r3, #5
 8008574:	d838      	bhi.n	80085e8 <UART_SetConfig+0x35c>
 8008576:	a201      	add	r2, pc, #4	; (adr r2, 800857c <UART_SetConfig+0x2f0>)
 8008578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800857c:	08008595 	.word	0x08008595
 8008580:	0800859d 	.word	0x0800859d
 8008584:	080085a5 	.word	0x080085a5
 8008588:	080085ad 	.word	0x080085ad
 800858c:	080085d9 	.word	0x080085d9
 8008590:	080085e1 	.word	0x080085e1
 8008594:	2300      	movs	r3, #0
 8008596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800859a:	e24e      	b.n	8008a3a <UART_SetConfig+0x7ae>
 800859c:	2304      	movs	r3, #4
 800859e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085a2:	e24a      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80085a4:	2308      	movs	r3, #8
 80085a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085aa:	e246      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80085ac:	2310      	movs	r3, #16
 80085ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085b2:	e242      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80085b4:	cfff69f3 	.word	0xcfff69f3
 80085b8:	58000c00 	.word	0x58000c00
 80085bc:	11fff4ff 	.word	0x11fff4ff
 80085c0:	40011000 	.word	0x40011000
 80085c4:	58024400 	.word	0x58024400
 80085c8:	40004400 	.word	0x40004400
 80085cc:	40004800 	.word	0x40004800
 80085d0:	40004c00 	.word	0x40004c00
 80085d4:	40005000 	.word	0x40005000
 80085d8:	2320      	movs	r3, #32
 80085da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085de:	e22c      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80085e0:	2340      	movs	r3, #64	; 0x40
 80085e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085e6:	e228      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80085e8:	2380      	movs	r3, #128	; 0x80
 80085ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ee:	e224      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4ab1      	ldr	r2, [pc, #708]	; (80088bc <UART_SetConfig+0x630>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d176      	bne.n	80086e8 <UART_SetConfig+0x45c>
 80085fa:	4bb1      	ldr	r3, [pc, #708]	; (80088c0 <UART_SetConfig+0x634>)
 80085fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008602:	2b28      	cmp	r3, #40	; 0x28
 8008604:	d86c      	bhi.n	80086e0 <UART_SetConfig+0x454>
 8008606:	a201      	add	r2, pc, #4	; (adr r2, 800860c <UART_SetConfig+0x380>)
 8008608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860c:	080086b1 	.word	0x080086b1
 8008610:	080086e1 	.word	0x080086e1
 8008614:	080086e1 	.word	0x080086e1
 8008618:	080086e1 	.word	0x080086e1
 800861c:	080086e1 	.word	0x080086e1
 8008620:	080086e1 	.word	0x080086e1
 8008624:	080086e1 	.word	0x080086e1
 8008628:	080086e1 	.word	0x080086e1
 800862c:	080086b9 	.word	0x080086b9
 8008630:	080086e1 	.word	0x080086e1
 8008634:	080086e1 	.word	0x080086e1
 8008638:	080086e1 	.word	0x080086e1
 800863c:	080086e1 	.word	0x080086e1
 8008640:	080086e1 	.word	0x080086e1
 8008644:	080086e1 	.word	0x080086e1
 8008648:	080086e1 	.word	0x080086e1
 800864c:	080086c1 	.word	0x080086c1
 8008650:	080086e1 	.word	0x080086e1
 8008654:	080086e1 	.word	0x080086e1
 8008658:	080086e1 	.word	0x080086e1
 800865c:	080086e1 	.word	0x080086e1
 8008660:	080086e1 	.word	0x080086e1
 8008664:	080086e1 	.word	0x080086e1
 8008668:	080086e1 	.word	0x080086e1
 800866c:	080086c9 	.word	0x080086c9
 8008670:	080086e1 	.word	0x080086e1
 8008674:	080086e1 	.word	0x080086e1
 8008678:	080086e1 	.word	0x080086e1
 800867c:	080086e1 	.word	0x080086e1
 8008680:	080086e1 	.word	0x080086e1
 8008684:	080086e1 	.word	0x080086e1
 8008688:	080086e1 	.word	0x080086e1
 800868c:	080086d1 	.word	0x080086d1
 8008690:	080086e1 	.word	0x080086e1
 8008694:	080086e1 	.word	0x080086e1
 8008698:	080086e1 	.word	0x080086e1
 800869c:	080086e1 	.word	0x080086e1
 80086a0:	080086e1 	.word	0x080086e1
 80086a4:	080086e1 	.word	0x080086e1
 80086a8:	080086e1 	.word	0x080086e1
 80086ac:	080086d9 	.word	0x080086d9
 80086b0:	2301      	movs	r3, #1
 80086b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086b6:	e1c0      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80086b8:	2304      	movs	r3, #4
 80086ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086be:	e1bc      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80086c0:	2308      	movs	r3, #8
 80086c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086c6:	e1b8      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80086c8:	2310      	movs	r3, #16
 80086ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ce:	e1b4      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80086d0:	2320      	movs	r3, #32
 80086d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086d6:	e1b0      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80086d8:	2340      	movs	r3, #64	; 0x40
 80086da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086de:	e1ac      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80086e0:	2380      	movs	r3, #128	; 0x80
 80086e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086e6:	e1a8      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a75      	ldr	r2, [pc, #468]	; (80088c4 <UART_SetConfig+0x638>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d130      	bne.n	8008754 <UART_SetConfig+0x4c8>
 80086f2:	4b73      	ldr	r3, [pc, #460]	; (80088c0 <UART_SetConfig+0x634>)
 80086f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086f6:	f003 0307 	and.w	r3, r3, #7
 80086fa:	2b05      	cmp	r3, #5
 80086fc:	d826      	bhi.n	800874c <UART_SetConfig+0x4c0>
 80086fe:	a201      	add	r2, pc, #4	; (adr r2, 8008704 <UART_SetConfig+0x478>)
 8008700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008704:	0800871d 	.word	0x0800871d
 8008708:	08008725 	.word	0x08008725
 800870c:	0800872d 	.word	0x0800872d
 8008710:	08008735 	.word	0x08008735
 8008714:	0800873d 	.word	0x0800873d
 8008718:	08008745 	.word	0x08008745
 800871c:	2300      	movs	r3, #0
 800871e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008722:	e18a      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008724:	2304      	movs	r3, #4
 8008726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800872a:	e186      	b.n	8008a3a <UART_SetConfig+0x7ae>
 800872c:	2308      	movs	r3, #8
 800872e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008732:	e182      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008734:	2310      	movs	r3, #16
 8008736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800873a:	e17e      	b.n	8008a3a <UART_SetConfig+0x7ae>
 800873c:	2320      	movs	r3, #32
 800873e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008742:	e17a      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008744:	2340      	movs	r3, #64	; 0x40
 8008746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800874a:	e176      	b.n	8008a3a <UART_SetConfig+0x7ae>
 800874c:	2380      	movs	r3, #128	; 0x80
 800874e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008752:	e172      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a5b      	ldr	r2, [pc, #364]	; (80088c8 <UART_SetConfig+0x63c>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d130      	bne.n	80087c0 <UART_SetConfig+0x534>
 800875e:	4b58      	ldr	r3, [pc, #352]	; (80088c0 <UART_SetConfig+0x634>)
 8008760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008762:	f003 0307 	and.w	r3, r3, #7
 8008766:	2b05      	cmp	r3, #5
 8008768:	d826      	bhi.n	80087b8 <UART_SetConfig+0x52c>
 800876a:	a201      	add	r2, pc, #4	; (adr r2, 8008770 <UART_SetConfig+0x4e4>)
 800876c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008770:	08008789 	.word	0x08008789
 8008774:	08008791 	.word	0x08008791
 8008778:	08008799 	.word	0x08008799
 800877c:	080087a1 	.word	0x080087a1
 8008780:	080087a9 	.word	0x080087a9
 8008784:	080087b1 	.word	0x080087b1
 8008788:	2300      	movs	r3, #0
 800878a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800878e:	e154      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008790:	2304      	movs	r3, #4
 8008792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008796:	e150      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008798:	2308      	movs	r3, #8
 800879a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800879e:	e14c      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80087a0:	2310      	movs	r3, #16
 80087a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087a6:	e148      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80087a8:	2320      	movs	r3, #32
 80087aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ae:	e144      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80087b0:	2340      	movs	r3, #64	; 0x40
 80087b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087b6:	e140      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80087b8:	2380      	movs	r3, #128	; 0x80
 80087ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087be:	e13c      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a41      	ldr	r2, [pc, #260]	; (80088cc <UART_SetConfig+0x640>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	f040 8082 	bne.w	80088d0 <UART_SetConfig+0x644>
 80087cc:	4b3c      	ldr	r3, [pc, #240]	; (80088c0 <UART_SetConfig+0x634>)
 80087ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087d4:	2b28      	cmp	r3, #40	; 0x28
 80087d6:	d86d      	bhi.n	80088b4 <UART_SetConfig+0x628>
 80087d8:	a201      	add	r2, pc, #4	; (adr r2, 80087e0 <UART_SetConfig+0x554>)
 80087da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087de:	bf00      	nop
 80087e0:	08008885 	.word	0x08008885
 80087e4:	080088b5 	.word	0x080088b5
 80087e8:	080088b5 	.word	0x080088b5
 80087ec:	080088b5 	.word	0x080088b5
 80087f0:	080088b5 	.word	0x080088b5
 80087f4:	080088b5 	.word	0x080088b5
 80087f8:	080088b5 	.word	0x080088b5
 80087fc:	080088b5 	.word	0x080088b5
 8008800:	0800888d 	.word	0x0800888d
 8008804:	080088b5 	.word	0x080088b5
 8008808:	080088b5 	.word	0x080088b5
 800880c:	080088b5 	.word	0x080088b5
 8008810:	080088b5 	.word	0x080088b5
 8008814:	080088b5 	.word	0x080088b5
 8008818:	080088b5 	.word	0x080088b5
 800881c:	080088b5 	.word	0x080088b5
 8008820:	08008895 	.word	0x08008895
 8008824:	080088b5 	.word	0x080088b5
 8008828:	080088b5 	.word	0x080088b5
 800882c:	080088b5 	.word	0x080088b5
 8008830:	080088b5 	.word	0x080088b5
 8008834:	080088b5 	.word	0x080088b5
 8008838:	080088b5 	.word	0x080088b5
 800883c:	080088b5 	.word	0x080088b5
 8008840:	0800889d 	.word	0x0800889d
 8008844:	080088b5 	.word	0x080088b5
 8008848:	080088b5 	.word	0x080088b5
 800884c:	080088b5 	.word	0x080088b5
 8008850:	080088b5 	.word	0x080088b5
 8008854:	080088b5 	.word	0x080088b5
 8008858:	080088b5 	.word	0x080088b5
 800885c:	080088b5 	.word	0x080088b5
 8008860:	080088a5 	.word	0x080088a5
 8008864:	080088b5 	.word	0x080088b5
 8008868:	080088b5 	.word	0x080088b5
 800886c:	080088b5 	.word	0x080088b5
 8008870:	080088b5 	.word	0x080088b5
 8008874:	080088b5 	.word	0x080088b5
 8008878:	080088b5 	.word	0x080088b5
 800887c:	080088b5 	.word	0x080088b5
 8008880:	080088ad 	.word	0x080088ad
 8008884:	2301      	movs	r3, #1
 8008886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800888a:	e0d6      	b.n	8008a3a <UART_SetConfig+0x7ae>
 800888c:	2304      	movs	r3, #4
 800888e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008892:	e0d2      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008894:	2308      	movs	r3, #8
 8008896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800889a:	e0ce      	b.n	8008a3a <UART_SetConfig+0x7ae>
 800889c:	2310      	movs	r3, #16
 800889e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088a2:	e0ca      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80088a4:	2320      	movs	r3, #32
 80088a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088aa:	e0c6      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80088ac:	2340      	movs	r3, #64	; 0x40
 80088ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088b2:	e0c2      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80088b4:	2380      	movs	r3, #128	; 0x80
 80088b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ba:	e0be      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80088bc:	40011400 	.word	0x40011400
 80088c0:	58024400 	.word	0x58024400
 80088c4:	40007800 	.word	0x40007800
 80088c8:	40007c00 	.word	0x40007c00
 80088cc:	40011800 	.word	0x40011800
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4aad      	ldr	r2, [pc, #692]	; (8008b8c <UART_SetConfig+0x900>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d176      	bne.n	80089c8 <UART_SetConfig+0x73c>
 80088da:	4bad      	ldr	r3, [pc, #692]	; (8008b90 <UART_SetConfig+0x904>)
 80088dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088e2:	2b28      	cmp	r3, #40	; 0x28
 80088e4:	d86c      	bhi.n	80089c0 <UART_SetConfig+0x734>
 80088e6:	a201      	add	r2, pc, #4	; (adr r2, 80088ec <UART_SetConfig+0x660>)
 80088e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ec:	08008991 	.word	0x08008991
 80088f0:	080089c1 	.word	0x080089c1
 80088f4:	080089c1 	.word	0x080089c1
 80088f8:	080089c1 	.word	0x080089c1
 80088fc:	080089c1 	.word	0x080089c1
 8008900:	080089c1 	.word	0x080089c1
 8008904:	080089c1 	.word	0x080089c1
 8008908:	080089c1 	.word	0x080089c1
 800890c:	08008999 	.word	0x08008999
 8008910:	080089c1 	.word	0x080089c1
 8008914:	080089c1 	.word	0x080089c1
 8008918:	080089c1 	.word	0x080089c1
 800891c:	080089c1 	.word	0x080089c1
 8008920:	080089c1 	.word	0x080089c1
 8008924:	080089c1 	.word	0x080089c1
 8008928:	080089c1 	.word	0x080089c1
 800892c:	080089a1 	.word	0x080089a1
 8008930:	080089c1 	.word	0x080089c1
 8008934:	080089c1 	.word	0x080089c1
 8008938:	080089c1 	.word	0x080089c1
 800893c:	080089c1 	.word	0x080089c1
 8008940:	080089c1 	.word	0x080089c1
 8008944:	080089c1 	.word	0x080089c1
 8008948:	080089c1 	.word	0x080089c1
 800894c:	080089a9 	.word	0x080089a9
 8008950:	080089c1 	.word	0x080089c1
 8008954:	080089c1 	.word	0x080089c1
 8008958:	080089c1 	.word	0x080089c1
 800895c:	080089c1 	.word	0x080089c1
 8008960:	080089c1 	.word	0x080089c1
 8008964:	080089c1 	.word	0x080089c1
 8008968:	080089c1 	.word	0x080089c1
 800896c:	080089b1 	.word	0x080089b1
 8008970:	080089c1 	.word	0x080089c1
 8008974:	080089c1 	.word	0x080089c1
 8008978:	080089c1 	.word	0x080089c1
 800897c:	080089c1 	.word	0x080089c1
 8008980:	080089c1 	.word	0x080089c1
 8008984:	080089c1 	.word	0x080089c1
 8008988:	080089c1 	.word	0x080089c1
 800898c:	080089b9 	.word	0x080089b9
 8008990:	2301      	movs	r3, #1
 8008992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008996:	e050      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008998:	2304      	movs	r3, #4
 800899a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800899e:	e04c      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80089a0:	2308      	movs	r3, #8
 80089a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089a6:	e048      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80089a8:	2310      	movs	r3, #16
 80089aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ae:	e044      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80089b0:	2320      	movs	r3, #32
 80089b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089b6:	e040      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80089b8:	2340      	movs	r3, #64	; 0x40
 80089ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089be:	e03c      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80089c0:	2380      	movs	r3, #128	; 0x80
 80089c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089c6:	e038      	b.n	8008a3a <UART_SetConfig+0x7ae>
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a71      	ldr	r2, [pc, #452]	; (8008b94 <UART_SetConfig+0x908>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d130      	bne.n	8008a34 <UART_SetConfig+0x7a8>
 80089d2:	4b6f      	ldr	r3, [pc, #444]	; (8008b90 <UART_SetConfig+0x904>)
 80089d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089d6:	f003 0307 	and.w	r3, r3, #7
 80089da:	2b05      	cmp	r3, #5
 80089dc:	d826      	bhi.n	8008a2c <UART_SetConfig+0x7a0>
 80089de:	a201      	add	r2, pc, #4	; (adr r2, 80089e4 <UART_SetConfig+0x758>)
 80089e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e4:	080089fd 	.word	0x080089fd
 80089e8:	08008a05 	.word	0x08008a05
 80089ec:	08008a0d 	.word	0x08008a0d
 80089f0:	08008a15 	.word	0x08008a15
 80089f4:	08008a1d 	.word	0x08008a1d
 80089f8:	08008a25 	.word	0x08008a25
 80089fc:	2302      	movs	r3, #2
 80089fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a02:	e01a      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008a04:	2304      	movs	r3, #4
 8008a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a0a:	e016      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008a0c:	2308      	movs	r3, #8
 8008a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a12:	e012      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008a14:	2310      	movs	r3, #16
 8008a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a1a:	e00e      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008a1c:	2320      	movs	r3, #32
 8008a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a22:	e00a      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008a24:	2340      	movs	r3, #64	; 0x40
 8008a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a2a:	e006      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008a2c:	2380      	movs	r3, #128	; 0x80
 8008a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a32:	e002      	b.n	8008a3a <UART_SetConfig+0x7ae>
 8008a34:	2380      	movs	r3, #128	; 0x80
 8008a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a55      	ldr	r2, [pc, #340]	; (8008b94 <UART_SetConfig+0x908>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	f040 80f8 	bne.w	8008c36 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a46:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008a4a:	2b20      	cmp	r3, #32
 8008a4c:	dc46      	bgt.n	8008adc <UART_SetConfig+0x850>
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	db75      	blt.n	8008b3e <UART_SetConfig+0x8b2>
 8008a52:	3b02      	subs	r3, #2
 8008a54:	2b1e      	cmp	r3, #30
 8008a56:	d872      	bhi.n	8008b3e <UART_SetConfig+0x8b2>
 8008a58:	a201      	add	r2, pc, #4	; (adr r2, 8008a60 <UART_SetConfig+0x7d4>)
 8008a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5e:	bf00      	nop
 8008a60:	08008ae3 	.word	0x08008ae3
 8008a64:	08008b3f 	.word	0x08008b3f
 8008a68:	08008aeb 	.word	0x08008aeb
 8008a6c:	08008b3f 	.word	0x08008b3f
 8008a70:	08008b3f 	.word	0x08008b3f
 8008a74:	08008b3f 	.word	0x08008b3f
 8008a78:	08008afb 	.word	0x08008afb
 8008a7c:	08008b3f 	.word	0x08008b3f
 8008a80:	08008b3f 	.word	0x08008b3f
 8008a84:	08008b3f 	.word	0x08008b3f
 8008a88:	08008b3f 	.word	0x08008b3f
 8008a8c:	08008b3f 	.word	0x08008b3f
 8008a90:	08008b3f 	.word	0x08008b3f
 8008a94:	08008b3f 	.word	0x08008b3f
 8008a98:	08008b0b 	.word	0x08008b0b
 8008a9c:	08008b3f 	.word	0x08008b3f
 8008aa0:	08008b3f 	.word	0x08008b3f
 8008aa4:	08008b3f 	.word	0x08008b3f
 8008aa8:	08008b3f 	.word	0x08008b3f
 8008aac:	08008b3f 	.word	0x08008b3f
 8008ab0:	08008b3f 	.word	0x08008b3f
 8008ab4:	08008b3f 	.word	0x08008b3f
 8008ab8:	08008b3f 	.word	0x08008b3f
 8008abc:	08008b3f 	.word	0x08008b3f
 8008ac0:	08008b3f 	.word	0x08008b3f
 8008ac4:	08008b3f 	.word	0x08008b3f
 8008ac8:	08008b3f 	.word	0x08008b3f
 8008acc:	08008b3f 	.word	0x08008b3f
 8008ad0:	08008b3f 	.word	0x08008b3f
 8008ad4:	08008b3f 	.word	0x08008b3f
 8008ad8:	08008b31 	.word	0x08008b31
 8008adc:	2b40      	cmp	r3, #64	; 0x40
 8008ade:	d02a      	beq.n	8008b36 <UART_SetConfig+0x8aa>
 8008ae0:	e02d      	b.n	8008b3e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008ae2:	f7fe f9c5 	bl	8006e70 <HAL_RCCEx_GetD3PCLK1Freq>
 8008ae6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ae8:	e02f      	b.n	8008b4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7fe f9d4 	bl	8006e9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008af8:	e027      	b.n	8008b4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008afa:	f107 0318 	add.w	r3, r7, #24
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7fe fb20 	bl	8007144 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b08:	e01f      	b.n	8008b4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b0a:	4b21      	ldr	r3, [pc, #132]	; (8008b90 <UART_SetConfig+0x904>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0320 	and.w	r3, r3, #32
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d009      	beq.n	8008b2a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b16:	4b1e      	ldr	r3, [pc, #120]	; (8008b90 <UART_SetConfig+0x904>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	08db      	lsrs	r3, r3, #3
 8008b1c:	f003 0303 	and.w	r3, r3, #3
 8008b20:	4a1d      	ldr	r2, [pc, #116]	; (8008b98 <UART_SetConfig+0x90c>)
 8008b22:	fa22 f303 	lsr.w	r3, r2, r3
 8008b26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b28:	e00f      	b.n	8008b4a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008b2a:	4b1b      	ldr	r3, [pc, #108]	; (8008b98 <UART_SetConfig+0x90c>)
 8008b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b2e:	e00c      	b.n	8008b4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b30:	4b1a      	ldr	r3, [pc, #104]	; (8008b9c <UART_SetConfig+0x910>)
 8008b32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b34:	e009      	b.n	8008b4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b3c:	e005      	b.n	8008b4a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008b48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 81ee 	beq.w	8008f2e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b56:	4a12      	ldr	r2, [pc, #72]	; (8008ba0 <UART_SetConfig+0x914>)
 8008b58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b60:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b64:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	685a      	ldr	r2, [r3, #4]
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	005b      	lsls	r3, r3, #1
 8008b6e:	4413      	add	r3, r2
 8008b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d305      	bcc.n	8008b82 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d910      	bls.n	8008ba4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008b88:	e1d1      	b.n	8008f2e <UART_SetConfig+0xca2>
 8008b8a:	bf00      	nop
 8008b8c:	40011c00 	.word	0x40011c00
 8008b90:	58024400 	.word	0x58024400
 8008b94:	58000c00 	.word	0x58000c00
 8008b98:	03d09000 	.word	0x03d09000
 8008b9c:	003d0900 	.word	0x003d0900
 8008ba0:	0800c374 	.word	0x0800c374
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	60bb      	str	r3, [r7, #8]
 8008baa:	60fa      	str	r2, [r7, #12]
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb0:	4ac0      	ldr	r2, [pc, #768]	; (8008eb4 <UART_SetConfig+0xc28>)
 8008bb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	2200      	movs	r2, #0
 8008bba:	603b      	str	r3, [r7, #0]
 8008bbc:	607a      	str	r2, [r7, #4]
 8008bbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bc2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008bc6:	f7f7 fbfb 	bl	80003c0 <__aeabi_uldivmod>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	460b      	mov	r3, r1
 8008bce:	4610      	mov	r0, r2
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	f04f 0200 	mov.w	r2, #0
 8008bd6:	f04f 0300 	mov.w	r3, #0
 8008bda:	020b      	lsls	r3, r1, #8
 8008bdc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008be0:	0202      	lsls	r2, r0, #8
 8008be2:	6979      	ldr	r1, [r7, #20]
 8008be4:	6849      	ldr	r1, [r1, #4]
 8008be6:	0849      	lsrs	r1, r1, #1
 8008be8:	2000      	movs	r0, #0
 8008bea:	460c      	mov	r4, r1
 8008bec:	4605      	mov	r5, r0
 8008bee:	eb12 0804 	adds.w	r8, r2, r4
 8008bf2:	eb43 0905 	adc.w	r9, r3, r5
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	469a      	mov	sl, r3
 8008bfe:	4693      	mov	fp, r2
 8008c00:	4652      	mov	r2, sl
 8008c02:	465b      	mov	r3, fp
 8008c04:	4640      	mov	r0, r8
 8008c06:	4649      	mov	r1, r9
 8008c08:	f7f7 fbda 	bl	80003c0 <__aeabi_uldivmod>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4613      	mov	r3, r2
 8008c12:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c1a:	d308      	bcc.n	8008c2e <UART_SetConfig+0x9a2>
 8008c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c22:	d204      	bcs.n	8008c2e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c2a:	60da      	str	r2, [r3, #12]
 8008c2c:	e17f      	b.n	8008f2e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008c34:	e17b      	b.n	8008f2e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	69db      	ldr	r3, [r3, #28]
 8008c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c3e:	f040 80bd 	bne.w	8008dbc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008c42:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008c46:	2b20      	cmp	r3, #32
 8008c48:	dc48      	bgt.n	8008cdc <UART_SetConfig+0xa50>
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	db7b      	blt.n	8008d46 <UART_SetConfig+0xaba>
 8008c4e:	2b20      	cmp	r3, #32
 8008c50:	d879      	bhi.n	8008d46 <UART_SetConfig+0xaba>
 8008c52:	a201      	add	r2, pc, #4	; (adr r2, 8008c58 <UART_SetConfig+0x9cc>)
 8008c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c58:	08008ce3 	.word	0x08008ce3
 8008c5c:	08008ceb 	.word	0x08008ceb
 8008c60:	08008d47 	.word	0x08008d47
 8008c64:	08008d47 	.word	0x08008d47
 8008c68:	08008cf3 	.word	0x08008cf3
 8008c6c:	08008d47 	.word	0x08008d47
 8008c70:	08008d47 	.word	0x08008d47
 8008c74:	08008d47 	.word	0x08008d47
 8008c78:	08008d03 	.word	0x08008d03
 8008c7c:	08008d47 	.word	0x08008d47
 8008c80:	08008d47 	.word	0x08008d47
 8008c84:	08008d47 	.word	0x08008d47
 8008c88:	08008d47 	.word	0x08008d47
 8008c8c:	08008d47 	.word	0x08008d47
 8008c90:	08008d47 	.word	0x08008d47
 8008c94:	08008d47 	.word	0x08008d47
 8008c98:	08008d13 	.word	0x08008d13
 8008c9c:	08008d47 	.word	0x08008d47
 8008ca0:	08008d47 	.word	0x08008d47
 8008ca4:	08008d47 	.word	0x08008d47
 8008ca8:	08008d47 	.word	0x08008d47
 8008cac:	08008d47 	.word	0x08008d47
 8008cb0:	08008d47 	.word	0x08008d47
 8008cb4:	08008d47 	.word	0x08008d47
 8008cb8:	08008d47 	.word	0x08008d47
 8008cbc:	08008d47 	.word	0x08008d47
 8008cc0:	08008d47 	.word	0x08008d47
 8008cc4:	08008d47 	.word	0x08008d47
 8008cc8:	08008d47 	.word	0x08008d47
 8008ccc:	08008d47 	.word	0x08008d47
 8008cd0:	08008d47 	.word	0x08008d47
 8008cd4:	08008d47 	.word	0x08008d47
 8008cd8:	08008d39 	.word	0x08008d39
 8008cdc:	2b40      	cmp	r3, #64	; 0x40
 8008cde:	d02e      	beq.n	8008d3e <UART_SetConfig+0xab2>
 8008ce0:	e031      	b.n	8008d46 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ce2:	f7fc fd79 	bl	80057d8 <HAL_RCC_GetPCLK1Freq>
 8008ce6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ce8:	e033      	b.n	8008d52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cea:	f7fc fd8b 	bl	8005804 <HAL_RCC_GetPCLK2Freq>
 8008cee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008cf0:	e02f      	b.n	8008d52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fe f8d0 	bl	8006e9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d00:	e027      	b.n	8008d52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d02:	f107 0318 	add.w	r3, r7, #24
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7fe fa1c 	bl	8007144 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d10:	e01f      	b.n	8008d52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d12:	4b69      	ldr	r3, [pc, #420]	; (8008eb8 <UART_SetConfig+0xc2c>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 0320 	and.w	r3, r3, #32
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d009      	beq.n	8008d32 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d1e:	4b66      	ldr	r3, [pc, #408]	; (8008eb8 <UART_SetConfig+0xc2c>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	08db      	lsrs	r3, r3, #3
 8008d24:	f003 0303 	and.w	r3, r3, #3
 8008d28:	4a64      	ldr	r2, [pc, #400]	; (8008ebc <UART_SetConfig+0xc30>)
 8008d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d30:	e00f      	b.n	8008d52 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008d32:	4b62      	ldr	r3, [pc, #392]	; (8008ebc <UART_SetConfig+0xc30>)
 8008d34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d36:	e00c      	b.n	8008d52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d38:	4b61      	ldr	r3, [pc, #388]	; (8008ec0 <UART_SetConfig+0xc34>)
 8008d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d3c:	e009      	b.n	8008d52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d44:	e005      	b.n	8008d52 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008d46:	2300      	movs	r3, #0
 8008d48:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008d50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f000 80ea 	beq.w	8008f2e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5e:	4a55      	ldr	r2, [pc, #340]	; (8008eb4 <UART_SetConfig+0xc28>)
 8008d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d64:	461a      	mov	r2, r3
 8008d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d68:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d6c:	005a      	lsls	r2, r3, #1
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	085b      	lsrs	r3, r3, #1
 8008d74:	441a      	add	r2, r3
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d7e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d82:	2b0f      	cmp	r3, #15
 8008d84:	d916      	bls.n	8008db4 <UART_SetConfig+0xb28>
 8008d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d8c:	d212      	bcs.n	8008db4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	f023 030f 	bic.w	r3, r3, #15
 8008d96:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9a:	085b      	lsrs	r3, r3, #1
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	f003 0307 	and.w	r3, r3, #7
 8008da2:	b29a      	uxth	r2, r3
 8008da4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008da6:	4313      	orrs	r3, r2
 8008da8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008db0:	60da      	str	r2, [r3, #12]
 8008db2:	e0bc      	b.n	8008f2e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008dba:	e0b8      	b.n	8008f2e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008dbc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008dc0:	2b20      	cmp	r3, #32
 8008dc2:	dc4b      	bgt.n	8008e5c <UART_SetConfig+0xbd0>
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f2c0 8087 	blt.w	8008ed8 <UART_SetConfig+0xc4c>
 8008dca:	2b20      	cmp	r3, #32
 8008dcc:	f200 8084 	bhi.w	8008ed8 <UART_SetConfig+0xc4c>
 8008dd0:	a201      	add	r2, pc, #4	; (adr r2, 8008dd8 <UART_SetConfig+0xb4c>)
 8008dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd6:	bf00      	nop
 8008dd8:	08008e63 	.word	0x08008e63
 8008ddc:	08008e6b 	.word	0x08008e6b
 8008de0:	08008ed9 	.word	0x08008ed9
 8008de4:	08008ed9 	.word	0x08008ed9
 8008de8:	08008e73 	.word	0x08008e73
 8008dec:	08008ed9 	.word	0x08008ed9
 8008df0:	08008ed9 	.word	0x08008ed9
 8008df4:	08008ed9 	.word	0x08008ed9
 8008df8:	08008e83 	.word	0x08008e83
 8008dfc:	08008ed9 	.word	0x08008ed9
 8008e00:	08008ed9 	.word	0x08008ed9
 8008e04:	08008ed9 	.word	0x08008ed9
 8008e08:	08008ed9 	.word	0x08008ed9
 8008e0c:	08008ed9 	.word	0x08008ed9
 8008e10:	08008ed9 	.word	0x08008ed9
 8008e14:	08008ed9 	.word	0x08008ed9
 8008e18:	08008e93 	.word	0x08008e93
 8008e1c:	08008ed9 	.word	0x08008ed9
 8008e20:	08008ed9 	.word	0x08008ed9
 8008e24:	08008ed9 	.word	0x08008ed9
 8008e28:	08008ed9 	.word	0x08008ed9
 8008e2c:	08008ed9 	.word	0x08008ed9
 8008e30:	08008ed9 	.word	0x08008ed9
 8008e34:	08008ed9 	.word	0x08008ed9
 8008e38:	08008ed9 	.word	0x08008ed9
 8008e3c:	08008ed9 	.word	0x08008ed9
 8008e40:	08008ed9 	.word	0x08008ed9
 8008e44:	08008ed9 	.word	0x08008ed9
 8008e48:	08008ed9 	.word	0x08008ed9
 8008e4c:	08008ed9 	.word	0x08008ed9
 8008e50:	08008ed9 	.word	0x08008ed9
 8008e54:	08008ed9 	.word	0x08008ed9
 8008e58:	08008ecb 	.word	0x08008ecb
 8008e5c:	2b40      	cmp	r3, #64	; 0x40
 8008e5e:	d037      	beq.n	8008ed0 <UART_SetConfig+0xc44>
 8008e60:	e03a      	b.n	8008ed8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e62:	f7fc fcb9 	bl	80057d8 <HAL_RCC_GetPCLK1Freq>
 8008e66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e68:	e03c      	b.n	8008ee4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e6a:	f7fc fccb 	bl	8005804 <HAL_RCC_GetPCLK2Freq>
 8008e6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e70:	e038      	b.n	8008ee4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7fe f810 	bl	8006e9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e80:	e030      	b.n	8008ee4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e82:	f107 0318 	add.w	r3, r7, #24
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fe f95c 	bl	8007144 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e90:	e028      	b.n	8008ee4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e92:	4b09      	ldr	r3, [pc, #36]	; (8008eb8 <UART_SetConfig+0xc2c>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 0320 	and.w	r3, r3, #32
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d012      	beq.n	8008ec4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e9e:	4b06      	ldr	r3, [pc, #24]	; (8008eb8 <UART_SetConfig+0xc2c>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	08db      	lsrs	r3, r3, #3
 8008ea4:	f003 0303 	and.w	r3, r3, #3
 8008ea8:	4a04      	ldr	r2, [pc, #16]	; (8008ebc <UART_SetConfig+0xc30>)
 8008eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8008eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008eb0:	e018      	b.n	8008ee4 <UART_SetConfig+0xc58>
 8008eb2:	bf00      	nop
 8008eb4:	0800c374 	.word	0x0800c374
 8008eb8:	58024400 	.word	0x58024400
 8008ebc:	03d09000 	.word	0x03d09000
 8008ec0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008ec4:	4b24      	ldr	r3, [pc, #144]	; (8008f58 <UART_SetConfig+0xccc>)
 8008ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ec8:	e00c      	b.n	8008ee4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008eca:	4b24      	ldr	r3, [pc, #144]	; (8008f5c <UART_SetConfig+0xcd0>)
 8008ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ece:	e009      	b.n	8008ee4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ed0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ed6:	e005      	b.n	8008ee4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008ee2:	bf00      	nop
    }

    if (pclk != 0U)
 8008ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d021      	beq.n	8008f2e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eee:	4a1c      	ldr	r2, [pc, #112]	; (8008f60 <UART_SetConfig+0xcd4>)
 8008ef0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ef8:	fbb3 f2f2 	udiv	r2, r3, r2
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	085b      	lsrs	r3, r3, #1
 8008f02:	441a      	add	r2, r3
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f0c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f10:	2b0f      	cmp	r3, #15
 8008f12:	d909      	bls.n	8008f28 <UART_SetConfig+0xc9c>
 8008f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f1a:	d205      	bcs.n	8008f28 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	60da      	str	r2, [r3, #12]
 8008f26:	e002      	b.n	8008f2e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	2201      	movs	r2, #1
 8008f32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	2200      	movs	r2, #0
 8008f42:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	2200      	movs	r2, #0
 8008f48:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008f4a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3748      	adds	r7, #72	; 0x48
 8008f52:	46bd      	mov	sp, r7
 8008f54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f58:	03d09000 	.word	0x03d09000
 8008f5c:	003d0900 	.word	0x003d0900
 8008f60:	0800c374 	.word	0x0800c374

08008f64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f70:	f003 0301 	and.w	r3, r3, #1
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00a      	beq.n	8008f8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	430a      	orrs	r2, r1
 8008f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f92:	f003 0302 	and.w	r3, r3, #2
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00a      	beq.n	8008fb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	430a      	orrs	r2, r1
 8008fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb4:	f003 0304 	and.w	r3, r3, #4
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00a      	beq.n	8008fd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	430a      	orrs	r2, r1
 8008fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd6:	f003 0308 	and.w	r3, r3, #8
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00a      	beq.n	8008ff4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	430a      	orrs	r2, r1
 8008ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff8:	f003 0310 	and.w	r3, r3, #16
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00a      	beq.n	8009016 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	430a      	orrs	r2, r1
 8009014:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800901a:	f003 0320 	and.w	r3, r3, #32
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00a      	beq.n	8009038 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	430a      	orrs	r2, r1
 8009036:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800903c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009040:	2b00      	cmp	r3, #0
 8009042:	d01a      	beq.n	800907a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	430a      	orrs	r2, r1
 8009058:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800905e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009062:	d10a      	bne.n	800907a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	430a      	orrs	r2, r1
 8009078:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00a      	beq.n	800909c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	430a      	orrs	r2, r1
 800909a:	605a      	str	r2, [r3, #4]
  }
}
 800909c:	bf00      	nop
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b086      	sub	sp, #24
 80090ac:	af02      	add	r7, sp, #8
 80090ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80090b8:	f7f8 fe28 	bl	8001d0c <HAL_GetTick>
 80090bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 0308 	and.w	r3, r3, #8
 80090c8:	2b08      	cmp	r3, #8
 80090ca:	d10e      	bne.n	80090ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f82f 	bl	800913e <UART_WaitOnFlagUntilTimeout>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d001      	beq.n	80090ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090e6:	2303      	movs	r3, #3
 80090e8:	e025      	b.n	8009136 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0304 	and.w	r3, r3, #4
 80090f4:	2b04      	cmp	r3, #4
 80090f6:	d10e      	bne.n	8009116 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090fc:	9300      	str	r3, [sp, #0]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2200      	movs	r2, #0
 8009102:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f819 	bl	800913e <UART_WaitOnFlagUntilTimeout>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d001      	beq.n	8009116 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009112:	2303      	movs	r3, #3
 8009114:	e00f      	b.n	8009136 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2220      	movs	r2, #32
 800911a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2220      	movs	r2, #32
 8009122:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b09c      	sub	sp, #112	; 0x70
 8009142:	af00      	add	r7, sp, #0
 8009144:	60f8      	str	r0, [r7, #12]
 8009146:	60b9      	str	r1, [r7, #8]
 8009148:	603b      	str	r3, [r7, #0]
 800914a:	4613      	mov	r3, r2
 800914c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800914e:	e0a9      	b.n	80092a4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009150:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009156:	f000 80a5 	beq.w	80092a4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800915a:	f7f8 fdd7 	bl	8001d0c <HAL_GetTick>
 800915e:	4602      	mov	r2, r0
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009166:	429a      	cmp	r2, r3
 8009168:	d302      	bcc.n	8009170 <UART_WaitOnFlagUntilTimeout+0x32>
 800916a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800916c:	2b00      	cmp	r3, #0
 800916e:	d140      	bne.n	80091f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009178:	e853 3f00 	ldrex	r3, [r3]
 800917c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800917e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009180:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009184:	667b      	str	r3, [r7, #100]	; 0x64
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	461a      	mov	r2, r3
 800918c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800918e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009190:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009192:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009194:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009196:	e841 2300 	strex	r3, r2, [r1]
 800919a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800919c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1e6      	bne.n	8009170 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3308      	adds	r3, #8
 80091a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ac:	e853 3f00 	ldrex	r3, [r3]
 80091b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b4:	f023 0301 	bic.w	r3, r3, #1
 80091b8:	663b      	str	r3, [r7, #96]	; 0x60
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	3308      	adds	r3, #8
 80091c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80091c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80091c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80091c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091ca:	e841 2300 	strex	r3, r2, [r1]
 80091ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80091d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1e5      	bne.n	80091a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2220      	movs	r2, #32
 80091da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2220      	movs	r2, #32
 80091e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80091ee:	2303      	movs	r3, #3
 80091f0:	e069      	b.n	80092c6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f003 0304 	and.w	r3, r3, #4
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d051      	beq.n	80092a4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	69db      	ldr	r3, [r3, #28]
 8009206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800920a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800920e:	d149      	bne.n	80092a4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009218:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009222:	e853 3f00 	ldrex	r3, [r3]
 8009226:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800922e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	461a      	mov	r2, r3
 8009236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009238:	637b      	str	r3, [r7, #52]	; 0x34
 800923a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800923e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009240:	e841 2300 	strex	r3, r2, [r1]
 8009244:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009248:	2b00      	cmp	r3, #0
 800924a:	d1e6      	bne.n	800921a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	3308      	adds	r3, #8
 8009252:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	e853 3f00 	ldrex	r3, [r3]
 800925a:	613b      	str	r3, [r7, #16]
   return(result);
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	f023 0301 	bic.w	r3, r3, #1
 8009262:	66bb      	str	r3, [r7, #104]	; 0x68
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	3308      	adds	r3, #8
 800926a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800926c:	623a      	str	r2, [r7, #32]
 800926e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009270:	69f9      	ldr	r1, [r7, #28]
 8009272:	6a3a      	ldr	r2, [r7, #32]
 8009274:	e841 2300 	strex	r3, r2, [r1]
 8009278:	61bb      	str	r3, [r7, #24]
   return(result);
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1e5      	bne.n	800924c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2220      	movs	r2, #32
 8009284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2220      	movs	r2, #32
 800928c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2220      	movs	r2, #32
 8009294:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80092a0:	2303      	movs	r3, #3
 80092a2:	e010      	b.n	80092c6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	69da      	ldr	r2, [r3, #28]
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	4013      	ands	r3, r2
 80092ae:	68ba      	ldr	r2, [r7, #8]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	bf0c      	ite	eq
 80092b4:	2301      	moveq	r3, #1
 80092b6:	2300      	movne	r3, #0
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	461a      	mov	r2, r3
 80092bc:	79fb      	ldrb	r3, [r7, #7]
 80092be:	429a      	cmp	r2, r3
 80092c0:	f43f af46 	beq.w	8009150 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3770      	adds	r7, #112	; 0x70
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80092ce:	b480      	push	{r7}
 80092d0:	b085      	sub	sp, #20
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d101      	bne.n	80092e4 <HAL_UARTEx_DisableFifoMode+0x16>
 80092e0:	2302      	movs	r3, #2
 80092e2:	e027      	b.n	8009334 <HAL_UARTEx_DisableFifoMode+0x66>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2224      	movs	r2, #36	; 0x24
 80092f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f022 0201 	bic.w	r2, r2, #1
 800930a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009312:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2220      	movs	r2, #32
 8009326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3714      	adds	r7, #20
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009350:	2b01      	cmp	r3, #1
 8009352:	d101      	bne.n	8009358 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009354:	2302      	movs	r3, #2
 8009356:	e02d      	b.n	80093b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2224      	movs	r2, #36	; 0x24
 8009364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f022 0201 	bic.w	r2, r2, #1
 800937e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	683a      	ldr	r2, [r7, #0]
 8009390:	430a      	orrs	r2, r1
 8009392:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 f84f 	bl	8009438 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68fa      	ldr	r2, [r7, #12]
 80093a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2220      	movs	r2, #32
 80093a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d101      	bne.n	80093d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80093d0:	2302      	movs	r3, #2
 80093d2:	e02d      	b.n	8009430 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2201      	movs	r2, #1
 80093d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2224      	movs	r2, #36	; 0x24
 80093e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f022 0201 	bic.w	r2, r2, #1
 80093fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	683a      	ldr	r2, [r7, #0]
 800940c:	430a      	orrs	r2, r1
 800940e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 f811 	bl	8009438 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2220      	movs	r2, #32
 8009422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3710      	adds	r7, #16
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009438:	b480      	push	{r7}
 800943a:	b085      	sub	sp, #20
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009444:	2b00      	cmp	r3, #0
 8009446:	d108      	bne.n	800945a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009458:	e031      	b.n	80094be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800945a:	2310      	movs	r3, #16
 800945c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800945e:	2310      	movs	r3, #16
 8009460:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	0e5b      	lsrs	r3, r3, #25
 800946a:	b2db      	uxtb	r3, r3
 800946c:	f003 0307 	and.w	r3, r3, #7
 8009470:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	0f5b      	lsrs	r3, r3, #29
 800947a:	b2db      	uxtb	r3, r3
 800947c:	f003 0307 	and.w	r3, r3, #7
 8009480:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009482:	7bbb      	ldrb	r3, [r7, #14]
 8009484:	7b3a      	ldrb	r2, [r7, #12]
 8009486:	4911      	ldr	r1, [pc, #68]	; (80094cc <UARTEx_SetNbDataToProcess+0x94>)
 8009488:	5c8a      	ldrb	r2, [r1, r2]
 800948a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800948e:	7b3a      	ldrb	r2, [r7, #12]
 8009490:	490f      	ldr	r1, [pc, #60]	; (80094d0 <UARTEx_SetNbDataToProcess+0x98>)
 8009492:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009494:	fb93 f3f2 	sdiv	r3, r3, r2
 8009498:	b29a      	uxth	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
 80094a2:	7b7a      	ldrb	r2, [r7, #13]
 80094a4:	4909      	ldr	r1, [pc, #36]	; (80094cc <UARTEx_SetNbDataToProcess+0x94>)
 80094a6:	5c8a      	ldrb	r2, [r1, r2]
 80094a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80094ac:	7b7a      	ldrb	r2, [r7, #13]
 80094ae:	4908      	ldr	r1, [pc, #32]	; (80094d0 <UARTEx_SetNbDataToProcess+0x98>)
 80094b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80094be:	bf00      	nop
 80094c0:	3714      	adds	r7, #20
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr
 80094ca:	bf00      	nop
 80094cc:	0800c38c 	.word	0x0800c38c
 80094d0:	0800c394 	.word	0x0800c394

080094d4 <__errno>:
 80094d4:	4b01      	ldr	r3, [pc, #4]	; (80094dc <__errno+0x8>)
 80094d6:	6818      	ldr	r0, [r3, #0]
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	24000014 	.word	0x24000014

080094e0 <__libc_init_array>:
 80094e0:	b570      	push	{r4, r5, r6, lr}
 80094e2:	4d0d      	ldr	r5, [pc, #52]	; (8009518 <__libc_init_array+0x38>)
 80094e4:	4c0d      	ldr	r4, [pc, #52]	; (800951c <__libc_init_array+0x3c>)
 80094e6:	1b64      	subs	r4, r4, r5
 80094e8:	10a4      	asrs	r4, r4, #2
 80094ea:	2600      	movs	r6, #0
 80094ec:	42a6      	cmp	r6, r4
 80094ee:	d109      	bne.n	8009504 <__libc_init_array+0x24>
 80094f0:	4d0b      	ldr	r5, [pc, #44]	; (8009520 <__libc_init_array+0x40>)
 80094f2:	4c0c      	ldr	r4, [pc, #48]	; (8009524 <__libc_init_array+0x44>)
 80094f4:	f002 fe5c 	bl	800c1b0 <_init>
 80094f8:	1b64      	subs	r4, r4, r5
 80094fa:	10a4      	asrs	r4, r4, #2
 80094fc:	2600      	movs	r6, #0
 80094fe:	42a6      	cmp	r6, r4
 8009500:	d105      	bne.n	800950e <__libc_init_array+0x2e>
 8009502:	bd70      	pop	{r4, r5, r6, pc}
 8009504:	f855 3b04 	ldr.w	r3, [r5], #4
 8009508:	4798      	blx	r3
 800950a:	3601      	adds	r6, #1
 800950c:	e7ee      	b.n	80094ec <__libc_init_array+0xc>
 800950e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009512:	4798      	blx	r3
 8009514:	3601      	adds	r6, #1
 8009516:	e7f2      	b.n	80094fe <__libc_init_array+0x1e>
 8009518:	0800c77c 	.word	0x0800c77c
 800951c:	0800c77c 	.word	0x0800c77c
 8009520:	0800c77c 	.word	0x0800c77c
 8009524:	0800c780 	.word	0x0800c780

08009528 <memset>:
 8009528:	4402      	add	r2, r0
 800952a:	4603      	mov	r3, r0
 800952c:	4293      	cmp	r3, r2
 800952e:	d100      	bne.n	8009532 <memset+0xa>
 8009530:	4770      	bx	lr
 8009532:	f803 1b01 	strb.w	r1, [r3], #1
 8009536:	e7f9      	b.n	800952c <memset+0x4>

08009538 <__cvt>:
 8009538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800953a:	ed2d 8b02 	vpush	{d8}
 800953e:	eeb0 8b40 	vmov.f64	d8, d0
 8009542:	b085      	sub	sp, #20
 8009544:	4617      	mov	r7, r2
 8009546:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009548:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800954a:	ee18 2a90 	vmov	r2, s17
 800954e:	f025 0520 	bic.w	r5, r5, #32
 8009552:	2a00      	cmp	r2, #0
 8009554:	bfb6      	itet	lt
 8009556:	222d      	movlt	r2, #45	; 0x2d
 8009558:	2200      	movge	r2, #0
 800955a:	eeb1 8b40 	vneglt.f64	d8, d0
 800955e:	2d46      	cmp	r5, #70	; 0x46
 8009560:	460c      	mov	r4, r1
 8009562:	701a      	strb	r2, [r3, #0]
 8009564:	d004      	beq.n	8009570 <__cvt+0x38>
 8009566:	2d45      	cmp	r5, #69	; 0x45
 8009568:	d100      	bne.n	800956c <__cvt+0x34>
 800956a:	3401      	adds	r4, #1
 800956c:	2102      	movs	r1, #2
 800956e:	e000      	b.n	8009572 <__cvt+0x3a>
 8009570:	2103      	movs	r1, #3
 8009572:	ab03      	add	r3, sp, #12
 8009574:	9301      	str	r3, [sp, #4]
 8009576:	ab02      	add	r3, sp, #8
 8009578:	9300      	str	r3, [sp, #0]
 800957a:	4622      	mov	r2, r4
 800957c:	4633      	mov	r3, r6
 800957e:	eeb0 0b48 	vmov.f64	d0, d8
 8009582:	f000 fcc9 	bl	8009f18 <_dtoa_r>
 8009586:	2d47      	cmp	r5, #71	; 0x47
 8009588:	d101      	bne.n	800958e <__cvt+0x56>
 800958a:	07fb      	lsls	r3, r7, #31
 800958c:	d51a      	bpl.n	80095c4 <__cvt+0x8c>
 800958e:	2d46      	cmp	r5, #70	; 0x46
 8009590:	eb00 0204 	add.w	r2, r0, r4
 8009594:	d10c      	bne.n	80095b0 <__cvt+0x78>
 8009596:	7803      	ldrb	r3, [r0, #0]
 8009598:	2b30      	cmp	r3, #48	; 0x30
 800959a:	d107      	bne.n	80095ac <__cvt+0x74>
 800959c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80095a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095a4:	bf1c      	itt	ne
 80095a6:	f1c4 0401 	rsbne	r4, r4, #1
 80095aa:	6034      	strne	r4, [r6, #0]
 80095ac:	6833      	ldr	r3, [r6, #0]
 80095ae:	441a      	add	r2, r3
 80095b0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80095b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095b8:	bf08      	it	eq
 80095ba:	9203      	streq	r2, [sp, #12]
 80095bc:	2130      	movs	r1, #48	; 0x30
 80095be:	9b03      	ldr	r3, [sp, #12]
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d307      	bcc.n	80095d4 <__cvt+0x9c>
 80095c4:	9b03      	ldr	r3, [sp, #12]
 80095c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095c8:	1a1b      	subs	r3, r3, r0
 80095ca:	6013      	str	r3, [r2, #0]
 80095cc:	b005      	add	sp, #20
 80095ce:	ecbd 8b02 	vpop	{d8}
 80095d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095d4:	1c5c      	adds	r4, r3, #1
 80095d6:	9403      	str	r4, [sp, #12]
 80095d8:	7019      	strb	r1, [r3, #0]
 80095da:	e7f0      	b.n	80095be <__cvt+0x86>

080095dc <__exponent>:
 80095dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095de:	4603      	mov	r3, r0
 80095e0:	2900      	cmp	r1, #0
 80095e2:	bfb8      	it	lt
 80095e4:	4249      	neglt	r1, r1
 80095e6:	f803 2b02 	strb.w	r2, [r3], #2
 80095ea:	bfb4      	ite	lt
 80095ec:	222d      	movlt	r2, #45	; 0x2d
 80095ee:	222b      	movge	r2, #43	; 0x2b
 80095f0:	2909      	cmp	r1, #9
 80095f2:	7042      	strb	r2, [r0, #1]
 80095f4:	dd2a      	ble.n	800964c <__exponent+0x70>
 80095f6:	f10d 0407 	add.w	r4, sp, #7
 80095fa:	46a4      	mov	ip, r4
 80095fc:	270a      	movs	r7, #10
 80095fe:	46a6      	mov	lr, r4
 8009600:	460a      	mov	r2, r1
 8009602:	fb91 f6f7 	sdiv	r6, r1, r7
 8009606:	fb07 1516 	mls	r5, r7, r6, r1
 800960a:	3530      	adds	r5, #48	; 0x30
 800960c:	2a63      	cmp	r2, #99	; 0x63
 800960e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009612:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009616:	4631      	mov	r1, r6
 8009618:	dcf1      	bgt.n	80095fe <__exponent+0x22>
 800961a:	3130      	adds	r1, #48	; 0x30
 800961c:	f1ae 0502 	sub.w	r5, lr, #2
 8009620:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009624:	1c44      	adds	r4, r0, #1
 8009626:	4629      	mov	r1, r5
 8009628:	4561      	cmp	r1, ip
 800962a:	d30a      	bcc.n	8009642 <__exponent+0x66>
 800962c:	f10d 0209 	add.w	r2, sp, #9
 8009630:	eba2 020e 	sub.w	r2, r2, lr
 8009634:	4565      	cmp	r5, ip
 8009636:	bf88      	it	hi
 8009638:	2200      	movhi	r2, #0
 800963a:	4413      	add	r3, r2
 800963c:	1a18      	subs	r0, r3, r0
 800963e:	b003      	add	sp, #12
 8009640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009642:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009646:	f804 2f01 	strb.w	r2, [r4, #1]!
 800964a:	e7ed      	b.n	8009628 <__exponent+0x4c>
 800964c:	2330      	movs	r3, #48	; 0x30
 800964e:	3130      	adds	r1, #48	; 0x30
 8009650:	7083      	strb	r3, [r0, #2]
 8009652:	70c1      	strb	r1, [r0, #3]
 8009654:	1d03      	adds	r3, r0, #4
 8009656:	e7f1      	b.n	800963c <__exponent+0x60>

08009658 <_printf_float>:
 8009658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800965c:	b08b      	sub	sp, #44	; 0x2c
 800965e:	460c      	mov	r4, r1
 8009660:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009664:	4616      	mov	r6, r2
 8009666:	461f      	mov	r7, r3
 8009668:	4605      	mov	r5, r0
 800966a:	f001 f9c3 	bl	800a9f4 <_localeconv_r>
 800966e:	f8d0 b000 	ldr.w	fp, [r0]
 8009672:	4658      	mov	r0, fp
 8009674:	f7f6 fe4c 	bl	8000310 <strlen>
 8009678:	2300      	movs	r3, #0
 800967a:	9308      	str	r3, [sp, #32]
 800967c:	f8d8 3000 	ldr.w	r3, [r8]
 8009680:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009684:	6822      	ldr	r2, [r4, #0]
 8009686:	3307      	adds	r3, #7
 8009688:	f023 0307 	bic.w	r3, r3, #7
 800968c:	f103 0108 	add.w	r1, r3, #8
 8009690:	f8c8 1000 	str.w	r1, [r8]
 8009694:	4682      	mov	sl, r0
 8009696:	e9d3 0100 	ldrd	r0, r1, [r3]
 800969a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800969e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8009900 <_printf_float+0x2a8>
 80096a2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80096a6:	eeb0 6bc0 	vabs.f64	d6, d0
 80096aa:	eeb4 6b47 	vcmp.f64	d6, d7
 80096ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096b2:	dd24      	ble.n	80096fe <_printf_float+0xa6>
 80096b4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80096b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096bc:	d502      	bpl.n	80096c4 <_printf_float+0x6c>
 80096be:	232d      	movs	r3, #45	; 0x2d
 80096c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096c4:	4b90      	ldr	r3, [pc, #576]	; (8009908 <_printf_float+0x2b0>)
 80096c6:	4891      	ldr	r0, [pc, #580]	; (800990c <_printf_float+0x2b4>)
 80096c8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80096cc:	bf94      	ite	ls
 80096ce:	4698      	movls	r8, r3
 80096d0:	4680      	movhi	r8, r0
 80096d2:	2303      	movs	r3, #3
 80096d4:	6123      	str	r3, [r4, #16]
 80096d6:	f022 0204 	bic.w	r2, r2, #4
 80096da:	2300      	movs	r3, #0
 80096dc:	6022      	str	r2, [r4, #0]
 80096de:	9304      	str	r3, [sp, #16]
 80096e0:	9700      	str	r7, [sp, #0]
 80096e2:	4633      	mov	r3, r6
 80096e4:	aa09      	add	r2, sp, #36	; 0x24
 80096e6:	4621      	mov	r1, r4
 80096e8:	4628      	mov	r0, r5
 80096ea:	f000 f9d3 	bl	8009a94 <_printf_common>
 80096ee:	3001      	adds	r0, #1
 80096f0:	f040 808a 	bne.w	8009808 <_printf_float+0x1b0>
 80096f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096f8:	b00b      	add	sp, #44	; 0x2c
 80096fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096fe:	eeb4 0b40 	vcmp.f64	d0, d0
 8009702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009706:	d709      	bvc.n	800971c <_printf_float+0xc4>
 8009708:	ee10 3a90 	vmov	r3, s1
 800970c:	2b00      	cmp	r3, #0
 800970e:	bfbc      	itt	lt
 8009710:	232d      	movlt	r3, #45	; 0x2d
 8009712:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009716:	487e      	ldr	r0, [pc, #504]	; (8009910 <_printf_float+0x2b8>)
 8009718:	4b7e      	ldr	r3, [pc, #504]	; (8009914 <_printf_float+0x2bc>)
 800971a:	e7d5      	b.n	80096c8 <_printf_float+0x70>
 800971c:	6863      	ldr	r3, [r4, #4]
 800971e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009722:	9104      	str	r1, [sp, #16]
 8009724:	1c59      	adds	r1, r3, #1
 8009726:	d13c      	bne.n	80097a2 <_printf_float+0x14a>
 8009728:	2306      	movs	r3, #6
 800972a:	6063      	str	r3, [r4, #4]
 800972c:	2300      	movs	r3, #0
 800972e:	9303      	str	r3, [sp, #12]
 8009730:	ab08      	add	r3, sp, #32
 8009732:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009736:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800973a:	ab07      	add	r3, sp, #28
 800973c:	6861      	ldr	r1, [r4, #4]
 800973e:	9300      	str	r3, [sp, #0]
 8009740:	6022      	str	r2, [r4, #0]
 8009742:	f10d 031b 	add.w	r3, sp, #27
 8009746:	4628      	mov	r0, r5
 8009748:	f7ff fef6 	bl	8009538 <__cvt>
 800974c:	9b04      	ldr	r3, [sp, #16]
 800974e:	9907      	ldr	r1, [sp, #28]
 8009750:	2b47      	cmp	r3, #71	; 0x47
 8009752:	4680      	mov	r8, r0
 8009754:	d108      	bne.n	8009768 <_printf_float+0x110>
 8009756:	1cc8      	adds	r0, r1, #3
 8009758:	db02      	blt.n	8009760 <_printf_float+0x108>
 800975a:	6863      	ldr	r3, [r4, #4]
 800975c:	4299      	cmp	r1, r3
 800975e:	dd41      	ble.n	80097e4 <_printf_float+0x18c>
 8009760:	f1a9 0902 	sub.w	r9, r9, #2
 8009764:	fa5f f989 	uxtb.w	r9, r9
 8009768:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800976c:	d820      	bhi.n	80097b0 <_printf_float+0x158>
 800976e:	3901      	subs	r1, #1
 8009770:	464a      	mov	r2, r9
 8009772:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009776:	9107      	str	r1, [sp, #28]
 8009778:	f7ff ff30 	bl	80095dc <__exponent>
 800977c:	9a08      	ldr	r2, [sp, #32]
 800977e:	9004      	str	r0, [sp, #16]
 8009780:	1813      	adds	r3, r2, r0
 8009782:	2a01      	cmp	r2, #1
 8009784:	6123      	str	r3, [r4, #16]
 8009786:	dc02      	bgt.n	800978e <_printf_float+0x136>
 8009788:	6822      	ldr	r2, [r4, #0]
 800978a:	07d2      	lsls	r2, r2, #31
 800978c:	d501      	bpl.n	8009792 <_printf_float+0x13a>
 800978e:	3301      	adds	r3, #1
 8009790:	6123      	str	r3, [r4, #16]
 8009792:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d0a2      	beq.n	80096e0 <_printf_float+0x88>
 800979a:	232d      	movs	r3, #45	; 0x2d
 800979c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097a0:	e79e      	b.n	80096e0 <_printf_float+0x88>
 80097a2:	9904      	ldr	r1, [sp, #16]
 80097a4:	2947      	cmp	r1, #71	; 0x47
 80097a6:	d1c1      	bne.n	800972c <_printf_float+0xd4>
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d1bf      	bne.n	800972c <_printf_float+0xd4>
 80097ac:	2301      	movs	r3, #1
 80097ae:	e7bc      	b.n	800972a <_printf_float+0xd2>
 80097b0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80097b4:	d118      	bne.n	80097e8 <_printf_float+0x190>
 80097b6:	2900      	cmp	r1, #0
 80097b8:	6863      	ldr	r3, [r4, #4]
 80097ba:	dd0b      	ble.n	80097d4 <_printf_float+0x17c>
 80097bc:	6121      	str	r1, [r4, #16]
 80097be:	b913      	cbnz	r3, 80097c6 <_printf_float+0x16e>
 80097c0:	6822      	ldr	r2, [r4, #0]
 80097c2:	07d0      	lsls	r0, r2, #31
 80097c4:	d502      	bpl.n	80097cc <_printf_float+0x174>
 80097c6:	3301      	adds	r3, #1
 80097c8:	440b      	add	r3, r1
 80097ca:	6123      	str	r3, [r4, #16]
 80097cc:	2300      	movs	r3, #0
 80097ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80097d0:	9304      	str	r3, [sp, #16]
 80097d2:	e7de      	b.n	8009792 <_printf_float+0x13a>
 80097d4:	b913      	cbnz	r3, 80097dc <_printf_float+0x184>
 80097d6:	6822      	ldr	r2, [r4, #0]
 80097d8:	07d2      	lsls	r2, r2, #31
 80097da:	d501      	bpl.n	80097e0 <_printf_float+0x188>
 80097dc:	3302      	adds	r3, #2
 80097de:	e7f4      	b.n	80097ca <_printf_float+0x172>
 80097e0:	2301      	movs	r3, #1
 80097e2:	e7f2      	b.n	80097ca <_printf_float+0x172>
 80097e4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80097e8:	9b08      	ldr	r3, [sp, #32]
 80097ea:	4299      	cmp	r1, r3
 80097ec:	db05      	blt.n	80097fa <_printf_float+0x1a2>
 80097ee:	6823      	ldr	r3, [r4, #0]
 80097f0:	6121      	str	r1, [r4, #16]
 80097f2:	07d8      	lsls	r0, r3, #31
 80097f4:	d5ea      	bpl.n	80097cc <_printf_float+0x174>
 80097f6:	1c4b      	adds	r3, r1, #1
 80097f8:	e7e7      	b.n	80097ca <_printf_float+0x172>
 80097fa:	2900      	cmp	r1, #0
 80097fc:	bfd4      	ite	le
 80097fe:	f1c1 0202 	rsble	r2, r1, #2
 8009802:	2201      	movgt	r2, #1
 8009804:	4413      	add	r3, r2
 8009806:	e7e0      	b.n	80097ca <_printf_float+0x172>
 8009808:	6823      	ldr	r3, [r4, #0]
 800980a:	055a      	lsls	r2, r3, #21
 800980c:	d407      	bmi.n	800981e <_printf_float+0x1c6>
 800980e:	6923      	ldr	r3, [r4, #16]
 8009810:	4642      	mov	r2, r8
 8009812:	4631      	mov	r1, r6
 8009814:	4628      	mov	r0, r5
 8009816:	47b8      	blx	r7
 8009818:	3001      	adds	r0, #1
 800981a:	d12a      	bne.n	8009872 <_printf_float+0x21a>
 800981c:	e76a      	b.n	80096f4 <_printf_float+0x9c>
 800981e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009822:	f240 80e2 	bls.w	80099ea <_printf_float+0x392>
 8009826:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800982a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800982e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009832:	d133      	bne.n	800989c <_printf_float+0x244>
 8009834:	4a38      	ldr	r2, [pc, #224]	; (8009918 <_printf_float+0x2c0>)
 8009836:	2301      	movs	r3, #1
 8009838:	4631      	mov	r1, r6
 800983a:	4628      	mov	r0, r5
 800983c:	47b8      	blx	r7
 800983e:	3001      	adds	r0, #1
 8009840:	f43f af58 	beq.w	80096f4 <_printf_float+0x9c>
 8009844:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009848:	429a      	cmp	r2, r3
 800984a:	db02      	blt.n	8009852 <_printf_float+0x1fa>
 800984c:	6823      	ldr	r3, [r4, #0]
 800984e:	07d8      	lsls	r0, r3, #31
 8009850:	d50f      	bpl.n	8009872 <_printf_float+0x21a>
 8009852:	4653      	mov	r3, sl
 8009854:	465a      	mov	r2, fp
 8009856:	4631      	mov	r1, r6
 8009858:	4628      	mov	r0, r5
 800985a:	47b8      	blx	r7
 800985c:	3001      	adds	r0, #1
 800985e:	f43f af49 	beq.w	80096f4 <_printf_float+0x9c>
 8009862:	f04f 0800 	mov.w	r8, #0
 8009866:	f104 091a 	add.w	r9, r4, #26
 800986a:	9b08      	ldr	r3, [sp, #32]
 800986c:	3b01      	subs	r3, #1
 800986e:	4543      	cmp	r3, r8
 8009870:	dc09      	bgt.n	8009886 <_printf_float+0x22e>
 8009872:	6823      	ldr	r3, [r4, #0]
 8009874:	079b      	lsls	r3, r3, #30
 8009876:	f100 8108 	bmi.w	8009a8a <_printf_float+0x432>
 800987a:	68e0      	ldr	r0, [r4, #12]
 800987c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800987e:	4298      	cmp	r0, r3
 8009880:	bfb8      	it	lt
 8009882:	4618      	movlt	r0, r3
 8009884:	e738      	b.n	80096f8 <_printf_float+0xa0>
 8009886:	2301      	movs	r3, #1
 8009888:	464a      	mov	r2, r9
 800988a:	4631      	mov	r1, r6
 800988c:	4628      	mov	r0, r5
 800988e:	47b8      	blx	r7
 8009890:	3001      	adds	r0, #1
 8009892:	f43f af2f 	beq.w	80096f4 <_printf_float+0x9c>
 8009896:	f108 0801 	add.w	r8, r8, #1
 800989a:	e7e6      	b.n	800986a <_printf_float+0x212>
 800989c:	9b07      	ldr	r3, [sp, #28]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	dc3c      	bgt.n	800991c <_printf_float+0x2c4>
 80098a2:	4a1d      	ldr	r2, [pc, #116]	; (8009918 <_printf_float+0x2c0>)
 80098a4:	2301      	movs	r3, #1
 80098a6:	4631      	mov	r1, r6
 80098a8:	4628      	mov	r0, r5
 80098aa:	47b8      	blx	r7
 80098ac:	3001      	adds	r0, #1
 80098ae:	f43f af21 	beq.w	80096f4 <_printf_float+0x9c>
 80098b2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80098b6:	4313      	orrs	r3, r2
 80098b8:	d102      	bne.n	80098c0 <_printf_float+0x268>
 80098ba:	6823      	ldr	r3, [r4, #0]
 80098bc:	07d9      	lsls	r1, r3, #31
 80098be:	d5d8      	bpl.n	8009872 <_printf_float+0x21a>
 80098c0:	4653      	mov	r3, sl
 80098c2:	465a      	mov	r2, fp
 80098c4:	4631      	mov	r1, r6
 80098c6:	4628      	mov	r0, r5
 80098c8:	47b8      	blx	r7
 80098ca:	3001      	adds	r0, #1
 80098cc:	f43f af12 	beq.w	80096f4 <_printf_float+0x9c>
 80098d0:	f04f 0900 	mov.w	r9, #0
 80098d4:	f104 0a1a 	add.w	sl, r4, #26
 80098d8:	9b07      	ldr	r3, [sp, #28]
 80098da:	425b      	negs	r3, r3
 80098dc:	454b      	cmp	r3, r9
 80098de:	dc01      	bgt.n	80098e4 <_printf_float+0x28c>
 80098e0:	9b08      	ldr	r3, [sp, #32]
 80098e2:	e795      	b.n	8009810 <_printf_float+0x1b8>
 80098e4:	2301      	movs	r3, #1
 80098e6:	4652      	mov	r2, sl
 80098e8:	4631      	mov	r1, r6
 80098ea:	4628      	mov	r0, r5
 80098ec:	47b8      	blx	r7
 80098ee:	3001      	adds	r0, #1
 80098f0:	f43f af00 	beq.w	80096f4 <_printf_float+0x9c>
 80098f4:	f109 0901 	add.w	r9, r9, #1
 80098f8:	e7ee      	b.n	80098d8 <_printf_float+0x280>
 80098fa:	bf00      	nop
 80098fc:	f3af 8000 	nop.w
 8009900:	ffffffff 	.word	0xffffffff
 8009904:	7fefffff 	.word	0x7fefffff
 8009908:	0800c3a0 	.word	0x0800c3a0
 800990c:	0800c3a4 	.word	0x0800c3a4
 8009910:	0800c3ac 	.word	0x0800c3ac
 8009914:	0800c3a8 	.word	0x0800c3a8
 8009918:	0800c3b0 	.word	0x0800c3b0
 800991c:	9a08      	ldr	r2, [sp, #32]
 800991e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009920:	429a      	cmp	r2, r3
 8009922:	bfa8      	it	ge
 8009924:	461a      	movge	r2, r3
 8009926:	2a00      	cmp	r2, #0
 8009928:	4691      	mov	r9, r2
 800992a:	dc38      	bgt.n	800999e <_printf_float+0x346>
 800992c:	2300      	movs	r3, #0
 800992e:	9305      	str	r3, [sp, #20]
 8009930:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009934:	f104 021a 	add.w	r2, r4, #26
 8009938:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800993a:	9905      	ldr	r1, [sp, #20]
 800993c:	9304      	str	r3, [sp, #16]
 800993e:	eba3 0309 	sub.w	r3, r3, r9
 8009942:	428b      	cmp	r3, r1
 8009944:	dc33      	bgt.n	80099ae <_printf_float+0x356>
 8009946:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800994a:	429a      	cmp	r2, r3
 800994c:	db3c      	blt.n	80099c8 <_printf_float+0x370>
 800994e:	6823      	ldr	r3, [r4, #0]
 8009950:	07da      	lsls	r2, r3, #31
 8009952:	d439      	bmi.n	80099c8 <_printf_float+0x370>
 8009954:	9b08      	ldr	r3, [sp, #32]
 8009956:	9a04      	ldr	r2, [sp, #16]
 8009958:	9907      	ldr	r1, [sp, #28]
 800995a:	1a9a      	subs	r2, r3, r2
 800995c:	eba3 0901 	sub.w	r9, r3, r1
 8009960:	4591      	cmp	r9, r2
 8009962:	bfa8      	it	ge
 8009964:	4691      	movge	r9, r2
 8009966:	f1b9 0f00 	cmp.w	r9, #0
 800996a:	dc35      	bgt.n	80099d8 <_printf_float+0x380>
 800996c:	f04f 0800 	mov.w	r8, #0
 8009970:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009974:	f104 0a1a 	add.w	sl, r4, #26
 8009978:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800997c:	1a9b      	subs	r3, r3, r2
 800997e:	eba3 0309 	sub.w	r3, r3, r9
 8009982:	4543      	cmp	r3, r8
 8009984:	f77f af75 	ble.w	8009872 <_printf_float+0x21a>
 8009988:	2301      	movs	r3, #1
 800998a:	4652      	mov	r2, sl
 800998c:	4631      	mov	r1, r6
 800998e:	4628      	mov	r0, r5
 8009990:	47b8      	blx	r7
 8009992:	3001      	adds	r0, #1
 8009994:	f43f aeae 	beq.w	80096f4 <_printf_float+0x9c>
 8009998:	f108 0801 	add.w	r8, r8, #1
 800999c:	e7ec      	b.n	8009978 <_printf_float+0x320>
 800999e:	4613      	mov	r3, r2
 80099a0:	4631      	mov	r1, r6
 80099a2:	4642      	mov	r2, r8
 80099a4:	4628      	mov	r0, r5
 80099a6:	47b8      	blx	r7
 80099a8:	3001      	adds	r0, #1
 80099aa:	d1bf      	bne.n	800992c <_printf_float+0x2d4>
 80099ac:	e6a2      	b.n	80096f4 <_printf_float+0x9c>
 80099ae:	2301      	movs	r3, #1
 80099b0:	4631      	mov	r1, r6
 80099b2:	4628      	mov	r0, r5
 80099b4:	9204      	str	r2, [sp, #16]
 80099b6:	47b8      	blx	r7
 80099b8:	3001      	adds	r0, #1
 80099ba:	f43f ae9b 	beq.w	80096f4 <_printf_float+0x9c>
 80099be:	9b05      	ldr	r3, [sp, #20]
 80099c0:	9a04      	ldr	r2, [sp, #16]
 80099c2:	3301      	adds	r3, #1
 80099c4:	9305      	str	r3, [sp, #20]
 80099c6:	e7b7      	b.n	8009938 <_printf_float+0x2e0>
 80099c8:	4653      	mov	r3, sl
 80099ca:	465a      	mov	r2, fp
 80099cc:	4631      	mov	r1, r6
 80099ce:	4628      	mov	r0, r5
 80099d0:	47b8      	blx	r7
 80099d2:	3001      	adds	r0, #1
 80099d4:	d1be      	bne.n	8009954 <_printf_float+0x2fc>
 80099d6:	e68d      	b.n	80096f4 <_printf_float+0x9c>
 80099d8:	9a04      	ldr	r2, [sp, #16]
 80099da:	464b      	mov	r3, r9
 80099dc:	4442      	add	r2, r8
 80099de:	4631      	mov	r1, r6
 80099e0:	4628      	mov	r0, r5
 80099e2:	47b8      	blx	r7
 80099e4:	3001      	adds	r0, #1
 80099e6:	d1c1      	bne.n	800996c <_printf_float+0x314>
 80099e8:	e684      	b.n	80096f4 <_printf_float+0x9c>
 80099ea:	9a08      	ldr	r2, [sp, #32]
 80099ec:	2a01      	cmp	r2, #1
 80099ee:	dc01      	bgt.n	80099f4 <_printf_float+0x39c>
 80099f0:	07db      	lsls	r3, r3, #31
 80099f2:	d537      	bpl.n	8009a64 <_printf_float+0x40c>
 80099f4:	2301      	movs	r3, #1
 80099f6:	4642      	mov	r2, r8
 80099f8:	4631      	mov	r1, r6
 80099fa:	4628      	mov	r0, r5
 80099fc:	47b8      	blx	r7
 80099fe:	3001      	adds	r0, #1
 8009a00:	f43f ae78 	beq.w	80096f4 <_printf_float+0x9c>
 8009a04:	4653      	mov	r3, sl
 8009a06:	465a      	mov	r2, fp
 8009a08:	4631      	mov	r1, r6
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	47b8      	blx	r7
 8009a0e:	3001      	adds	r0, #1
 8009a10:	f43f ae70 	beq.w	80096f4 <_printf_float+0x9c>
 8009a14:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009a18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a20:	d01b      	beq.n	8009a5a <_printf_float+0x402>
 8009a22:	9b08      	ldr	r3, [sp, #32]
 8009a24:	f108 0201 	add.w	r2, r8, #1
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	4631      	mov	r1, r6
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	47b8      	blx	r7
 8009a30:	3001      	adds	r0, #1
 8009a32:	d10e      	bne.n	8009a52 <_printf_float+0x3fa>
 8009a34:	e65e      	b.n	80096f4 <_printf_float+0x9c>
 8009a36:	2301      	movs	r3, #1
 8009a38:	464a      	mov	r2, r9
 8009a3a:	4631      	mov	r1, r6
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	47b8      	blx	r7
 8009a40:	3001      	adds	r0, #1
 8009a42:	f43f ae57 	beq.w	80096f4 <_printf_float+0x9c>
 8009a46:	f108 0801 	add.w	r8, r8, #1
 8009a4a:	9b08      	ldr	r3, [sp, #32]
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	4543      	cmp	r3, r8
 8009a50:	dcf1      	bgt.n	8009a36 <_printf_float+0x3de>
 8009a52:	9b04      	ldr	r3, [sp, #16]
 8009a54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a58:	e6db      	b.n	8009812 <_printf_float+0x1ba>
 8009a5a:	f04f 0800 	mov.w	r8, #0
 8009a5e:	f104 091a 	add.w	r9, r4, #26
 8009a62:	e7f2      	b.n	8009a4a <_printf_float+0x3f2>
 8009a64:	2301      	movs	r3, #1
 8009a66:	4642      	mov	r2, r8
 8009a68:	e7df      	b.n	8009a2a <_printf_float+0x3d2>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	464a      	mov	r2, r9
 8009a6e:	4631      	mov	r1, r6
 8009a70:	4628      	mov	r0, r5
 8009a72:	47b8      	blx	r7
 8009a74:	3001      	adds	r0, #1
 8009a76:	f43f ae3d 	beq.w	80096f4 <_printf_float+0x9c>
 8009a7a:	f108 0801 	add.w	r8, r8, #1
 8009a7e:	68e3      	ldr	r3, [r4, #12]
 8009a80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a82:	1a5b      	subs	r3, r3, r1
 8009a84:	4543      	cmp	r3, r8
 8009a86:	dcf0      	bgt.n	8009a6a <_printf_float+0x412>
 8009a88:	e6f7      	b.n	800987a <_printf_float+0x222>
 8009a8a:	f04f 0800 	mov.w	r8, #0
 8009a8e:	f104 0919 	add.w	r9, r4, #25
 8009a92:	e7f4      	b.n	8009a7e <_printf_float+0x426>

08009a94 <_printf_common>:
 8009a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a98:	4616      	mov	r6, r2
 8009a9a:	4699      	mov	r9, r3
 8009a9c:	688a      	ldr	r2, [r1, #8]
 8009a9e:	690b      	ldr	r3, [r1, #16]
 8009aa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	bfb8      	it	lt
 8009aa8:	4613      	movlt	r3, r2
 8009aaa:	6033      	str	r3, [r6, #0]
 8009aac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ab0:	4607      	mov	r7, r0
 8009ab2:	460c      	mov	r4, r1
 8009ab4:	b10a      	cbz	r2, 8009aba <_printf_common+0x26>
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	6033      	str	r3, [r6, #0]
 8009aba:	6823      	ldr	r3, [r4, #0]
 8009abc:	0699      	lsls	r1, r3, #26
 8009abe:	bf42      	ittt	mi
 8009ac0:	6833      	ldrmi	r3, [r6, #0]
 8009ac2:	3302      	addmi	r3, #2
 8009ac4:	6033      	strmi	r3, [r6, #0]
 8009ac6:	6825      	ldr	r5, [r4, #0]
 8009ac8:	f015 0506 	ands.w	r5, r5, #6
 8009acc:	d106      	bne.n	8009adc <_printf_common+0x48>
 8009ace:	f104 0a19 	add.w	sl, r4, #25
 8009ad2:	68e3      	ldr	r3, [r4, #12]
 8009ad4:	6832      	ldr	r2, [r6, #0]
 8009ad6:	1a9b      	subs	r3, r3, r2
 8009ad8:	42ab      	cmp	r3, r5
 8009ada:	dc26      	bgt.n	8009b2a <_printf_common+0x96>
 8009adc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ae0:	1e13      	subs	r3, r2, #0
 8009ae2:	6822      	ldr	r2, [r4, #0]
 8009ae4:	bf18      	it	ne
 8009ae6:	2301      	movne	r3, #1
 8009ae8:	0692      	lsls	r2, r2, #26
 8009aea:	d42b      	bmi.n	8009b44 <_printf_common+0xb0>
 8009aec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009af0:	4649      	mov	r1, r9
 8009af2:	4638      	mov	r0, r7
 8009af4:	47c0      	blx	r8
 8009af6:	3001      	adds	r0, #1
 8009af8:	d01e      	beq.n	8009b38 <_printf_common+0xa4>
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	68e5      	ldr	r5, [r4, #12]
 8009afe:	6832      	ldr	r2, [r6, #0]
 8009b00:	f003 0306 	and.w	r3, r3, #6
 8009b04:	2b04      	cmp	r3, #4
 8009b06:	bf08      	it	eq
 8009b08:	1aad      	subeq	r5, r5, r2
 8009b0a:	68a3      	ldr	r3, [r4, #8]
 8009b0c:	6922      	ldr	r2, [r4, #16]
 8009b0e:	bf0c      	ite	eq
 8009b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b14:	2500      	movne	r5, #0
 8009b16:	4293      	cmp	r3, r2
 8009b18:	bfc4      	itt	gt
 8009b1a:	1a9b      	subgt	r3, r3, r2
 8009b1c:	18ed      	addgt	r5, r5, r3
 8009b1e:	2600      	movs	r6, #0
 8009b20:	341a      	adds	r4, #26
 8009b22:	42b5      	cmp	r5, r6
 8009b24:	d11a      	bne.n	8009b5c <_printf_common+0xc8>
 8009b26:	2000      	movs	r0, #0
 8009b28:	e008      	b.n	8009b3c <_printf_common+0xa8>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	4652      	mov	r2, sl
 8009b2e:	4649      	mov	r1, r9
 8009b30:	4638      	mov	r0, r7
 8009b32:	47c0      	blx	r8
 8009b34:	3001      	adds	r0, #1
 8009b36:	d103      	bne.n	8009b40 <_printf_common+0xac>
 8009b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b40:	3501      	adds	r5, #1
 8009b42:	e7c6      	b.n	8009ad2 <_printf_common+0x3e>
 8009b44:	18e1      	adds	r1, r4, r3
 8009b46:	1c5a      	adds	r2, r3, #1
 8009b48:	2030      	movs	r0, #48	; 0x30
 8009b4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b4e:	4422      	add	r2, r4
 8009b50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b58:	3302      	adds	r3, #2
 8009b5a:	e7c7      	b.n	8009aec <_printf_common+0x58>
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	4622      	mov	r2, r4
 8009b60:	4649      	mov	r1, r9
 8009b62:	4638      	mov	r0, r7
 8009b64:	47c0      	blx	r8
 8009b66:	3001      	adds	r0, #1
 8009b68:	d0e6      	beq.n	8009b38 <_printf_common+0xa4>
 8009b6a:	3601      	adds	r6, #1
 8009b6c:	e7d9      	b.n	8009b22 <_printf_common+0x8e>
	...

08009b70 <_printf_i>:
 8009b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b74:	7e0f      	ldrb	r7, [r1, #24]
 8009b76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b78:	2f78      	cmp	r7, #120	; 0x78
 8009b7a:	4691      	mov	r9, r2
 8009b7c:	4680      	mov	r8, r0
 8009b7e:	460c      	mov	r4, r1
 8009b80:	469a      	mov	sl, r3
 8009b82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b86:	d807      	bhi.n	8009b98 <_printf_i+0x28>
 8009b88:	2f62      	cmp	r7, #98	; 0x62
 8009b8a:	d80a      	bhi.n	8009ba2 <_printf_i+0x32>
 8009b8c:	2f00      	cmp	r7, #0
 8009b8e:	f000 80d8 	beq.w	8009d42 <_printf_i+0x1d2>
 8009b92:	2f58      	cmp	r7, #88	; 0x58
 8009b94:	f000 80a3 	beq.w	8009cde <_printf_i+0x16e>
 8009b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ba0:	e03a      	b.n	8009c18 <_printf_i+0xa8>
 8009ba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ba6:	2b15      	cmp	r3, #21
 8009ba8:	d8f6      	bhi.n	8009b98 <_printf_i+0x28>
 8009baa:	a101      	add	r1, pc, #4	; (adr r1, 8009bb0 <_printf_i+0x40>)
 8009bac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bb0:	08009c09 	.word	0x08009c09
 8009bb4:	08009c1d 	.word	0x08009c1d
 8009bb8:	08009b99 	.word	0x08009b99
 8009bbc:	08009b99 	.word	0x08009b99
 8009bc0:	08009b99 	.word	0x08009b99
 8009bc4:	08009b99 	.word	0x08009b99
 8009bc8:	08009c1d 	.word	0x08009c1d
 8009bcc:	08009b99 	.word	0x08009b99
 8009bd0:	08009b99 	.word	0x08009b99
 8009bd4:	08009b99 	.word	0x08009b99
 8009bd8:	08009b99 	.word	0x08009b99
 8009bdc:	08009d29 	.word	0x08009d29
 8009be0:	08009c4d 	.word	0x08009c4d
 8009be4:	08009d0b 	.word	0x08009d0b
 8009be8:	08009b99 	.word	0x08009b99
 8009bec:	08009b99 	.word	0x08009b99
 8009bf0:	08009d4b 	.word	0x08009d4b
 8009bf4:	08009b99 	.word	0x08009b99
 8009bf8:	08009c4d 	.word	0x08009c4d
 8009bfc:	08009b99 	.word	0x08009b99
 8009c00:	08009b99 	.word	0x08009b99
 8009c04:	08009d13 	.word	0x08009d13
 8009c08:	682b      	ldr	r3, [r5, #0]
 8009c0a:	1d1a      	adds	r2, r3, #4
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	602a      	str	r2, [r5, #0]
 8009c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e0a3      	b.n	8009d64 <_printf_i+0x1f4>
 8009c1c:	6820      	ldr	r0, [r4, #0]
 8009c1e:	6829      	ldr	r1, [r5, #0]
 8009c20:	0606      	lsls	r6, r0, #24
 8009c22:	f101 0304 	add.w	r3, r1, #4
 8009c26:	d50a      	bpl.n	8009c3e <_printf_i+0xce>
 8009c28:	680e      	ldr	r6, [r1, #0]
 8009c2a:	602b      	str	r3, [r5, #0]
 8009c2c:	2e00      	cmp	r6, #0
 8009c2e:	da03      	bge.n	8009c38 <_printf_i+0xc8>
 8009c30:	232d      	movs	r3, #45	; 0x2d
 8009c32:	4276      	negs	r6, r6
 8009c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c38:	485e      	ldr	r0, [pc, #376]	; (8009db4 <_printf_i+0x244>)
 8009c3a:	230a      	movs	r3, #10
 8009c3c:	e019      	b.n	8009c72 <_printf_i+0x102>
 8009c3e:	680e      	ldr	r6, [r1, #0]
 8009c40:	602b      	str	r3, [r5, #0]
 8009c42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c46:	bf18      	it	ne
 8009c48:	b236      	sxthne	r6, r6
 8009c4a:	e7ef      	b.n	8009c2c <_printf_i+0xbc>
 8009c4c:	682b      	ldr	r3, [r5, #0]
 8009c4e:	6820      	ldr	r0, [r4, #0]
 8009c50:	1d19      	adds	r1, r3, #4
 8009c52:	6029      	str	r1, [r5, #0]
 8009c54:	0601      	lsls	r1, r0, #24
 8009c56:	d501      	bpl.n	8009c5c <_printf_i+0xec>
 8009c58:	681e      	ldr	r6, [r3, #0]
 8009c5a:	e002      	b.n	8009c62 <_printf_i+0xf2>
 8009c5c:	0646      	lsls	r6, r0, #25
 8009c5e:	d5fb      	bpl.n	8009c58 <_printf_i+0xe8>
 8009c60:	881e      	ldrh	r6, [r3, #0]
 8009c62:	4854      	ldr	r0, [pc, #336]	; (8009db4 <_printf_i+0x244>)
 8009c64:	2f6f      	cmp	r7, #111	; 0x6f
 8009c66:	bf0c      	ite	eq
 8009c68:	2308      	moveq	r3, #8
 8009c6a:	230a      	movne	r3, #10
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c72:	6865      	ldr	r5, [r4, #4]
 8009c74:	60a5      	str	r5, [r4, #8]
 8009c76:	2d00      	cmp	r5, #0
 8009c78:	bfa2      	ittt	ge
 8009c7a:	6821      	ldrge	r1, [r4, #0]
 8009c7c:	f021 0104 	bicge.w	r1, r1, #4
 8009c80:	6021      	strge	r1, [r4, #0]
 8009c82:	b90e      	cbnz	r6, 8009c88 <_printf_i+0x118>
 8009c84:	2d00      	cmp	r5, #0
 8009c86:	d04d      	beq.n	8009d24 <_printf_i+0x1b4>
 8009c88:	4615      	mov	r5, r2
 8009c8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c8e:	fb03 6711 	mls	r7, r3, r1, r6
 8009c92:	5dc7      	ldrb	r7, [r0, r7]
 8009c94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c98:	4637      	mov	r7, r6
 8009c9a:	42bb      	cmp	r3, r7
 8009c9c:	460e      	mov	r6, r1
 8009c9e:	d9f4      	bls.n	8009c8a <_printf_i+0x11a>
 8009ca0:	2b08      	cmp	r3, #8
 8009ca2:	d10b      	bne.n	8009cbc <_printf_i+0x14c>
 8009ca4:	6823      	ldr	r3, [r4, #0]
 8009ca6:	07de      	lsls	r6, r3, #31
 8009ca8:	d508      	bpl.n	8009cbc <_printf_i+0x14c>
 8009caa:	6923      	ldr	r3, [r4, #16]
 8009cac:	6861      	ldr	r1, [r4, #4]
 8009cae:	4299      	cmp	r1, r3
 8009cb0:	bfde      	ittt	le
 8009cb2:	2330      	movle	r3, #48	; 0x30
 8009cb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cb8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009cbc:	1b52      	subs	r2, r2, r5
 8009cbe:	6122      	str	r2, [r4, #16]
 8009cc0:	f8cd a000 	str.w	sl, [sp]
 8009cc4:	464b      	mov	r3, r9
 8009cc6:	aa03      	add	r2, sp, #12
 8009cc8:	4621      	mov	r1, r4
 8009cca:	4640      	mov	r0, r8
 8009ccc:	f7ff fee2 	bl	8009a94 <_printf_common>
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	d14c      	bne.n	8009d6e <_printf_i+0x1fe>
 8009cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cd8:	b004      	add	sp, #16
 8009cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cde:	4835      	ldr	r0, [pc, #212]	; (8009db4 <_printf_i+0x244>)
 8009ce0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009ce4:	6829      	ldr	r1, [r5, #0]
 8009ce6:	6823      	ldr	r3, [r4, #0]
 8009ce8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009cec:	6029      	str	r1, [r5, #0]
 8009cee:	061d      	lsls	r5, r3, #24
 8009cf0:	d514      	bpl.n	8009d1c <_printf_i+0x1ac>
 8009cf2:	07df      	lsls	r7, r3, #31
 8009cf4:	bf44      	itt	mi
 8009cf6:	f043 0320 	orrmi.w	r3, r3, #32
 8009cfa:	6023      	strmi	r3, [r4, #0]
 8009cfc:	b91e      	cbnz	r6, 8009d06 <_printf_i+0x196>
 8009cfe:	6823      	ldr	r3, [r4, #0]
 8009d00:	f023 0320 	bic.w	r3, r3, #32
 8009d04:	6023      	str	r3, [r4, #0]
 8009d06:	2310      	movs	r3, #16
 8009d08:	e7b0      	b.n	8009c6c <_printf_i+0xfc>
 8009d0a:	6823      	ldr	r3, [r4, #0]
 8009d0c:	f043 0320 	orr.w	r3, r3, #32
 8009d10:	6023      	str	r3, [r4, #0]
 8009d12:	2378      	movs	r3, #120	; 0x78
 8009d14:	4828      	ldr	r0, [pc, #160]	; (8009db8 <_printf_i+0x248>)
 8009d16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d1a:	e7e3      	b.n	8009ce4 <_printf_i+0x174>
 8009d1c:	0659      	lsls	r1, r3, #25
 8009d1e:	bf48      	it	mi
 8009d20:	b2b6      	uxthmi	r6, r6
 8009d22:	e7e6      	b.n	8009cf2 <_printf_i+0x182>
 8009d24:	4615      	mov	r5, r2
 8009d26:	e7bb      	b.n	8009ca0 <_printf_i+0x130>
 8009d28:	682b      	ldr	r3, [r5, #0]
 8009d2a:	6826      	ldr	r6, [r4, #0]
 8009d2c:	6961      	ldr	r1, [r4, #20]
 8009d2e:	1d18      	adds	r0, r3, #4
 8009d30:	6028      	str	r0, [r5, #0]
 8009d32:	0635      	lsls	r5, r6, #24
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	d501      	bpl.n	8009d3c <_printf_i+0x1cc>
 8009d38:	6019      	str	r1, [r3, #0]
 8009d3a:	e002      	b.n	8009d42 <_printf_i+0x1d2>
 8009d3c:	0670      	lsls	r0, r6, #25
 8009d3e:	d5fb      	bpl.n	8009d38 <_printf_i+0x1c8>
 8009d40:	8019      	strh	r1, [r3, #0]
 8009d42:	2300      	movs	r3, #0
 8009d44:	6123      	str	r3, [r4, #16]
 8009d46:	4615      	mov	r5, r2
 8009d48:	e7ba      	b.n	8009cc0 <_printf_i+0x150>
 8009d4a:	682b      	ldr	r3, [r5, #0]
 8009d4c:	1d1a      	adds	r2, r3, #4
 8009d4e:	602a      	str	r2, [r5, #0]
 8009d50:	681d      	ldr	r5, [r3, #0]
 8009d52:	6862      	ldr	r2, [r4, #4]
 8009d54:	2100      	movs	r1, #0
 8009d56:	4628      	mov	r0, r5
 8009d58:	f7f6 fae2 	bl	8000320 <memchr>
 8009d5c:	b108      	cbz	r0, 8009d62 <_printf_i+0x1f2>
 8009d5e:	1b40      	subs	r0, r0, r5
 8009d60:	6060      	str	r0, [r4, #4]
 8009d62:	6863      	ldr	r3, [r4, #4]
 8009d64:	6123      	str	r3, [r4, #16]
 8009d66:	2300      	movs	r3, #0
 8009d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d6c:	e7a8      	b.n	8009cc0 <_printf_i+0x150>
 8009d6e:	6923      	ldr	r3, [r4, #16]
 8009d70:	462a      	mov	r2, r5
 8009d72:	4649      	mov	r1, r9
 8009d74:	4640      	mov	r0, r8
 8009d76:	47d0      	blx	sl
 8009d78:	3001      	adds	r0, #1
 8009d7a:	d0ab      	beq.n	8009cd4 <_printf_i+0x164>
 8009d7c:	6823      	ldr	r3, [r4, #0]
 8009d7e:	079b      	lsls	r3, r3, #30
 8009d80:	d413      	bmi.n	8009daa <_printf_i+0x23a>
 8009d82:	68e0      	ldr	r0, [r4, #12]
 8009d84:	9b03      	ldr	r3, [sp, #12]
 8009d86:	4298      	cmp	r0, r3
 8009d88:	bfb8      	it	lt
 8009d8a:	4618      	movlt	r0, r3
 8009d8c:	e7a4      	b.n	8009cd8 <_printf_i+0x168>
 8009d8e:	2301      	movs	r3, #1
 8009d90:	4632      	mov	r2, r6
 8009d92:	4649      	mov	r1, r9
 8009d94:	4640      	mov	r0, r8
 8009d96:	47d0      	blx	sl
 8009d98:	3001      	adds	r0, #1
 8009d9a:	d09b      	beq.n	8009cd4 <_printf_i+0x164>
 8009d9c:	3501      	adds	r5, #1
 8009d9e:	68e3      	ldr	r3, [r4, #12]
 8009da0:	9903      	ldr	r1, [sp, #12]
 8009da2:	1a5b      	subs	r3, r3, r1
 8009da4:	42ab      	cmp	r3, r5
 8009da6:	dcf2      	bgt.n	8009d8e <_printf_i+0x21e>
 8009da8:	e7eb      	b.n	8009d82 <_printf_i+0x212>
 8009daa:	2500      	movs	r5, #0
 8009dac:	f104 0619 	add.w	r6, r4, #25
 8009db0:	e7f5      	b.n	8009d9e <_printf_i+0x22e>
 8009db2:	bf00      	nop
 8009db4:	0800c3b2 	.word	0x0800c3b2
 8009db8:	0800c3c3 	.word	0x0800c3c3

08009dbc <siprintf>:
 8009dbc:	b40e      	push	{r1, r2, r3}
 8009dbe:	b500      	push	{lr}
 8009dc0:	b09c      	sub	sp, #112	; 0x70
 8009dc2:	ab1d      	add	r3, sp, #116	; 0x74
 8009dc4:	9002      	str	r0, [sp, #8]
 8009dc6:	9006      	str	r0, [sp, #24]
 8009dc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009dcc:	4809      	ldr	r0, [pc, #36]	; (8009df4 <siprintf+0x38>)
 8009dce:	9107      	str	r1, [sp, #28]
 8009dd0:	9104      	str	r1, [sp, #16]
 8009dd2:	4909      	ldr	r1, [pc, #36]	; (8009df8 <siprintf+0x3c>)
 8009dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dd8:	9105      	str	r1, [sp, #20]
 8009dda:	6800      	ldr	r0, [r0, #0]
 8009ddc:	9301      	str	r3, [sp, #4]
 8009dde:	a902      	add	r1, sp, #8
 8009de0:	f001 faf8 	bl	800b3d4 <_svfiprintf_r>
 8009de4:	9b02      	ldr	r3, [sp, #8]
 8009de6:	2200      	movs	r2, #0
 8009de8:	701a      	strb	r2, [r3, #0]
 8009dea:	b01c      	add	sp, #112	; 0x70
 8009dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8009df0:	b003      	add	sp, #12
 8009df2:	4770      	bx	lr
 8009df4:	24000014 	.word	0x24000014
 8009df8:	ffff0208 	.word	0xffff0208

08009dfc <quorem>:
 8009dfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e00:	6903      	ldr	r3, [r0, #16]
 8009e02:	690c      	ldr	r4, [r1, #16]
 8009e04:	42a3      	cmp	r3, r4
 8009e06:	4607      	mov	r7, r0
 8009e08:	f2c0 8081 	blt.w	8009f0e <quorem+0x112>
 8009e0c:	3c01      	subs	r4, #1
 8009e0e:	f101 0814 	add.w	r8, r1, #20
 8009e12:	f100 0514 	add.w	r5, r0, #20
 8009e16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e1a:	9301      	str	r3, [sp, #4]
 8009e1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e24:	3301      	adds	r3, #1
 8009e26:	429a      	cmp	r2, r3
 8009e28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e30:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e34:	d331      	bcc.n	8009e9a <quorem+0x9e>
 8009e36:	f04f 0e00 	mov.w	lr, #0
 8009e3a:	4640      	mov	r0, r8
 8009e3c:	46ac      	mov	ip, r5
 8009e3e:	46f2      	mov	sl, lr
 8009e40:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e44:	b293      	uxth	r3, r2
 8009e46:	fb06 e303 	mla	r3, r6, r3, lr
 8009e4a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	ebaa 0303 	sub.w	r3, sl, r3
 8009e54:	f8dc a000 	ldr.w	sl, [ip]
 8009e58:	0c12      	lsrs	r2, r2, #16
 8009e5a:	fa13 f38a 	uxtah	r3, r3, sl
 8009e5e:	fb06 e202 	mla	r2, r6, r2, lr
 8009e62:	9300      	str	r3, [sp, #0]
 8009e64:	9b00      	ldr	r3, [sp, #0]
 8009e66:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e6a:	b292      	uxth	r2, r2
 8009e6c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009e70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e74:	f8bd 3000 	ldrh.w	r3, [sp]
 8009e78:	4581      	cmp	r9, r0
 8009e7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e7e:	f84c 3b04 	str.w	r3, [ip], #4
 8009e82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009e86:	d2db      	bcs.n	8009e40 <quorem+0x44>
 8009e88:	f855 300b 	ldr.w	r3, [r5, fp]
 8009e8c:	b92b      	cbnz	r3, 8009e9a <quorem+0x9e>
 8009e8e:	9b01      	ldr	r3, [sp, #4]
 8009e90:	3b04      	subs	r3, #4
 8009e92:	429d      	cmp	r5, r3
 8009e94:	461a      	mov	r2, r3
 8009e96:	d32e      	bcc.n	8009ef6 <quorem+0xfa>
 8009e98:	613c      	str	r4, [r7, #16]
 8009e9a:	4638      	mov	r0, r7
 8009e9c:	f001 f846 	bl	800af2c <__mcmp>
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	db24      	blt.n	8009eee <quorem+0xf2>
 8009ea4:	3601      	adds	r6, #1
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	f04f 0c00 	mov.w	ip, #0
 8009eac:	f858 2b04 	ldr.w	r2, [r8], #4
 8009eb0:	f8d0 e000 	ldr.w	lr, [r0]
 8009eb4:	b293      	uxth	r3, r2
 8009eb6:	ebac 0303 	sub.w	r3, ip, r3
 8009eba:	0c12      	lsrs	r2, r2, #16
 8009ebc:	fa13 f38e 	uxtah	r3, r3, lr
 8009ec0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009ec4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ece:	45c1      	cmp	r9, r8
 8009ed0:	f840 3b04 	str.w	r3, [r0], #4
 8009ed4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009ed8:	d2e8      	bcs.n	8009eac <quorem+0xb0>
 8009eda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ede:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ee2:	b922      	cbnz	r2, 8009eee <quorem+0xf2>
 8009ee4:	3b04      	subs	r3, #4
 8009ee6:	429d      	cmp	r5, r3
 8009ee8:	461a      	mov	r2, r3
 8009eea:	d30a      	bcc.n	8009f02 <quorem+0x106>
 8009eec:	613c      	str	r4, [r7, #16]
 8009eee:	4630      	mov	r0, r6
 8009ef0:	b003      	add	sp, #12
 8009ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ef6:	6812      	ldr	r2, [r2, #0]
 8009ef8:	3b04      	subs	r3, #4
 8009efa:	2a00      	cmp	r2, #0
 8009efc:	d1cc      	bne.n	8009e98 <quorem+0x9c>
 8009efe:	3c01      	subs	r4, #1
 8009f00:	e7c7      	b.n	8009e92 <quorem+0x96>
 8009f02:	6812      	ldr	r2, [r2, #0]
 8009f04:	3b04      	subs	r3, #4
 8009f06:	2a00      	cmp	r2, #0
 8009f08:	d1f0      	bne.n	8009eec <quorem+0xf0>
 8009f0a:	3c01      	subs	r4, #1
 8009f0c:	e7eb      	b.n	8009ee6 <quorem+0xea>
 8009f0e:	2000      	movs	r0, #0
 8009f10:	e7ee      	b.n	8009ef0 <quorem+0xf4>
 8009f12:	0000      	movs	r0, r0
 8009f14:	0000      	movs	r0, r0
	...

08009f18 <_dtoa_r>:
 8009f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f1c:	ed2d 8b02 	vpush	{d8}
 8009f20:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f22:	b091      	sub	sp, #68	; 0x44
 8009f24:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009f28:	ec59 8b10 	vmov	r8, r9, d0
 8009f2c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8009f2e:	9106      	str	r1, [sp, #24]
 8009f30:	4606      	mov	r6, r0
 8009f32:	9208      	str	r2, [sp, #32]
 8009f34:	930c      	str	r3, [sp, #48]	; 0x30
 8009f36:	b975      	cbnz	r5, 8009f56 <_dtoa_r+0x3e>
 8009f38:	2010      	movs	r0, #16
 8009f3a:	f000 fd5f 	bl	800a9fc <malloc>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	6270      	str	r0, [r6, #36]	; 0x24
 8009f42:	b920      	cbnz	r0, 8009f4e <_dtoa_r+0x36>
 8009f44:	4baa      	ldr	r3, [pc, #680]	; (800a1f0 <_dtoa_r+0x2d8>)
 8009f46:	21ea      	movs	r1, #234	; 0xea
 8009f48:	48aa      	ldr	r0, [pc, #680]	; (800a1f4 <_dtoa_r+0x2dc>)
 8009f4a:	f001 fb53 	bl	800b5f4 <__assert_func>
 8009f4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f52:	6005      	str	r5, [r0, #0]
 8009f54:	60c5      	str	r5, [r0, #12]
 8009f56:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009f58:	6819      	ldr	r1, [r3, #0]
 8009f5a:	b151      	cbz	r1, 8009f72 <_dtoa_r+0x5a>
 8009f5c:	685a      	ldr	r2, [r3, #4]
 8009f5e:	604a      	str	r2, [r1, #4]
 8009f60:	2301      	movs	r3, #1
 8009f62:	4093      	lsls	r3, r2
 8009f64:	608b      	str	r3, [r1, #8]
 8009f66:	4630      	mov	r0, r6
 8009f68:	f000 fd9e 	bl	800aaa8 <_Bfree>
 8009f6c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009f6e:	2200      	movs	r2, #0
 8009f70:	601a      	str	r2, [r3, #0]
 8009f72:	f1b9 0300 	subs.w	r3, r9, #0
 8009f76:	bfbb      	ittet	lt
 8009f78:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009f7c:	9303      	strlt	r3, [sp, #12]
 8009f7e:	2300      	movge	r3, #0
 8009f80:	2201      	movlt	r2, #1
 8009f82:	bfac      	ite	ge
 8009f84:	6023      	strge	r3, [r4, #0]
 8009f86:	6022      	strlt	r2, [r4, #0]
 8009f88:	4b9b      	ldr	r3, [pc, #620]	; (800a1f8 <_dtoa_r+0x2e0>)
 8009f8a:	9c03      	ldr	r4, [sp, #12]
 8009f8c:	43a3      	bics	r3, r4
 8009f8e:	d11c      	bne.n	8009fca <_dtoa_r+0xb2>
 8009f90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f92:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f96:	6013      	str	r3, [r2, #0]
 8009f98:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009f9c:	ea53 0308 	orrs.w	r3, r3, r8
 8009fa0:	f000 84fd 	beq.w	800a99e <_dtoa_r+0xa86>
 8009fa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009fa6:	b963      	cbnz	r3, 8009fc2 <_dtoa_r+0xaa>
 8009fa8:	4b94      	ldr	r3, [pc, #592]	; (800a1fc <_dtoa_r+0x2e4>)
 8009faa:	e01f      	b.n	8009fec <_dtoa_r+0xd4>
 8009fac:	4b94      	ldr	r3, [pc, #592]	; (800a200 <_dtoa_r+0x2e8>)
 8009fae:	9301      	str	r3, [sp, #4]
 8009fb0:	3308      	adds	r3, #8
 8009fb2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009fb4:	6013      	str	r3, [r2, #0]
 8009fb6:	9801      	ldr	r0, [sp, #4]
 8009fb8:	b011      	add	sp, #68	; 0x44
 8009fba:	ecbd 8b02 	vpop	{d8}
 8009fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fc2:	4b8e      	ldr	r3, [pc, #568]	; (800a1fc <_dtoa_r+0x2e4>)
 8009fc4:	9301      	str	r3, [sp, #4]
 8009fc6:	3303      	adds	r3, #3
 8009fc8:	e7f3      	b.n	8009fb2 <_dtoa_r+0x9a>
 8009fca:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009fce:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fd6:	d10b      	bne.n	8009ff0 <_dtoa_r+0xd8>
 8009fd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fda:	2301      	movs	r3, #1
 8009fdc:	6013      	str	r3, [r2, #0]
 8009fde:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	f000 84d9 	beq.w	800a998 <_dtoa_r+0xa80>
 8009fe6:	4887      	ldr	r0, [pc, #540]	; (800a204 <_dtoa_r+0x2ec>)
 8009fe8:	6018      	str	r0, [r3, #0]
 8009fea:	1e43      	subs	r3, r0, #1
 8009fec:	9301      	str	r3, [sp, #4]
 8009fee:	e7e2      	b.n	8009fb6 <_dtoa_r+0x9e>
 8009ff0:	a90f      	add	r1, sp, #60	; 0x3c
 8009ff2:	aa0e      	add	r2, sp, #56	; 0x38
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	eeb0 0b48 	vmov.f64	d0, d8
 8009ffa:	f001 f83d 	bl	800b078 <__d2b>
 8009ffe:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800a002:	4605      	mov	r5, r0
 800a004:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a006:	2900      	cmp	r1, #0
 800a008:	d046      	beq.n	800a098 <_dtoa_r+0x180>
 800a00a:	ee18 4a90 	vmov	r4, s17
 800a00e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a012:	ec53 2b18 	vmov	r2, r3, d8
 800a016:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800a01a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a01e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a022:	2400      	movs	r4, #0
 800a024:	ec43 2b16 	vmov	d6, r2, r3
 800a028:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a02c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a1d8 <_dtoa_r+0x2c0>
 800a030:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a034:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800a1e0 <_dtoa_r+0x2c8>
 800a038:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a03c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a1e8 <_dtoa_r+0x2d0>
 800a040:	ee07 1a90 	vmov	s15, r1
 800a044:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a048:	eeb0 7b46 	vmov.f64	d7, d6
 800a04c:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a050:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a054:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a05c:	ee16 ba90 	vmov	fp, s13
 800a060:	940a      	str	r4, [sp, #40]	; 0x28
 800a062:	d508      	bpl.n	800a076 <_dtoa_r+0x15e>
 800a064:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a068:	eeb4 6b47 	vcmp.f64	d6, d7
 800a06c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a070:	bf18      	it	ne
 800a072:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800a076:	f1bb 0f16 	cmp.w	fp, #22
 800a07a:	d82f      	bhi.n	800a0dc <_dtoa_r+0x1c4>
 800a07c:	4b62      	ldr	r3, [pc, #392]	; (800a208 <_dtoa_r+0x2f0>)
 800a07e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a082:	ed93 7b00 	vldr	d7, [r3]
 800a086:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a08a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a08e:	d501      	bpl.n	800a094 <_dtoa_r+0x17c>
 800a090:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a094:	2300      	movs	r3, #0
 800a096:	e022      	b.n	800a0de <_dtoa_r+0x1c6>
 800a098:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a09a:	4401      	add	r1, r0
 800a09c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a0a0:	2b20      	cmp	r3, #32
 800a0a2:	bfc1      	itttt	gt
 800a0a4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a0a8:	fa04 f303 	lslgt.w	r3, r4, r3
 800a0ac:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a0b0:	fa28 f804 	lsrgt.w	r8, r8, r4
 800a0b4:	bfd6      	itet	le
 800a0b6:	f1c3 0320 	rsble	r3, r3, #32
 800a0ba:	ea43 0808 	orrgt.w	r8, r3, r8
 800a0be:	fa08 f803 	lslle.w	r8, r8, r3
 800a0c2:	ee07 8a90 	vmov	s15, r8
 800a0c6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a0ca:	3901      	subs	r1, #1
 800a0cc:	ee17 4a90 	vmov	r4, s15
 800a0d0:	ec53 2b17 	vmov	r2, r3, d7
 800a0d4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800a0d8:	2401      	movs	r4, #1
 800a0da:	e7a3      	b.n	800a024 <_dtoa_r+0x10c>
 800a0dc:	2301      	movs	r3, #1
 800a0de:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0e0:	1a43      	subs	r3, r0, r1
 800a0e2:	1e5a      	subs	r2, r3, #1
 800a0e4:	bf45      	ittet	mi
 800a0e6:	f1c3 0301 	rsbmi	r3, r3, #1
 800a0ea:	9304      	strmi	r3, [sp, #16]
 800a0ec:	2300      	movpl	r3, #0
 800a0ee:	2300      	movmi	r3, #0
 800a0f0:	9205      	str	r2, [sp, #20]
 800a0f2:	bf54      	ite	pl
 800a0f4:	9304      	strpl	r3, [sp, #16]
 800a0f6:	9305      	strmi	r3, [sp, #20]
 800a0f8:	f1bb 0f00 	cmp.w	fp, #0
 800a0fc:	db18      	blt.n	800a130 <_dtoa_r+0x218>
 800a0fe:	9b05      	ldr	r3, [sp, #20]
 800a100:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800a104:	445b      	add	r3, fp
 800a106:	9305      	str	r3, [sp, #20]
 800a108:	2300      	movs	r3, #0
 800a10a:	9a06      	ldr	r2, [sp, #24]
 800a10c:	2a09      	cmp	r2, #9
 800a10e:	d849      	bhi.n	800a1a4 <_dtoa_r+0x28c>
 800a110:	2a05      	cmp	r2, #5
 800a112:	bfc4      	itt	gt
 800a114:	3a04      	subgt	r2, #4
 800a116:	9206      	strgt	r2, [sp, #24]
 800a118:	9a06      	ldr	r2, [sp, #24]
 800a11a:	f1a2 0202 	sub.w	r2, r2, #2
 800a11e:	bfcc      	ite	gt
 800a120:	2400      	movgt	r4, #0
 800a122:	2401      	movle	r4, #1
 800a124:	2a03      	cmp	r2, #3
 800a126:	d848      	bhi.n	800a1ba <_dtoa_r+0x2a2>
 800a128:	e8df f002 	tbb	[pc, r2]
 800a12c:	3a2c2e0b 	.word	0x3a2c2e0b
 800a130:	9b04      	ldr	r3, [sp, #16]
 800a132:	2200      	movs	r2, #0
 800a134:	eba3 030b 	sub.w	r3, r3, fp
 800a138:	9304      	str	r3, [sp, #16]
 800a13a:	9209      	str	r2, [sp, #36]	; 0x24
 800a13c:	f1cb 0300 	rsb	r3, fp, #0
 800a140:	e7e3      	b.n	800a10a <_dtoa_r+0x1f2>
 800a142:	2200      	movs	r2, #0
 800a144:	9207      	str	r2, [sp, #28]
 800a146:	9a08      	ldr	r2, [sp, #32]
 800a148:	2a00      	cmp	r2, #0
 800a14a:	dc39      	bgt.n	800a1c0 <_dtoa_r+0x2a8>
 800a14c:	f04f 0a01 	mov.w	sl, #1
 800a150:	46d1      	mov	r9, sl
 800a152:	4652      	mov	r2, sl
 800a154:	f8cd a020 	str.w	sl, [sp, #32]
 800a158:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800a15a:	2100      	movs	r1, #0
 800a15c:	6079      	str	r1, [r7, #4]
 800a15e:	2004      	movs	r0, #4
 800a160:	f100 0c14 	add.w	ip, r0, #20
 800a164:	4594      	cmp	ip, r2
 800a166:	6879      	ldr	r1, [r7, #4]
 800a168:	d92f      	bls.n	800a1ca <_dtoa_r+0x2b2>
 800a16a:	4630      	mov	r0, r6
 800a16c:	930d      	str	r3, [sp, #52]	; 0x34
 800a16e:	f000 fc5b 	bl	800aa28 <_Balloc>
 800a172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a174:	9001      	str	r0, [sp, #4]
 800a176:	4602      	mov	r2, r0
 800a178:	2800      	cmp	r0, #0
 800a17a:	d149      	bne.n	800a210 <_dtoa_r+0x2f8>
 800a17c:	4b23      	ldr	r3, [pc, #140]	; (800a20c <_dtoa_r+0x2f4>)
 800a17e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a182:	e6e1      	b.n	8009f48 <_dtoa_r+0x30>
 800a184:	2201      	movs	r2, #1
 800a186:	e7dd      	b.n	800a144 <_dtoa_r+0x22c>
 800a188:	2200      	movs	r2, #0
 800a18a:	9207      	str	r2, [sp, #28]
 800a18c:	9a08      	ldr	r2, [sp, #32]
 800a18e:	eb0b 0a02 	add.w	sl, fp, r2
 800a192:	f10a 0901 	add.w	r9, sl, #1
 800a196:	464a      	mov	r2, r9
 800a198:	2a01      	cmp	r2, #1
 800a19a:	bfb8      	it	lt
 800a19c:	2201      	movlt	r2, #1
 800a19e:	e7db      	b.n	800a158 <_dtoa_r+0x240>
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	e7f2      	b.n	800a18a <_dtoa_r+0x272>
 800a1a4:	2401      	movs	r4, #1
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a1ac:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	46d1      	mov	r9, sl
 800a1b4:	2212      	movs	r2, #18
 800a1b6:	9108      	str	r1, [sp, #32]
 800a1b8:	e7ce      	b.n	800a158 <_dtoa_r+0x240>
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	9207      	str	r2, [sp, #28]
 800a1be:	e7f5      	b.n	800a1ac <_dtoa_r+0x294>
 800a1c0:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a1c4:	46d1      	mov	r9, sl
 800a1c6:	4652      	mov	r2, sl
 800a1c8:	e7c6      	b.n	800a158 <_dtoa_r+0x240>
 800a1ca:	3101      	adds	r1, #1
 800a1cc:	6079      	str	r1, [r7, #4]
 800a1ce:	0040      	lsls	r0, r0, #1
 800a1d0:	e7c6      	b.n	800a160 <_dtoa_r+0x248>
 800a1d2:	bf00      	nop
 800a1d4:	f3af 8000 	nop.w
 800a1d8:	636f4361 	.word	0x636f4361
 800a1dc:	3fd287a7 	.word	0x3fd287a7
 800a1e0:	8b60c8b3 	.word	0x8b60c8b3
 800a1e4:	3fc68a28 	.word	0x3fc68a28
 800a1e8:	509f79fb 	.word	0x509f79fb
 800a1ec:	3fd34413 	.word	0x3fd34413
 800a1f0:	0800c3e1 	.word	0x0800c3e1
 800a1f4:	0800c3f8 	.word	0x0800c3f8
 800a1f8:	7ff00000 	.word	0x7ff00000
 800a1fc:	0800c3dd 	.word	0x0800c3dd
 800a200:	0800c3d4 	.word	0x0800c3d4
 800a204:	0800c3b1 	.word	0x0800c3b1
 800a208:	0800c4e8 	.word	0x0800c4e8
 800a20c:	0800c453 	.word	0x0800c453
 800a210:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a212:	9901      	ldr	r1, [sp, #4]
 800a214:	6011      	str	r1, [r2, #0]
 800a216:	f1b9 0f0e 	cmp.w	r9, #14
 800a21a:	d86c      	bhi.n	800a2f6 <_dtoa_r+0x3de>
 800a21c:	2c00      	cmp	r4, #0
 800a21e:	d06a      	beq.n	800a2f6 <_dtoa_r+0x3de>
 800a220:	f1bb 0f00 	cmp.w	fp, #0
 800a224:	f340 80a0 	ble.w	800a368 <_dtoa_r+0x450>
 800a228:	49c1      	ldr	r1, [pc, #772]	; (800a530 <_dtoa_r+0x618>)
 800a22a:	f00b 020f 	and.w	r2, fp, #15
 800a22e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a232:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a236:	ed92 7b00 	vldr	d7, [r2]
 800a23a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a23e:	f000 8087 	beq.w	800a350 <_dtoa_r+0x438>
 800a242:	4abc      	ldr	r2, [pc, #752]	; (800a534 <_dtoa_r+0x61c>)
 800a244:	ed92 6b08 	vldr	d6, [r2, #32]
 800a248:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a24c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a250:	f001 010f 	and.w	r1, r1, #15
 800a254:	2203      	movs	r2, #3
 800a256:	48b7      	ldr	r0, [pc, #732]	; (800a534 <_dtoa_r+0x61c>)
 800a258:	2900      	cmp	r1, #0
 800a25a:	d17b      	bne.n	800a354 <_dtoa_r+0x43c>
 800a25c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a260:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a264:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a268:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a26a:	2900      	cmp	r1, #0
 800a26c:	f000 80a2 	beq.w	800a3b4 <_dtoa_r+0x49c>
 800a270:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a274:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a278:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a280:	f140 8098 	bpl.w	800a3b4 <_dtoa_r+0x49c>
 800a284:	f1b9 0f00 	cmp.w	r9, #0
 800a288:	f000 8094 	beq.w	800a3b4 <_dtoa_r+0x49c>
 800a28c:	f1ba 0f00 	cmp.w	sl, #0
 800a290:	dd2f      	ble.n	800a2f2 <_dtoa_r+0x3da>
 800a292:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a296:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a29a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a29e:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800a2a2:	3201      	adds	r2, #1
 800a2a4:	4650      	mov	r0, sl
 800a2a6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a2aa:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a2ae:	ee07 2a90 	vmov	s15, r2
 800a2b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a2b6:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a2ba:	ee15 4a90 	vmov	r4, s11
 800a2be:	ec52 1b15 	vmov	r1, r2, d5
 800a2c2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	d177      	bne.n	800a3ba <_dtoa_r+0x4a2>
 800a2ca:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a2ce:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a2d2:	ec42 1b17 	vmov	d7, r1, r2
 800a2d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a2da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2de:	f300 8263 	bgt.w	800a7a8 <_dtoa_r+0x890>
 800a2e2:	eeb1 7b47 	vneg.f64	d7, d7
 800a2e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2ee:	f100 8258 	bmi.w	800a7a2 <_dtoa_r+0x88a>
 800a2f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a2f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a2f8:	2a00      	cmp	r2, #0
 800a2fa:	f2c0 811d 	blt.w	800a538 <_dtoa_r+0x620>
 800a2fe:	f1bb 0f0e 	cmp.w	fp, #14
 800a302:	f300 8119 	bgt.w	800a538 <_dtoa_r+0x620>
 800a306:	4b8a      	ldr	r3, [pc, #552]	; (800a530 <_dtoa_r+0x618>)
 800a308:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a30c:	ed93 6b00 	vldr	d6, [r3]
 800a310:	9b08      	ldr	r3, [sp, #32]
 800a312:	2b00      	cmp	r3, #0
 800a314:	f280 80b7 	bge.w	800a486 <_dtoa_r+0x56e>
 800a318:	f1b9 0f00 	cmp.w	r9, #0
 800a31c:	f300 80b3 	bgt.w	800a486 <_dtoa_r+0x56e>
 800a320:	f040 823f 	bne.w	800a7a2 <_dtoa_r+0x88a>
 800a324:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a328:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a32c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a330:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a338:	464c      	mov	r4, r9
 800a33a:	464f      	mov	r7, r9
 800a33c:	f280 8215 	bge.w	800a76a <_dtoa_r+0x852>
 800a340:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a344:	2331      	movs	r3, #49	; 0x31
 800a346:	f808 3b01 	strb.w	r3, [r8], #1
 800a34a:	f10b 0b01 	add.w	fp, fp, #1
 800a34e:	e211      	b.n	800a774 <_dtoa_r+0x85c>
 800a350:	2202      	movs	r2, #2
 800a352:	e780      	b.n	800a256 <_dtoa_r+0x33e>
 800a354:	07cc      	lsls	r4, r1, #31
 800a356:	d504      	bpl.n	800a362 <_dtoa_r+0x44a>
 800a358:	ed90 6b00 	vldr	d6, [r0]
 800a35c:	3201      	adds	r2, #1
 800a35e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a362:	1049      	asrs	r1, r1, #1
 800a364:	3008      	adds	r0, #8
 800a366:	e777      	b.n	800a258 <_dtoa_r+0x340>
 800a368:	d022      	beq.n	800a3b0 <_dtoa_r+0x498>
 800a36a:	f1cb 0100 	rsb	r1, fp, #0
 800a36e:	4a70      	ldr	r2, [pc, #448]	; (800a530 <_dtoa_r+0x618>)
 800a370:	f001 000f 	and.w	r0, r1, #15
 800a374:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a378:	ed92 7b00 	vldr	d7, [r2]
 800a37c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a380:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a384:	486b      	ldr	r0, [pc, #428]	; (800a534 <_dtoa_r+0x61c>)
 800a386:	1109      	asrs	r1, r1, #4
 800a388:	2400      	movs	r4, #0
 800a38a:	2202      	movs	r2, #2
 800a38c:	b929      	cbnz	r1, 800a39a <_dtoa_r+0x482>
 800a38e:	2c00      	cmp	r4, #0
 800a390:	f43f af6a 	beq.w	800a268 <_dtoa_r+0x350>
 800a394:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a398:	e766      	b.n	800a268 <_dtoa_r+0x350>
 800a39a:	07cf      	lsls	r7, r1, #31
 800a39c:	d505      	bpl.n	800a3aa <_dtoa_r+0x492>
 800a39e:	ed90 6b00 	vldr	d6, [r0]
 800a3a2:	3201      	adds	r2, #1
 800a3a4:	2401      	movs	r4, #1
 800a3a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a3aa:	1049      	asrs	r1, r1, #1
 800a3ac:	3008      	adds	r0, #8
 800a3ae:	e7ed      	b.n	800a38c <_dtoa_r+0x474>
 800a3b0:	2202      	movs	r2, #2
 800a3b2:	e759      	b.n	800a268 <_dtoa_r+0x350>
 800a3b4:	465f      	mov	r7, fp
 800a3b6:	4648      	mov	r0, r9
 800a3b8:	e775      	b.n	800a2a6 <_dtoa_r+0x38e>
 800a3ba:	ec42 1b17 	vmov	d7, r1, r2
 800a3be:	4a5c      	ldr	r2, [pc, #368]	; (800a530 <_dtoa_r+0x618>)
 800a3c0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a3c4:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a3c8:	9a01      	ldr	r2, [sp, #4]
 800a3ca:	1814      	adds	r4, r2, r0
 800a3cc:	9a07      	ldr	r2, [sp, #28]
 800a3ce:	b352      	cbz	r2, 800a426 <_dtoa_r+0x50e>
 800a3d0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a3d4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a3d8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a3dc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a3e0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a3e4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a3e8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a3ec:	ee14 2a90 	vmov	r2, s9
 800a3f0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a3f4:	3230      	adds	r2, #48	; 0x30
 800a3f6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a3fa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a402:	f808 2b01 	strb.w	r2, [r8], #1
 800a406:	d439      	bmi.n	800a47c <_dtoa_r+0x564>
 800a408:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a40c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a414:	d472      	bmi.n	800a4fc <_dtoa_r+0x5e4>
 800a416:	45a0      	cmp	r8, r4
 800a418:	f43f af6b 	beq.w	800a2f2 <_dtoa_r+0x3da>
 800a41c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a420:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a424:	e7e0      	b.n	800a3e8 <_dtoa_r+0x4d0>
 800a426:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a42a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a42e:	4621      	mov	r1, r4
 800a430:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a434:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a438:	ee14 2a90 	vmov	r2, s9
 800a43c:	3230      	adds	r2, #48	; 0x30
 800a43e:	f808 2b01 	strb.w	r2, [r8], #1
 800a442:	45a0      	cmp	r8, r4
 800a444:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a448:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a44c:	d118      	bne.n	800a480 <_dtoa_r+0x568>
 800a44e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a452:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a456:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a45a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a45e:	dc4d      	bgt.n	800a4fc <_dtoa_r+0x5e4>
 800a460:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a464:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a46c:	f57f af41 	bpl.w	800a2f2 <_dtoa_r+0x3da>
 800a470:	4688      	mov	r8, r1
 800a472:	3901      	subs	r1, #1
 800a474:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a478:	2b30      	cmp	r3, #48	; 0x30
 800a47a:	d0f9      	beq.n	800a470 <_dtoa_r+0x558>
 800a47c:	46bb      	mov	fp, r7
 800a47e:	e02a      	b.n	800a4d6 <_dtoa_r+0x5be>
 800a480:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a484:	e7d6      	b.n	800a434 <_dtoa_r+0x51c>
 800a486:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a48a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a48e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a492:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a496:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a49a:	ee15 3a10 	vmov	r3, s10
 800a49e:	3330      	adds	r3, #48	; 0x30
 800a4a0:	f808 3b01 	strb.w	r3, [r8], #1
 800a4a4:	9b01      	ldr	r3, [sp, #4]
 800a4a6:	eba8 0303 	sub.w	r3, r8, r3
 800a4aa:	4599      	cmp	r9, r3
 800a4ac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a4b0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a4b4:	d133      	bne.n	800a51e <_dtoa_r+0x606>
 800a4b6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a4ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4c2:	dc1a      	bgt.n	800a4fa <_dtoa_r+0x5e2>
 800a4c4:	eeb4 7b46 	vcmp.f64	d7, d6
 800a4c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4cc:	d103      	bne.n	800a4d6 <_dtoa_r+0x5be>
 800a4ce:	ee15 3a10 	vmov	r3, s10
 800a4d2:	07d9      	lsls	r1, r3, #31
 800a4d4:	d411      	bmi.n	800a4fa <_dtoa_r+0x5e2>
 800a4d6:	4629      	mov	r1, r5
 800a4d8:	4630      	mov	r0, r6
 800a4da:	f000 fae5 	bl	800aaa8 <_Bfree>
 800a4de:	2300      	movs	r3, #0
 800a4e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4e2:	f888 3000 	strb.w	r3, [r8]
 800a4e6:	f10b 0301 	add.w	r3, fp, #1
 800a4ea:	6013      	str	r3, [r2, #0]
 800a4ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	f43f ad61 	beq.w	8009fb6 <_dtoa_r+0x9e>
 800a4f4:	f8c3 8000 	str.w	r8, [r3]
 800a4f8:	e55d      	b.n	8009fb6 <_dtoa_r+0x9e>
 800a4fa:	465f      	mov	r7, fp
 800a4fc:	4643      	mov	r3, r8
 800a4fe:	4698      	mov	r8, r3
 800a500:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a504:	2a39      	cmp	r2, #57	; 0x39
 800a506:	d106      	bne.n	800a516 <_dtoa_r+0x5fe>
 800a508:	9a01      	ldr	r2, [sp, #4]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d1f7      	bne.n	800a4fe <_dtoa_r+0x5e6>
 800a50e:	9901      	ldr	r1, [sp, #4]
 800a510:	2230      	movs	r2, #48	; 0x30
 800a512:	3701      	adds	r7, #1
 800a514:	700a      	strb	r2, [r1, #0]
 800a516:	781a      	ldrb	r2, [r3, #0]
 800a518:	3201      	adds	r2, #1
 800a51a:	701a      	strb	r2, [r3, #0]
 800a51c:	e7ae      	b.n	800a47c <_dtoa_r+0x564>
 800a51e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a522:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a52a:	d1b2      	bne.n	800a492 <_dtoa_r+0x57a>
 800a52c:	e7d3      	b.n	800a4d6 <_dtoa_r+0x5be>
 800a52e:	bf00      	nop
 800a530:	0800c4e8 	.word	0x0800c4e8
 800a534:	0800c4c0 	.word	0x0800c4c0
 800a538:	9907      	ldr	r1, [sp, #28]
 800a53a:	2900      	cmp	r1, #0
 800a53c:	f000 80d0 	beq.w	800a6e0 <_dtoa_r+0x7c8>
 800a540:	9906      	ldr	r1, [sp, #24]
 800a542:	2901      	cmp	r1, #1
 800a544:	f300 80b4 	bgt.w	800a6b0 <_dtoa_r+0x798>
 800a548:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a54a:	2900      	cmp	r1, #0
 800a54c:	f000 80ac 	beq.w	800a6a8 <_dtoa_r+0x790>
 800a550:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a554:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a558:	461c      	mov	r4, r3
 800a55a:	930a      	str	r3, [sp, #40]	; 0x28
 800a55c:	9b04      	ldr	r3, [sp, #16]
 800a55e:	4413      	add	r3, r2
 800a560:	9304      	str	r3, [sp, #16]
 800a562:	9b05      	ldr	r3, [sp, #20]
 800a564:	2101      	movs	r1, #1
 800a566:	4413      	add	r3, r2
 800a568:	4630      	mov	r0, r6
 800a56a:	9305      	str	r3, [sp, #20]
 800a56c:	f000 fb54 	bl	800ac18 <__i2b>
 800a570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a572:	4607      	mov	r7, r0
 800a574:	f1b8 0f00 	cmp.w	r8, #0
 800a578:	dd0d      	ble.n	800a596 <_dtoa_r+0x67e>
 800a57a:	9a05      	ldr	r2, [sp, #20]
 800a57c:	2a00      	cmp	r2, #0
 800a57e:	dd0a      	ble.n	800a596 <_dtoa_r+0x67e>
 800a580:	4542      	cmp	r2, r8
 800a582:	9904      	ldr	r1, [sp, #16]
 800a584:	bfa8      	it	ge
 800a586:	4642      	movge	r2, r8
 800a588:	1a89      	subs	r1, r1, r2
 800a58a:	9104      	str	r1, [sp, #16]
 800a58c:	9905      	ldr	r1, [sp, #20]
 800a58e:	eba8 0802 	sub.w	r8, r8, r2
 800a592:	1a8a      	subs	r2, r1, r2
 800a594:	9205      	str	r2, [sp, #20]
 800a596:	b303      	cbz	r3, 800a5da <_dtoa_r+0x6c2>
 800a598:	9a07      	ldr	r2, [sp, #28]
 800a59a:	2a00      	cmp	r2, #0
 800a59c:	f000 80a5 	beq.w	800a6ea <_dtoa_r+0x7d2>
 800a5a0:	2c00      	cmp	r4, #0
 800a5a2:	dd13      	ble.n	800a5cc <_dtoa_r+0x6b4>
 800a5a4:	4639      	mov	r1, r7
 800a5a6:	4622      	mov	r2, r4
 800a5a8:	4630      	mov	r0, r6
 800a5aa:	930d      	str	r3, [sp, #52]	; 0x34
 800a5ac:	f000 fbf4 	bl	800ad98 <__pow5mult>
 800a5b0:	462a      	mov	r2, r5
 800a5b2:	4601      	mov	r1, r0
 800a5b4:	4607      	mov	r7, r0
 800a5b6:	4630      	mov	r0, r6
 800a5b8:	f000 fb44 	bl	800ac44 <__multiply>
 800a5bc:	4629      	mov	r1, r5
 800a5be:	900a      	str	r0, [sp, #40]	; 0x28
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	f000 fa71 	bl	800aaa8 <_Bfree>
 800a5c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5ca:	4615      	mov	r5, r2
 800a5cc:	1b1a      	subs	r2, r3, r4
 800a5ce:	d004      	beq.n	800a5da <_dtoa_r+0x6c2>
 800a5d0:	4629      	mov	r1, r5
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	f000 fbe0 	bl	800ad98 <__pow5mult>
 800a5d8:	4605      	mov	r5, r0
 800a5da:	2101      	movs	r1, #1
 800a5dc:	4630      	mov	r0, r6
 800a5de:	f000 fb1b 	bl	800ac18 <__i2b>
 800a5e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	4604      	mov	r4, r0
 800a5e8:	f340 8081 	ble.w	800a6ee <_dtoa_r+0x7d6>
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	4601      	mov	r1, r0
 800a5f0:	4630      	mov	r0, r6
 800a5f2:	f000 fbd1 	bl	800ad98 <__pow5mult>
 800a5f6:	9b06      	ldr	r3, [sp, #24]
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	4604      	mov	r4, r0
 800a5fc:	dd7a      	ble.n	800a6f4 <_dtoa_r+0x7dc>
 800a5fe:	2300      	movs	r3, #0
 800a600:	930a      	str	r3, [sp, #40]	; 0x28
 800a602:	6922      	ldr	r2, [r4, #16]
 800a604:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a608:	6910      	ldr	r0, [r2, #16]
 800a60a:	f000 fab5 	bl	800ab78 <__hi0bits>
 800a60e:	f1c0 0020 	rsb	r0, r0, #32
 800a612:	9b05      	ldr	r3, [sp, #20]
 800a614:	4418      	add	r0, r3
 800a616:	f010 001f 	ands.w	r0, r0, #31
 800a61a:	f000 808c 	beq.w	800a736 <_dtoa_r+0x81e>
 800a61e:	f1c0 0220 	rsb	r2, r0, #32
 800a622:	2a04      	cmp	r2, #4
 800a624:	f340 8085 	ble.w	800a732 <_dtoa_r+0x81a>
 800a628:	f1c0 001c 	rsb	r0, r0, #28
 800a62c:	9b04      	ldr	r3, [sp, #16]
 800a62e:	4403      	add	r3, r0
 800a630:	9304      	str	r3, [sp, #16]
 800a632:	9b05      	ldr	r3, [sp, #20]
 800a634:	4403      	add	r3, r0
 800a636:	4480      	add	r8, r0
 800a638:	9305      	str	r3, [sp, #20]
 800a63a:	9b04      	ldr	r3, [sp, #16]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	dd05      	ble.n	800a64c <_dtoa_r+0x734>
 800a640:	4629      	mov	r1, r5
 800a642:	461a      	mov	r2, r3
 800a644:	4630      	mov	r0, r6
 800a646:	f000 fc01 	bl	800ae4c <__lshift>
 800a64a:	4605      	mov	r5, r0
 800a64c:	9b05      	ldr	r3, [sp, #20]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	dd05      	ble.n	800a65e <_dtoa_r+0x746>
 800a652:	4621      	mov	r1, r4
 800a654:	461a      	mov	r2, r3
 800a656:	4630      	mov	r0, r6
 800a658:	f000 fbf8 	bl	800ae4c <__lshift>
 800a65c:	4604      	mov	r4, r0
 800a65e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a660:	2b00      	cmp	r3, #0
 800a662:	d06a      	beq.n	800a73a <_dtoa_r+0x822>
 800a664:	4621      	mov	r1, r4
 800a666:	4628      	mov	r0, r5
 800a668:	f000 fc60 	bl	800af2c <__mcmp>
 800a66c:	2800      	cmp	r0, #0
 800a66e:	da64      	bge.n	800a73a <_dtoa_r+0x822>
 800a670:	2300      	movs	r3, #0
 800a672:	4629      	mov	r1, r5
 800a674:	220a      	movs	r2, #10
 800a676:	4630      	mov	r0, r6
 800a678:	f000 fa38 	bl	800aaec <__multadd>
 800a67c:	9b07      	ldr	r3, [sp, #28]
 800a67e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a682:	4605      	mov	r5, r0
 800a684:	2b00      	cmp	r3, #0
 800a686:	f000 8191 	beq.w	800a9ac <_dtoa_r+0xa94>
 800a68a:	4639      	mov	r1, r7
 800a68c:	2300      	movs	r3, #0
 800a68e:	220a      	movs	r2, #10
 800a690:	4630      	mov	r0, r6
 800a692:	f000 fa2b 	bl	800aaec <__multadd>
 800a696:	f1ba 0f00 	cmp.w	sl, #0
 800a69a:	4607      	mov	r7, r0
 800a69c:	f300 808d 	bgt.w	800a7ba <_dtoa_r+0x8a2>
 800a6a0:	9b06      	ldr	r3, [sp, #24]
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	dc50      	bgt.n	800a748 <_dtoa_r+0x830>
 800a6a6:	e088      	b.n	800a7ba <_dtoa_r+0x8a2>
 800a6a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6aa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a6ae:	e751      	b.n	800a554 <_dtoa_r+0x63c>
 800a6b0:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800a6b4:	42a3      	cmp	r3, r4
 800a6b6:	bfbf      	itttt	lt
 800a6b8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800a6ba:	1ae3      	sublt	r3, r4, r3
 800a6bc:	18d2      	addlt	r2, r2, r3
 800a6be:	9209      	strlt	r2, [sp, #36]	; 0x24
 800a6c0:	bfb6      	itet	lt
 800a6c2:	4623      	movlt	r3, r4
 800a6c4:	1b1c      	subge	r4, r3, r4
 800a6c6:	2400      	movlt	r4, #0
 800a6c8:	f1b9 0f00 	cmp.w	r9, #0
 800a6cc:	bfb5      	itete	lt
 800a6ce:	9a04      	ldrlt	r2, [sp, #16]
 800a6d0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800a6d4:	eba2 0809 	sublt.w	r8, r2, r9
 800a6d8:	464a      	movge	r2, r9
 800a6da:	bfb8      	it	lt
 800a6dc:	2200      	movlt	r2, #0
 800a6de:	e73c      	b.n	800a55a <_dtoa_r+0x642>
 800a6e0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a6e4:	9f07      	ldr	r7, [sp, #28]
 800a6e6:	461c      	mov	r4, r3
 800a6e8:	e744      	b.n	800a574 <_dtoa_r+0x65c>
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	e770      	b.n	800a5d0 <_dtoa_r+0x6b8>
 800a6ee:	9b06      	ldr	r3, [sp, #24]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	dc18      	bgt.n	800a726 <_dtoa_r+0x80e>
 800a6f4:	9b02      	ldr	r3, [sp, #8]
 800a6f6:	b9b3      	cbnz	r3, 800a726 <_dtoa_r+0x80e>
 800a6f8:	9b03      	ldr	r3, [sp, #12]
 800a6fa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a6fe:	b9a2      	cbnz	r2, 800a72a <_dtoa_r+0x812>
 800a700:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a704:	0d12      	lsrs	r2, r2, #20
 800a706:	0512      	lsls	r2, r2, #20
 800a708:	b18a      	cbz	r2, 800a72e <_dtoa_r+0x816>
 800a70a:	9b04      	ldr	r3, [sp, #16]
 800a70c:	3301      	adds	r3, #1
 800a70e:	9304      	str	r3, [sp, #16]
 800a710:	9b05      	ldr	r3, [sp, #20]
 800a712:	3301      	adds	r3, #1
 800a714:	9305      	str	r3, [sp, #20]
 800a716:	2301      	movs	r3, #1
 800a718:	930a      	str	r3, [sp, #40]	; 0x28
 800a71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f47f af70 	bne.w	800a602 <_dtoa_r+0x6ea>
 800a722:	2001      	movs	r0, #1
 800a724:	e775      	b.n	800a612 <_dtoa_r+0x6fa>
 800a726:	2300      	movs	r3, #0
 800a728:	e7f6      	b.n	800a718 <_dtoa_r+0x800>
 800a72a:	9b02      	ldr	r3, [sp, #8]
 800a72c:	e7f4      	b.n	800a718 <_dtoa_r+0x800>
 800a72e:	920a      	str	r2, [sp, #40]	; 0x28
 800a730:	e7f3      	b.n	800a71a <_dtoa_r+0x802>
 800a732:	d082      	beq.n	800a63a <_dtoa_r+0x722>
 800a734:	4610      	mov	r0, r2
 800a736:	301c      	adds	r0, #28
 800a738:	e778      	b.n	800a62c <_dtoa_r+0x714>
 800a73a:	f1b9 0f00 	cmp.w	r9, #0
 800a73e:	dc37      	bgt.n	800a7b0 <_dtoa_r+0x898>
 800a740:	9b06      	ldr	r3, [sp, #24]
 800a742:	2b02      	cmp	r3, #2
 800a744:	dd34      	ble.n	800a7b0 <_dtoa_r+0x898>
 800a746:	46ca      	mov	sl, r9
 800a748:	f1ba 0f00 	cmp.w	sl, #0
 800a74c:	d10d      	bne.n	800a76a <_dtoa_r+0x852>
 800a74e:	4621      	mov	r1, r4
 800a750:	4653      	mov	r3, sl
 800a752:	2205      	movs	r2, #5
 800a754:	4630      	mov	r0, r6
 800a756:	f000 f9c9 	bl	800aaec <__multadd>
 800a75a:	4601      	mov	r1, r0
 800a75c:	4604      	mov	r4, r0
 800a75e:	4628      	mov	r0, r5
 800a760:	f000 fbe4 	bl	800af2c <__mcmp>
 800a764:	2800      	cmp	r0, #0
 800a766:	f73f adeb 	bgt.w	800a340 <_dtoa_r+0x428>
 800a76a:	9b08      	ldr	r3, [sp, #32]
 800a76c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a770:	ea6f 0b03 	mvn.w	fp, r3
 800a774:	f04f 0900 	mov.w	r9, #0
 800a778:	4621      	mov	r1, r4
 800a77a:	4630      	mov	r0, r6
 800a77c:	f000 f994 	bl	800aaa8 <_Bfree>
 800a780:	2f00      	cmp	r7, #0
 800a782:	f43f aea8 	beq.w	800a4d6 <_dtoa_r+0x5be>
 800a786:	f1b9 0f00 	cmp.w	r9, #0
 800a78a:	d005      	beq.n	800a798 <_dtoa_r+0x880>
 800a78c:	45b9      	cmp	r9, r7
 800a78e:	d003      	beq.n	800a798 <_dtoa_r+0x880>
 800a790:	4649      	mov	r1, r9
 800a792:	4630      	mov	r0, r6
 800a794:	f000 f988 	bl	800aaa8 <_Bfree>
 800a798:	4639      	mov	r1, r7
 800a79a:	4630      	mov	r0, r6
 800a79c:	f000 f984 	bl	800aaa8 <_Bfree>
 800a7a0:	e699      	b.n	800a4d6 <_dtoa_r+0x5be>
 800a7a2:	2400      	movs	r4, #0
 800a7a4:	4627      	mov	r7, r4
 800a7a6:	e7e0      	b.n	800a76a <_dtoa_r+0x852>
 800a7a8:	46bb      	mov	fp, r7
 800a7aa:	4604      	mov	r4, r0
 800a7ac:	4607      	mov	r7, r0
 800a7ae:	e5c7      	b.n	800a340 <_dtoa_r+0x428>
 800a7b0:	9b07      	ldr	r3, [sp, #28]
 800a7b2:	46ca      	mov	sl, r9
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f000 8100 	beq.w	800a9ba <_dtoa_r+0xaa2>
 800a7ba:	f1b8 0f00 	cmp.w	r8, #0
 800a7be:	dd05      	ble.n	800a7cc <_dtoa_r+0x8b4>
 800a7c0:	4639      	mov	r1, r7
 800a7c2:	4642      	mov	r2, r8
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	f000 fb41 	bl	800ae4c <__lshift>
 800a7ca:	4607      	mov	r7, r0
 800a7cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d05d      	beq.n	800a88e <_dtoa_r+0x976>
 800a7d2:	6879      	ldr	r1, [r7, #4]
 800a7d4:	4630      	mov	r0, r6
 800a7d6:	f000 f927 	bl	800aa28 <_Balloc>
 800a7da:	4680      	mov	r8, r0
 800a7dc:	b928      	cbnz	r0, 800a7ea <_dtoa_r+0x8d2>
 800a7de:	4b82      	ldr	r3, [pc, #520]	; (800a9e8 <_dtoa_r+0xad0>)
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a7e6:	f7ff bbaf 	b.w	8009f48 <_dtoa_r+0x30>
 800a7ea:	693a      	ldr	r2, [r7, #16]
 800a7ec:	3202      	adds	r2, #2
 800a7ee:	0092      	lsls	r2, r2, #2
 800a7f0:	f107 010c 	add.w	r1, r7, #12
 800a7f4:	300c      	adds	r0, #12
 800a7f6:	f000 f909 	bl	800aa0c <memcpy>
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	4641      	mov	r1, r8
 800a7fe:	4630      	mov	r0, r6
 800a800:	f000 fb24 	bl	800ae4c <__lshift>
 800a804:	9b01      	ldr	r3, [sp, #4]
 800a806:	3301      	adds	r3, #1
 800a808:	9304      	str	r3, [sp, #16]
 800a80a:	9b01      	ldr	r3, [sp, #4]
 800a80c:	4453      	add	r3, sl
 800a80e:	9308      	str	r3, [sp, #32]
 800a810:	9b02      	ldr	r3, [sp, #8]
 800a812:	f003 0301 	and.w	r3, r3, #1
 800a816:	46b9      	mov	r9, r7
 800a818:	9307      	str	r3, [sp, #28]
 800a81a:	4607      	mov	r7, r0
 800a81c:	9b04      	ldr	r3, [sp, #16]
 800a81e:	4621      	mov	r1, r4
 800a820:	3b01      	subs	r3, #1
 800a822:	4628      	mov	r0, r5
 800a824:	9302      	str	r3, [sp, #8]
 800a826:	f7ff fae9 	bl	8009dfc <quorem>
 800a82a:	4603      	mov	r3, r0
 800a82c:	3330      	adds	r3, #48	; 0x30
 800a82e:	9005      	str	r0, [sp, #20]
 800a830:	4649      	mov	r1, r9
 800a832:	4628      	mov	r0, r5
 800a834:	9309      	str	r3, [sp, #36]	; 0x24
 800a836:	f000 fb79 	bl	800af2c <__mcmp>
 800a83a:	463a      	mov	r2, r7
 800a83c:	4682      	mov	sl, r0
 800a83e:	4621      	mov	r1, r4
 800a840:	4630      	mov	r0, r6
 800a842:	f000 fb8f 	bl	800af64 <__mdiff>
 800a846:	68c2      	ldr	r2, [r0, #12]
 800a848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a84a:	4680      	mov	r8, r0
 800a84c:	bb0a      	cbnz	r2, 800a892 <_dtoa_r+0x97a>
 800a84e:	4601      	mov	r1, r0
 800a850:	4628      	mov	r0, r5
 800a852:	f000 fb6b 	bl	800af2c <__mcmp>
 800a856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a858:	4602      	mov	r2, r0
 800a85a:	4641      	mov	r1, r8
 800a85c:	4630      	mov	r0, r6
 800a85e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800a862:	f000 f921 	bl	800aaa8 <_Bfree>
 800a866:	9b06      	ldr	r3, [sp, #24]
 800a868:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a86a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a86e:	ea43 0102 	orr.w	r1, r3, r2
 800a872:	9b07      	ldr	r3, [sp, #28]
 800a874:	430b      	orrs	r3, r1
 800a876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a878:	d10d      	bne.n	800a896 <_dtoa_r+0x97e>
 800a87a:	2b39      	cmp	r3, #57	; 0x39
 800a87c:	d029      	beq.n	800a8d2 <_dtoa_r+0x9ba>
 800a87e:	f1ba 0f00 	cmp.w	sl, #0
 800a882:	dd01      	ble.n	800a888 <_dtoa_r+0x970>
 800a884:	9b05      	ldr	r3, [sp, #20]
 800a886:	3331      	adds	r3, #49	; 0x31
 800a888:	9a02      	ldr	r2, [sp, #8]
 800a88a:	7013      	strb	r3, [r2, #0]
 800a88c:	e774      	b.n	800a778 <_dtoa_r+0x860>
 800a88e:	4638      	mov	r0, r7
 800a890:	e7b8      	b.n	800a804 <_dtoa_r+0x8ec>
 800a892:	2201      	movs	r2, #1
 800a894:	e7e1      	b.n	800a85a <_dtoa_r+0x942>
 800a896:	f1ba 0f00 	cmp.w	sl, #0
 800a89a:	db06      	blt.n	800a8aa <_dtoa_r+0x992>
 800a89c:	9906      	ldr	r1, [sp, #24]
 800a89e:	ea41 0a0a 	orr.w	sl, r1, sl
 800a8a2:	9907      	ldr	r1, [sp, #28]
 800a8a4:	ea5a 0101 	orrs.w	r1, sl, r1
 800a8a8:	d120      	bne.n	800a8ec <_dtoa_r+0x9d4>
 800a8aa:	2a00      	cmp	r2, #0
 800a8ac:	ddec      	ble.n	800a888 <_dtoa_r+0x970>
 800a8ae:	4629      	mov	r1, r5
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	4630      	mov	r0, r6
 800a8b4:	9304      	str	r3, [sp, #16]
 800a8b6:	f000 fac9 	bl	800ae4c <__lshift>
 800a8ba:	4621      	mov	r1, r4
 800a8bc:	4605      	mov	r5, r0
 800a8be:	f000 fb35 	bl	800af2c <__mcmp>
 800a8c2:	2800      	cmp	r0, #0
 800a8c4:	9b04      	ldr	r3, [sp, #16]
 800a8c6:	dc02      	bgt.n	800a8ce <_dtoa_r+0x9b6>
 800a8c8:	d1de      	bne.n	800a888 <_dtoa_r+0x970>
 800a8ca:	07da      	lsls	r2, r3, #31
 800a8cc:	d5dc      	bpl.n	800a888 <_dtoa_r+0x970>
 800a8ce:	2b39      	cmp	r3, #57	; 0x39
 800a8d0:	d1d8      	bne.n	800a884 <_dtoa_r+0x96c>
 800a8d2:	9a02      	ldr	r2, [sp, #8]
 800a8d4:	2339      	movs	r3, #57	; 0x39
 800a8d6:	7013      	strb	r3, [r2, #0]
 800a8d8:	4643      	mov	r3, r8
 800a8da:	4698      	mov	r8, r3
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a8e2:	2a39      	cmp	r2, #57	; 0x39
 800a8e4:	d051      	beq.n	800a98a <_dtoa_r+0xa72>
 800a8e6:	3201      	adds	r2, #1
 800a8e8:	701a      	strb	r2, [r3, #0]
 800a8ea:	e745      	b.n	800a778 <_dtoa_r+0x860>
 800a8ec:	2a00      	cmp	r2, #0
 800a8ee:	dd03      	ble.n	800a8f8 <_dtoa_r+0x9e0>
 800a8f0:	2b39      	cmp	r3, #57	; 0x39
 800a8f2:	d0ee      	beq.n	800a8d2 <_dtoa_r+0x9ba>
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	e7c7      	b.n	800a888 <_dtoa_r+0x970>
 800a8f8:	9a04      	ldr	r2, [sp, #16]
 800a8fa:	9908      	ldr	r1, [sp, #32]
 800a8fc:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a900:	428a      	cmp	r2, r1
 800a902:	d02b      	beq.n	800a95c <_dtoa_r+0xa44>
 800a904:	4629      	mov	r1, r5
 800a906:	2300      	movs	r3, #0
 800a908:	220a      	movs	r2, #10
 800a90a:	4630      	mov	r0, r6
 800a90c:	f000 f8ee 	bl	800aaec <__multadd>
 800a910:	45b9      	cmp	r9, r7
 800a912:	4605      	mov	r5, r0
 800a914:	f04f 0300 	mov.w	r3, #0
 800a918:	f04f 020a 	mov.w	r2, #10
 800a91c:	4649      	mov	r1, r9
 800a91e:	4630      	mov	r0, r6
 800a920:	d107      	bne.n	800a932 <_dtoa_r+0xa1a>
 800a922:	f000 f8e3 	bl	800aaec <__multadd>
 800a926:	4681      	mov	r9, r0
 800a928:	4607      	mov	r7, r0
 800a92a:	9b04      	ldr	r3, [sp, #16]
 800a92c:	3301      	adds	r3, #1
 800a92e:	9304      	str	r3, [sp, #16]
 800a930:	e774      	b.n	800a81c <_dtoa_r+0x904>
 800a932:	f000 f8db 	bl	800aaec <__multadd>
 800a936:	4639      	mov	r1, r7
 800a938:	4681      	mov	r9, r0
 800a93a:	2300      	movs	r3, #0
 800a93c:	220a      	movs	r2, #10
 800a93e:	4630      	mov	r0, r6
 800a940:	f000 f8d4 	bl	800aaec <__multadd>
 800a944:	4607      	mov	r7, r0
 800a946:	e7f0      	b.n	800a92a <_dtoa_r+0xa12>
 800a948:	f1ba 0f00 	cmp.w	sl, #0
 800a94c:	9a01      	ldr	r2, [sp, #4]
 800a94e:	bfcc      	ite	gt
 800a950:	46d0      	movgt	r8, sl
 800a952:	f04f 0801 	movle.w	r8, #1
 800a956:	4490      	add	r8, r2
 800a958:	f04f 0900 	mov.w	r9, #0
 800a95c:	4629      	mov	r1, r5
 800a95e:	2201      	movs	r2, #1
 800a960:	4630      	mov	r0, r6
 800a962:	9302      	str	r3, [sp, #8]
 800a964:	f000 fa72 	bl	800ae4c <__lshift>
 800a968:	4621      	mov	r1, r4
 800a96a:	4605      	mov	r5, r0
 800a96c:	f000 fade 	bl	800af2c <__mcmp>
 800a970:	2800      	cmp	r0, #0
 800a972:	dcb1      	bgt.n	800a8d8 <_dtoa_r+0x9c0>
 800a974:	d102      	bne.n	800a97c <_dtoa_r+0xa64>
 800a976:	9b02      	ldr	r3, [sp, #8]
 800a978:	07db      	lsls	r3, r3, #31
 800a97a:	d4ad      	bmi.n	800a8d8 <_dtoa_r+0x9c0>
 800a97c:	4643      	mov	r3, r8
 800a97e:	4698      	mov	r8, r3
 800a980:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a984:	2a30      	cmp	r2, #48	; 0x30
 800a986:	d0fa      	beq.n	800a97e <_dtoa_r+0xa66>
 800a988:	e6f6      	b.n	800a778 <_dtoa_r+0x860>
 800a98a:	9a01      	ldr	r2, [sp, #4]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d1a4      	bne.n	800a8da <_dtoa_r+0x9c2>
 800a990:	f10b 0b01 	add.w	fp, fp, #1
 800a994:	2331      	movs	r3, #49	; 0x31
 800a996:	e778      	b.n	800a88a <_dtoa_r+0x972>
 800a998:	4b14      	ldr	r3, [pc, #80]	; (800a9ec <_dtoa_r+0xad4>)
 800a99a:	f7ff bb27 	b.w	8009fec <_dtoa_r+0xd4>
 800a99e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	f47f ab03 	bne.w	8009fac <_dtoa_r+0x94>
 800a9a6:	4b12      	ldr	r3, [pc, #72]	; (800a9f0 <_dtoa_r+0xad8>)
 800a9a8:	f7ff bb20 	b.w	8009fec <_dtoa_r+0xd4>
 800a9ac:	f1ba 0f00 	cmp.w	sl, #0
 800a9b0:	dc03      	bgt.n	800a9ba <_dtoa_r+0xaa2>
 800a9b2:	9b06      	ldr	r3, [sp, #24]
 800a9b4:	2b02      	cmp	r3, #2
 800a9b6:	f73f aec7 	bgt.w	800a748 <_dtoa_r+0x830>
 800a9ba:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a9be:	4621      	mov	r1, r4
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	f7ff fa1b 	bl	8009dfc <quorem>
 800a9c6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a9ca:	f808 3b01 	strb.w	r3, [r8], #1
 800a9ce:	9a01      	ldr	r2, [sp, #4]
 800a9d0:	eba8 0202 	sub.w	r2, r8, r2
 800a9d4:	4592      	cmp	sl, r2
 800a9d6:	ddb7      	ble.n	800a948 <_dtoa_r+0xa30>
 800a9d8:	4629      	mov	r1, r5
 800a9da:	2300      	movs	r3, #0
 800a9dc:	220a      	movs	r2, #10
 800a9de:	4630      	mov	r0, r6
 800a9e0:	f000 f884 	bl	800aaec <__multadd>
 800a9e4:	4605      	mov	r5, r0
 800a9e6:	e7ea      	b.n	800a9be <_dtoa_r+0xaa6>
 800a9e8:	0800c453 	.word	0x0800c453
 800a9ec:	0800c3b0 	.word	0x0800c3b0
 800a9f0:	0800c3d4 	.word	0x0800c3d4

0800a9f4 <_localeconv_r>:
 800a9f4:	4800      	ldr	r0, [pc, #0]	; (800a9f8 <_localeconv_r+0x4>)
 800a9f6:	4770      	bx	lr
 800a9f8:	24000168 	.word	0x24000168

0800a9fc <malloc>:
 800a9fc:	4b02      	ldr	r3, [pc, #8]	; (800aa08 <malloc+0xc>)
 800a9fe:	4601      	mov	r1, r0
 800aa00:	6818      	ldr	r0, [r3, #0]
 800aa02:	f000 bc17 	b.w	800b234 <_malloc_r>
 800aa06:	bf00      	nop
 800aa08:	24000014 	.word	0x24000014

0800aa0c <memcpy>:
 800aa0c:	440a      	add	r2, r1
 800aa0e:	4291      	cmp	r1, r2
 800aa10:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800aa14:	d100      	bne.n	800aa18 <memcpy+0xc>
 800aa16:	4770      	bx	lr
 800aa18:	b510      	push	{r4, lr}
 800aa1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa22:	4291      	cmp	r1, r2
 800aa24:	d1f9      	bne.n	800aa1a <memcpy+0xe>
 800aa26:	bd10      	pop	{r4, pc}

0800aa28 <_Balloc>:
 800aa28:	b570      	push	{r4, r5, r6, lr}
 800aa2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa2c:	4604      	mov	r4, r0
 800aa2e:	460d      	mov	r5, r1
 800aa30:	b976      	cbnz	r6, 800aa50 <_Balloc+0x28>
 800aa32:	2010      	movs	r0, #16
 800aa34:	f7ff ffe2 	bl	800a9fc <malloc>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	6260      	str	r0, [r4, #36]	; 0x24
 800aa3c:	b920      	cbnz	r0, 800aa48 <_Balloc+0x20>
 800aa3e:	4b18      	ldr	r3, [pc, #96]	; (800aaa0 <_Balloc+0x78>)
 800aa40:	4818      	ldr	r0, [pc, #96]	; (800aaa4 <_Balloc+0x7c>)
 800aa42:	2166      	movs	r1, #102	; 0x66
 800aa44:	f000 fdd6 	bl	800b5f4 <__assert_func>
 800aa48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa4c:	6006      	str	r6, [r0, #0]
 800aa4e:	60c6      	str	r6, [r0, #12]
 800aa50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aa52:	68f3      	ldr	r3, [r6, #12]
 800aa54:	b183      	cbz	r3, 800aa78 <_Balloc+0x50>
 800aa56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa58:	68db      	ldr	r3, [r3, #12]
 800aa5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa5e:	b9b8      	cbnz	r0, 800aa90 <_Balloc+0x68>
 800aa60:	2101      	movs	r1, #1
 800aa62:	fa01 f605 	lsl.w	r6, r1, r5
 800aa66:	1d72      	adds	r2, r6, #5
 800aa68:	0092      	lsls	r2, r2, #2
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	f000 fb60 	bl	800b130 <_calloc_r>
 800aa70:	b160      	cbz	r0, 800aa8c <_Balloc+0x64>
 800aa72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa76:	e00e      	b.n	800aa96 <_Balloc+0x6e>
 800aa78:	2221      	movs	r2, #33	; 0x21
 800aa7a:	2104      	movs	r1, #4
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	f000 fb57 	bl	800b130 <_calloc_r>
 800aa82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa84:	60f0      	str	r0, [r6, #12]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d1e4      	bne.n	800aa56 <_Balloc+0x2e>
 800aa8c:	2000      	movs	r0, #0
 800aa8e:	bd70      	pop	{r4, r5, r6, pc}
 800aa90:	6802      	ldr	r2, [r0, #0]
 800aa92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa96:	2300      	movs	r3, #0
 800aa98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa9c:	e7f7      	b.n	800aa8e <_Balloc+0x66>
 800aa9e:	bf00      	nop
 800aaa0:	0800c3e1 	.word	0x0800c3e1
 800aaa4:	0800c464 	.word	0x0800c464

0800aaa8 <_Bfree>:
 800aaa8:	b570      	push	{r4, r5, r6, lr}
 800aaaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aaac:	4605      	mov	r5, r0
 800aaae:	460c      	mov	r4, r1
 800aab0:	b976      	cbnz	r6, 800aad0 <_Bfree+0x28>
 800aab2:	2010      	movs	r0, #16
 800aab4:	f7ff ffa2 	bl	800a9fc <malloc>
 800aab8:	4602      	mov	r2, r0
 800aaba:	6268      	str	r0, [r5, #36]	; 0x24
 800aabc:	b920      	cbnz	r0, 800aac8 <_Bfree+0x20>
 800aabe:	4b09      	ldr	r3, [pc, #36]	; (800aae4 <_Bfree+0x3c>)
 800aac0:	4809      	ldr	r0, [pc, #36]	; (800aae8 <_Bfree+0x40>)
 800aac2:	218a      	movs	r1, #138	; 0x8a
 800aac4:	f000 fd96 	bl	800b5f4 <__assert_func>
 800aac8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aacc:	6006      	str	r6, [r0, #0]
 800aace:	60c6      	str	r6, [r0, #12]
 800aad0:	b13c      	cbz	r4, 800aae2 <_Bfree+0x3a>
 800aad2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aad4:	6862      	ldr	r2, [r4, #4]
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aadc:	6021      	str	r1, [r4, #0]
 800aade:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aae2:	bd70      	pop	{r4, r5, r6, pc}
 800aae4:	0800c3e1 	.word	0x0800c3e1
 800aae8:	0800c464 	.word	0x0800c464

0800aaec <__multadd>:
 800aaec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf0:	690d      	ldr	r5, [r1, #16]
 800aaf2:	4607      	mov	r7, r0
 800aaf4:	460c      	mov	r4, r1
 800aaf6:	461e      	mov	r6, r3
 800aaf8:	f101 0c14 	add.w	ip, r1, #20
 800aafc:	2000      	movs	r0, #0
 800aafe:	f8dc 3000 	ldr.w	r3, [ip]
 800ab02:	b299      	uxth	r1, r3
 800ab04:	fb02 6101 	mla	r1, r2, r1, r6
 800ab08:	0c1e      	lsrs	r6, r3, #16
 800ab0a:	0c0b      	lsrs	r3, r1, #16
 800ab0c:	fb02 3306 	mla	r3, r2, r6, r3
 800ab10:	b289      	uxth	r1, r1
 800ab12:	3001      	adds	r0, #1
 800ab14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab18:	4285      	cmp	r5, r0
 800ab1a:	f84c 1b04 	str.w	r1, [ip], #4
 800ab1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab22:	dcec      	bgt.n	800aafe <__multadd+0x12>
 800ab24:	b30e      	cbz	r6, 800ab6a <__multadd+0x7e>
 800ab26:	68a3      	ldr	r3, [r4, #8]
 800ab28:	42ab      	cmp	r3, r5
 800ab2a:	dc19      	bgt.n	800ab60 <__multadd+0x74>
 800ab2c:	6861      	ldr	r1, [r4, #4]
 800ab2e:	4638      	mov	r0, r7
 800ab30:	3101      	adds	r1, #1
 800ab32:	f7ff ff79 	bl	800aa28 <_Balloc>
 800ab36:	4680      	mov	r8, r0
 800ab38:	b928      	cbnz	r0, 800ab46 <__multadd+0x5a>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	4b0c      	ldr	r3, [pc, #48]	; (800ab70 <__multadd+0x84>)
 800ab3e:	480d      	ldr	r0, [pc, #52]	; (800ab74 <__multadd+0x88>)
 800ab40:	21b5      	movs	r1, #181	; 0xb5
 800ab42:	f000 fd57 	bl	800b5f4 <__assert_func>
 800ab46:	6922      	ldr	r2, [r4, #16]
 800ab48:	3202      	adds	r2, #2
 800ab4a:	f104 010c 	add.w	r1, r4, #12
 800ab4e:	0092      	lsls	r2, r2, #2
 800ab50:	300c      	adds	r0, #12
 800ab52:	f7ff ff5b 	bl	800aa0c <memcpy>
 800ab56:	4621      	mov	r1, r4
 800ab58:	4638      	mov	r0, r7
 800ab5a:	f7ff ffa5 	bl	800aaa8 <_Bfree>
 800ab5e:	4644      	mov	r4, r8
 800ab60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab64:	3501      	adds	r5, #1
 800ab66:	615e      	str	r6, [r3, #20]
 800ab68:	6125      	str	r5, [r4, #16]
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab70:	0800c453 	.word	0x0800c453
 800ab74:	0800c464 	.word	0x0800c464

0800ab78 <__hi0bits>:
 800ab78:	0c03      	lsrs	r3, r0, #16
 800ab7a:	041b      	lsls	r3, r3, #16
 800ab7c:	b9d3      	cbnz	r3, 800abb4 <__hi0bits+0x3c>
 800ab7e:	0400      	lsls	r0, r0, #16
 800ab80:	2310      	movs	r3, #16
 800ab82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ab86:	bf04      	itt	eq
 800ab88:	0200      	lsleq	r0, r0, #8
 800ab8a:	3308      	addeq	r3, #8
 800ab8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ab90:	bf04      	itt	eq
 800ab92:	0100      	lsleq	r0, r0, #4
 800ab94:	3304      	addeq	r3, #4
 800ab96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ab9a:	bf04      	itt	eq
 800ab9c:	0080      	lsleq	r0, r0, #2
 800ab9e:	3302      	addeq	r3, #2
 800aba0:	2800      	cmp	r0, #0
 800aba2:	db05      	blt.n	800abb0 <__hi0bits+0x38>
 800aba4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aba8:	f103 0301 	add.w	r3, r3, #1
 800abac:	bf08      	it	eq
 800abae:	2320      	moveq	r3, #32
 800abb0:	4618      	mov	r0, r3
 800abb2:	4770      	bx	lr
 800abb4:	2300      	movs	r3, #0
 800abb6:	e7e4      	b.n	800ab82 <__hi0bits+0xa>

0800abb8 <__lo0bits>:
 800abb8:	6803      	ldr	r3, [r0, #0]
 800abba:	f013 0207 	ands.w	r2, r3, #7
 800abbe:	4601      	mov	r1, r0
 800abc0:	d00b      	beq.n	800abda <__lo0bits+0x22>
 800abc2:	07da      	lsls	r2, r3, #31
 800abc4:	d423      	bmi.n	800ac0e <__lo0bits+0x56>
 800abc6:	0798      	lsls	r0, r3, #30
 800abc8:	bf49      	itett	mi
 800abca:	085b      	lsrmi	r3, r3, #1
 800abcc:	089b      	lsrpl	r3, r3, #2
 800abce:	2001      	movmi	r0, #1
 800abd0:	600b      	strmi	r3, [r1, #0]
 800abd2:	bf5c      	itt	pl
 800abd4:	600b      	strpl	r3, [r1, #0]
 800abd6:	2002      	movpl	r0, #2
 800abd8:	4770      	bx	lr
 800abda:	b298      	uxth	r0, r3
 800abdc:	b9a8      	cbnz	r0, 800ac0a <__lo0bits+0x52>
 800abde:	0c1b      	lsrs	r3, r3, #16
 800abe0:	2010      	movs	r0, #16
 800abe2:	b2da      	uxtb	r2, r3
 800abe4:	b90a      	cbnz	r2, 800abea <__lo0bits+0x32>
 800abe6:	3008      	adds	r0, #8
 800abe8:	0a1b      	lsrs	r3, r3, #8
 800abea:	071a      	lsls	r2, r3, #28
 800abec:	bf04      	itt	eq
 800abee:	091b      	lsreq	r3, r3, #4
 800abf0:	3004      	addeq	r0, #4
 800abf2:	079a      	lsls	r2, r3, #30
 800abf4:	bf04      	itt	eq
 800abf6:	089b      	lsreq	r3, r3, #2
 800abf8:	3002      	addeq	r0, #2
 800abfa:	07da      	lsls	r2, r3, #31
 800abfc:	d403      	bmi.n	800ac06 <__lo0bits+0x4e>
 800abfe:	085b      	lsrs	r3, r3, #1
 800ac00:	f100 0001 	add.w	r0, r0, #1
 800ac04:	d005      	beq.n	800ac12 <__lo0bits+0x5a>
 800ac06:	600b      	str	r3, [r1, #0]
 800ac08:	4770      	bx	lr
 800ac0a:	4610      	mov	r0, r2
 800ac0c:	e7e9      	b.n	800abe2 <__lo0bits+0x2a>
 800ac0e:	2000      	movs	r0, #0
 800ac10:	4770      	bx	lr
 800ac12:	2020      	movs	r0, #32
 800ac14:	4770      	bx	lr
	...

0800ac18 <__i2b>:
 800ac18:	b510      	push	{r4, lr}
 800ac1a:	460c      	mov	r4, r1
 800ac1c:	2101      	movs	r1, #1
 800ac1e:	f7ff ff03 	bl	800aa28 <_Balloc>
 800ac22:	4602      	mov	r2, r0
 800ac24:	b928      	cbnz	r0, 800ac32 <__i2b+0x1a>
 800ac26:	4b05      	ldr	r3, [pc, #20]	; (800ac3c <__i2b+0x24>)
 800ac28:	4805      	ldr	r0, [pc, #20]	; (800ac40 <__i2b+0x28>)
 800ac2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ac2e:	f000 fce1 	bl	800b5f4 <__assert_func>
 800ac32:	2301      	movs	r3, #1
 800ac34:	6144      	str	r4, [r0, #20]
 800ac36:	6103      	str	r3, [r0, #16]
 800ac38:	bd10      	pop	{r4, pc}
 800ac3a:	bf00      	nop
 800ac3c:	0800c453 	.word	0x0800c453
 800ac40:	0800c464 	.word	0x0800c464

0800ac44 <__multiply>:
 800ac44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac48:	4691      	mov	r9, r2
 800ac4a:	690a      	ldr	r2, [r1, #16]
 800ac4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	bfb8      	it	lt
 800ac54:	460b      	movlt	r3, r1
 800ac56:	460c      	mov	r4, r1
 800ac58:	bfbc      	itt	lt
 800ac5a:	464c      	movlt	r4, r9
 800ac5c:	4699      	movlt	r9, r3
 800ac5e:	6927      	ldr	r7, [r4, #16]
 800ac60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ac64:	68a3      	ldr	r3, [r4, #8]
 800ac66:	6861      	ldr	r1, [r4, #4]
 800ac68:	eb07 060a 	add.w	r6, r7, sl
 800ac6c:	42b3      	cmp	r3, r6
 800ac6e:	b085      	sub	sp, #20
 800ac70:	bfb8      	it	lt
 800ac72:	3101      	addlt	r1, #1
 800ac74:	f7ff fed8 	bl	800aa28 <_Balloc>
 800ac78:	b930      	cbnz	r0, 800ac88 <__multiply+0x44>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	4b44      	ldr	r3, [pc, #272]	; (800ad90 <__multiply+0x14c>)
 800ac7e:	4845      	ldr	r0, [pc, #276]	; (800ad94 <__multiply+0x150>)
 800ac80:	f240 115d 	movw	r1, #349	; 0x15d
 800ac84:	f000 fcb6 	bl	800b5f4 <__assert_func>
 800ac88:	f100 0514 	add.w	r5, r0, #20
 800ac8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ac90:	462b      	mov	r3, r5
 800ac92:	2200      	movs	r2, #0
 800ac94:	4543      	cmp	r3, r8
 800ac96:	d321      	bcc.n	800acdc <__multiply+0x98>
 800ac98:	f104 0314 	add.w	r3, r4, #20
 800ac9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aca0:	f109 0314 	add.w	r3, r9, #20
 800aca4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aca8:	9202      	str	r2, [sp, #8]
 800acaa:	1b3a      	subs	r2, r7, r4
 800acac:	3a15      	subs	r2, #21
 800acae:	f022 0203 	bic.w	r2, r2, #3
 800acb2:	3204      	adds	r2, #4
 800acb4:	f104 0115 	add.w	r1, r4, #21
 800acb8:	428f      	cmp	r7, r1
 800acba:	bf38      	it	cc
 800acbc:	2204      	movcc	r2, #4
 800acbe:	9201      	str	r2, [sp, #4]
 800acc0:	9a02      	ldr	r2, [sp, #8]
 800acc2:	9303      	str	r3, [sp, #12]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d80c      	bhi.n	800ace2 <__multiply+0x9e>
 800acc8:	2e00      	cmp	r6, #0
 800acca:	dd03      	ble.n	800acd4 <__multiply+0x90>
 800accc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d05a      	beq.n	800ad8a <__multiply+0x146>
 800acd4:	6106      	str	r6, [r0, #16]
 800acd6:	b005      	add	sp, #20
 800acd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acdc:	f843 2b04 	str.w	r2, [r3], #4
 800ace0:	e7d8      	b.n	800ac94 <__multiply+0x50>
 800ace2:	f8b3 a000 	ldrh.w	sl, [r3]
 800ace6:	f1ba 0f00 	cmp.w	sl, #0
 800acea:	d024      	beq.n	800ad36 <__multiply+0xf2>
 800acec:	f104 0e14 	add.w	lr, r4, #20
 800acf0:	46a9      	mov	r9, r5
 800acf2:	f04f 0c00 	mov.w	ip, #0
 800acf6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800acfa:	f8d9 1000 	ldr.w	r1, [r9]
 800acfe:	fa1f fb82 	uxth.w	fp, r2
 800ad02:	b289      	uxth	r1, r1
 800ad04:	fb0a 110b 	mla	r1, sl, fp, r1
 800ad08:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ad0c:	f8d9 2000 	ldr.w	r2, [r9]
 800ad10:	4461      	add	r1, ip
 800ad12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad16:	fb0a c20b 	mla	r2, sl, fp, ip
 800ad1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ad1e:	b289      	uxth	r1, r1
 800ad20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ad24:	4577      	cmp	r7, lr
 800ad26:	f849 1b04 	str.w	r1, [r9], #4
 800ad2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad2e:	d8e2      	bhi.n	800acf6 <__multiply+0xb2>
 800ad30:	9a01      	ldr	r2, [sp, #4]
 800ad32:	f845 c002 	str.w	ip, [r5, r2]
 800ad36:	9a03      	ldr	r2, [sp, #12]
 800ad38:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ad3c:	3304      	adds	r3, #4
 800ad3e:	f1b9 0f00 	cmp.w	r9, #0
 800ad42:	d020      	beq.n	800ad86 <__multiply+0x142>
 800ad44:	6829      	ldr	r1, [r5, #0]
 800ad46:	f104 0c14 	add.w	ip, r4, #20
 800ad4a:	46ae      	mov	lr, r5
 800ad4c:	f04f 0a00 	mov.w	sl, #0
 800ad50:	f8bc b000 	ldrh.w	fp, [ip]
 800ad54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ad58:	fb09 220b 	mla	r2, r9, fp, r2
 800ad5c:	4492      	add	sl, r2
 800ad5e:	b289      	uxth	r1, r1
 800ad60:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ad64:	f84e 1b04 	str.w	r1, [lr], #4
 800ad68:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ad6c:	f8be 1000 	ldrh.w	r1, [lr]
 800ad70:	0c12      	lsrs	r2, r2, #16
 800ad72:	fb09 1102 	mla	r1, r9, r2, r1
 800ad76:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ad7a:	4567      	cmp	r7, ip
 800ad7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ad80:	d8e6      	bhi.n	800ad50 <__multiply+0x10c>
 800ad82:	9a01      	ldr	r2, [sp, #4]
 800ad84:	50a9      	str	r1, [r5, r2]
 800ad86:	3504      	adds	r5, #4
 800ad88:	e79a      	b.n	800acc0 <__multiply+0x7c>
 800ad8a:	3e01      	subs	r6, #1
 800ad8c:	e79c      	b.n	800acc8 <__multiply+0x84>
 800ad8e:	bf00      	nop
 800ad90:	0800c453 	.word	0x0800c453
 800ad94:	0800c464 	.word	0x0800c464

0800ad98 <__pow5mult>:
 800ad98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad9c:	4615      	mov	r5, r2
 800ad9e:	f012 0203 	ands.w	r2, r2, #3
 800ada2:	4606      	mov	r6, r0
 800ada4:	460f      	mov	r7, r1
 800ada6:	d007      	beq.n	800adb8 <__pow5mult+0x20>
 800ada8:	4c25      	ldr	r4, [pc, #148]	; (800ae40 <__pow5mult+0xa8>)
 800adaa:	3a01      	subs	r2, #1
 800adac:	2300      	movs	r3, #0
 800adae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800adb2:	f7ff fe9b 	bl	800aaec <__multadd>
 800adb6:	4607      	mov	r7, r0
 800adb8:	10ad      	asrs	r5, r5, #2
 800adba:	d03d      	beq.n	800ae38 <__pow5mult+0xa0>
 800adbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800adbe:	b97c      	cbnz	r4, 800ade0 <__pow5mult+0x48>
 800adc0:	2010      	movs	r0, #16
 800adc2:	f7ff fe1b 	bl	800a9fc <malloc>
 800adc6:	4602      	mov	r2, r0
 800adc8:	6270      	str	r0, [r6, #36]	; 0x24
 800adca:	b928      	cbnz	r0, 800add8 <__pow5mult+0x40>
 800adcc:	4b1d      	ldr	r3, [pc, #116]	; (800ae44 <__pow5mult+0xac>)
 800adce:	481e      	ldr	r0, [pc, #120]	; (800ae48 <__pow5mult+0xb0>)
 800add0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800add4:	f000 fc0e 	bl	800b5f4 <__assert_func>
 800add8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800addc:	6004      	str	r4, [r0, #0]
 800adde:	60c4      	str	r4, [r0, #12]
 800ade0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ade4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ade8:	b94c      	cbnz	r4, 800adfe <__pow5mult+0x66>
 800adea:	f240 2171 	movw	r1, #625	; 0x271
 800adee:	4630      	mov	r0, r6
 800adf0:	f7ff ff12 	bl	800ac18 <__i2b>
 800adf4:	2300      	movs	r3, #0
 800adf6:	f8c8 0008 	str.w	r0, [r8, #8]
 800adfa:	4604      	mov	r4, r0
 800adfc:	6003      	str	r3, [r0, #0]
 800adfe:	f04f 0900 	mov.w	r9, #0
 800ae02:	07eb      	lsls	r3, r5, #31
 800ae04:	d50a      	bpl.n	800ae1c <__pow5mult+0x84>
 800ae06:	4639      	mov	r1, r7
 800ae08:	4622      	mov	r2, r4
 800ae0a:	4630      	mov	r0, r6
 800ae0c:	f7ff ff1a 	bl	800ac44 <__multiply>
 800ae10:	4639      	mov	r1, r7
 800ae12:	4680      	mov	r8, r0
 800ae14:	4630      	mov	r0, r6
 800ae16:	f7ff fe47 	bl	800aaa8 <_Bfree>
 800ae1a:	4647      	mov	r7, r8
 800ae1c:	106d      	asrs	r5, r5, #1
 800ae1e:	d00b      	beq.n	800ae38 <__pow5mult+0xa0>
 800ae20:	6820      	ldr	r0, [r4, #0]
 800ae22:	b938      	cbnz	r0, 800ae34 <__pow5mult+0x9c>
 800ae24:	4622      	mov	r2, r4
 800ae26:	4621      	mov	r1, r4
 800ae28:	4630      	mov	r0, r6
 800ae2a:	f7ff ff0b 	bl	800ac44 <__multiply>
 800ae2e:	6020      	str	r0, [r4, #0]
 800ae30:	f8c0 9000 	str.w	r9, [r0]
 800ae34:	4604      	mov	r4, r0
 800ae36:	e7e4      	b.n	800ae02 <__pow5mult+0x6a>
 800ae38:	4638      	mov	r0, r7
 800ae3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae3e:	bf00      	nop
 800ae40:	0800c5b0 	.word	0x0800c5b0
 800ae44:	0800c3e1 	.word	0x0800c3e1
 800ae48:	0800c464 	.word	0x0800c464

0800ae4c <__lshift>:
 800ae4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae50:	460c      	mov	r4, r1
 800ae52:	6849      	ldr	r1, [r1, #4]
 800ae54:	6923      	ldr	r3, [r4, #16]
 800ae56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae5a:	68a3      	ldr	r3, [r4, #8]
 800ae5c:	4607      	mov	r7, r0
 800ae5e:	4691      	mov	r9, r2
 800ae60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae64:	f108 0601 	add.w	r6, r8, #1
 800ae68:	42b3      	cmp	r3, r6
 800ae6a:	db0b      	blt.n	800ae84 <__lshift+0x38>
 800ae6c:	4638      	mov	r0, r7
 800ae6e:	f7ff fddb 	bl	800aa28 <_Balloc>
 800ae72:	4605      	mov	r5, r0
 800ae74:	b948      	cbnz	r0, 800ae8a <__lshift+0x3e>
 800ae76:	4602      	mov	r2, r0
 800ae78:	4b2a      	ldr	r3, [pc, #168]	; (800af24 <__lshift+0xd8>)
 800ae7a:	482b      	ldr	r0, [pc, #172]	; (800af28 <__lshift+0xdc>)
 800ae7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ae80:	f000 fbb8 	bl	800b5f4 <__assert_func>
 800ae84:	3101      	adds	r1, #1
 800ae86:	005b      	lsls	r3, r3, #1
 800ae88:	e7ee      	b.n	800ae68 <__lshift+0x1c>
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	f100 0114 	add.w	r1, r0, #20
 800ae90:	f100 0210 	add.w	r2, r0, #16
 800ae94:	4618      	mov	r0, r3
 800ae96:	4553      	cmp	r3, sl
 800ae98:	db37      	blt.n	800af0a <__lshift+0xbe>
 800ae9a:	6920      	ldr	r0, [r4, #16]
 800ae9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aea0:	f104 0314 	add.w	r3, r4, #20
 800aea4:	f019 091f 	ands.w	r9, r9, #31
 800aea8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aeac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aeb0:	d02f      	beq.n	800af12 <__lshift+0xc6>
 800aeb2:	f1c9 0e20 	rsb	lr, r9, #32
 800aeb6:	468a      	mov	sl, r1
 800aeb8:	f04f 0c00 	mov.w	ip, #0
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	fa02 f209 	lsl.w	r2, r2, r9
 800aec2:	ea42 020c 	orr.w	r2, r2, ip
 800aec6:	f84a 2b04 	str.w	r2, [sl], #4
 800aeca:	f853 2b04 	ldr.w	r2, [r3], #4
 800aece:	4298      	cmp	r0, r3
 800aed0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800aed4:	d8f2      	bhi.n	800aebc <__lshift+0x70>
 800aed6:	1b03      	subs	r3, r0, r4
 800aed8:	3b15      	subs	r3, #21
 800aeda:	f023 0303 	bic.w	r3, r3, #3
 800aede:	3304      	adds	r3, #4
 800aee0:	f104 0215 	add.w	r2, r4, #21
 800aee4:	4290      	cmp	r0, r2
 800aee6:	bf38      	it	cc
 800aee8:	2304      	movcc	r3, #4
 800aeea:	f841 c003 	str.w	ip, [r1, r3]
 800aeee:	f1bc 0f00 	cmp.w	ip, #0
 800aef2:	d001      	beq.n	800aef8 <__lshift+0xac>
 800aef4:	f108 0602 	add.w	r6, r8, #2
 800aef8:	3e01      	subs	r6, #1
 800aefa:	4638      	mov	r0, r7
 800aefc:	612e      	str	r6, [r5, #16]
 800aefe:	4621      	mov	r1, r4
 800af00:	f7ff fdd2 	bl	800aaa8 <_Bfree>
 800af04:	4628      	mov	r0, r5
 800af06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800af0e:	3301      	adds	r3, #1
 800af10:	e7c1      	b.n	800ae96 <__lshift+0x4a>
 800af12:	3904      	subs	r1, #4
 800af14:	f853 2b04 	ldr.w	r2, [r3], #4
 800af18:	f841 2f04 	str.w	r2, [r1, #4]!
 800af1c:	4298      	cmp	r0, r3
 800af1e:	d8f9      	bhi.n	800af14 <__lshift+0xc8>
 800af20:	e7ea      	b.n	800aef8 <__lshift+0xac>
 800af22:	bf00      	nop
 800af24:	0800c453 	.word	0x0800c453
 800af28:	0800c464 	.word	0x0800c464

0800af2c <__mcmp>:
 800af2c:	b530      	push	{r4, r5, lr}
 800af2e:	6902      	ldr	r2, [r0, #16]
 800af30:	690c      	ldr	r4, [r1, #16]
 800af32:	1b12      	subs	r2, r2, r4
 800af34:	d10e      	bne.n	800af54 <__mcmp+0x28>
 800af36:	f100 0314 	add.w	r3, r0, #20
 800af3a:	3114      	adds	r1, #20
 800af3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800af40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800af44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800af48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800af4c:	42a5      	cmp	r5, r4
 800af4e:	d003      	beq.n	800af58 <__mcmp+0x2c>
 800af50:	d305      	bcc.n	800af5e <__mcmp+0x32>
 800af52:	2201      	movs	r2, #1
 800af54:	4610      	mov	r0, r2
 800af56:	bd30      	pop	{r4, r5, pc}
 800af58:	4283      	cmp	r3, r0
 800af5a:	d3f3      	bcc.n	800af44 <__mcmp+0x18>
 800af5c:	e7fa      	b.n	800af54 <__mcmp+0x28>
 800af5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af62:	e7f7      	b.n	800af54 <__mcmp+0x28>

0800af64 <__mdiff>:
 800af64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af68:	460c      	mov	r4, r1
 800af6a:	4606      	mov	r6, r0
 800af6c:	4611      	mov	r1, r2
 800af6e:	4620      	mov	r0, r4
 800af70:	4690      	mov	r8, r2
 800af72:	f7ff ffdb 	bl	800af2c <__mcmp>
 800af76:	1e05      	subs	r5, r0, #0
 800af78:	d110      	bne.n	800af9c <__mdiff+0x38>
 800af7a:	4629      	mov	r1, r5
 800af7c:	4630      	mov	r0, r6
 800af7e:	f7ff fd53 	bl	800aa28 <_Balloc>
 800af82:	b930      	cbnz	r0, 800af92 <__mdiff+0x2e>
 800af84:	4b3a      	ldr	r3, [pc, #232]	; (800b070 <__mdiff+0x10c>)
 800af86:	4602      	mov	r2, r0
 800af88:	f240 2132 	movw	r1, #562	; 0x232
 800af8c:	4839      	ldr	r0, [pc, #228]	; (800b074 <__mdiff+0x110>)
 800af8e:	f000 fb31 	bl	800b5f4 <__assert_func>
 800af92:	2301      	movs	r3, #1
 800af94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af9c:	bfa4      	itt	ge
 800af9e:	4643      	movge	r3, r8
 800afa0:	46a0      	movge	r8, r4
 800afa2:	4630      	mov	r0, r6
 800afa4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800afa8:	bfa6      	itte	ge
 800afaa:	461c      	movge	r4, r3
 800afac:	2500      	movge	r5, #0
 800afae:	2501      	movlt	r5, #1
 800afb0:	f7ff fd3a 	bl	800aa28 <_Balloc>
 800afb4:	b920      	cbnz	r0, 800afc0 <__mdiff+0x5c>
 800afb6:	4b2e      	ldr	r3, [pc, #184]	; (800b070 <__mdiff+0x10c>)
 800afb8:	4602      	mov	r2, r0
 800afba:	f44f 7110 	mov.w	r1, #576	; 0x240
 800afbe:	e7e5      	b.n	800af8c <__mdiff+0x28>
 800afc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800afc4:	6926      	ldr	r6, [r4, #16]
 800afc6:	60c5      	str	r5, [r0, #12]
 800afc8:	f104 0914 	add.w	r9, r4, #20
 800afcc:	f108 0514 	add.w	r5, r8, #20
 800afd0:	f100 0e14 	add.w	lr, r0, #20
 800afd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800afd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800afdc:	f108 0210 	add.w	r2, r8, #16
 800afe0:	46f2      	mov	sl, lr
 800afe2:	2100      	movs	r1, #0
 800afe4:	f859 3b04 	ldr.w	r3, [r9], #4
 800afe8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800afec:	fa1f f883 	uxth.w	r8, r3
 800aff0:	fa11 f18b 	uxtah	r1, r1, fp
 800aff4:	0c1b      	lsrs	r3, r3, #16
 800aff6:	eba1 0808 	sub.w	r8, r1, r8
 800affa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800affe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b002:	fa1f f888 	uxth.w	r8, r8
 800b006:	1419      	asrs	r1, r3, #16
 800b008:	454e      	cmp	r6, r9
 800b00a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b00e:	f84a 3b04 	str.w	r3, [sl], #4
 800b012:	d8e7      	bhi.n	800afe4 <__mdiff+0x80>
 800b014:	1b33      	subs	r3, r6, r4
 800b016:	3b15      	subs	r3, #21
 800b018:	f023 0303 	bic.w	r3, r3, #3
 800b01c:	3304      	adds	r3, #4
 800b01e:	3415      	adds	r4, #21
 800b020:	42a6      	cmp	r6, r4
 800b022:	bf38      	it	cc
 800b024:	2304      	movcc	r3, #4
 800b026:	441d      	add	r5, r3
 800b028:	4473      	add	r3, lr
 800b02a:	469e      	mov	lr, r3
 800b02c:	462e      	mov	r6, r5
 800b02e:	4566      	cmp	r6, ip
 800b030:	d30e      	bcc.n	800b050 <__mdiff+0xec>
 800b032:	f10c 0203 	add.w	r2, ip, #3
 800b036:	1b52      	subs	r2, r2, r5
 800b038:	f022 0203 	bic.w	r2, r2, #3
 800b03c:	3d03      	subs	r5, #3
 800b03e:	45ac      	cmp	ip, r5
 800b040:	bf38      	it	cc
 800b042:	2200      	movcc	r2, #0
 800b044:	441a      	add	r2, r3
 800b046:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b04a:	b17b      	cbz	r3, 800b06c <__mdiff+0x108>
 800b04c:	6107      	str	r7, [r0, #16]
 800b04e:	e7a3      	b.n	800af98 <__mdiff+0x34>
 800b050:	f856 8b04 	ldr.w	r8, [r6], #4
 800b054:	fa11 f288 	uxtah	r2, r1, r8
 800b058:	1414      	asrs	r4, r2, #16
 800b05a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b05e:	b292      	uxth	r2, r2
 800b060:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b064:	f84e 2b04 	str.w	r2, [lr], #4
 800b068:	1421      	asrs	r1, r4, #16
 800b06a:	e7e0      	b.n	800b02e <__mdiff+0xca>
 800b06c:	3f01      	subs	r7, #1
 800b06e:	e7ea      	b.n	800b046 <__mdiff+0xe2>
 800b070:	0800c453 	.word	0x0800c453
 800b074:	0800c464 	.word	0x0800c464

0800b078 <__d2b>:
 800b078:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b07c:	4689      	mov	r9, r1
 800b07e:	2101      	movs	r1, #1
 800b080:	ec57 6b10 	vmov	r6, r7, d0
 800b084:	4690      	mov	r8, r2
 800b086:	f7ff fccf 	bl	800aa28 <_Balloc>
 800b08a:	4604      	mov	r4, r0
 800b08c:	b930      	cbnz	r0, 800b09c <__d2b+0x24>
 800b08e:	4602      	mov	r2, r0
 800b090:	4b25      	ldr	r3, [pc, #148]	; (800b128 <__d2b+0xb0>)
 800b092:	4826      	ldr	r0, [pc, #152]	; (800b12c <__d2b+0xb4>)
 800b094:	f240 310a 	movw	r1, #778	; 0x30a
 800b098:	f000 faac 	bl	800b5f4 <__assert_func>
 800b09c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b0a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b0a4:	bb35      	cbnz	r5, 800b0f4 <__d2b+0x7c>
 800b0a6:	2e00      	cmp	r6, #0
 800b0a8:	9301      	str	r3, [sp, #4]
 800b0aa:	d028      	beq.n	800b0fe <__d2b+0x86>
 800b0ac:	4668      	mov	r0, sp
 800b0ae:	9600      	str	r6, [sp, #0]
 800b0b0:	f7ff fd82 	bl	800abb8 <__lo0bits>
 800b0b4:	9900      	ldr	r1, [sp, #0]
 800b0b6:	b300      	cbz	r0, 800b0fa <__d2b+0x82>
 800b0b8:	9a01      	ldr	r2, [sp, #4]
 800b0ba:	f1c0 0320 	rsb	r3, r0, #32
 800b0be:	fa02 f303 	lsl.w	r3, r2, r3
 800b0c2:	430b      	orrs	r3, r1
 800b0c4:	40c2      	lsrs	r2, r0
 800b0c6:	6163      	str	r3, [r4, #20]
 800b0c8:	9201      	str	r2, [sp, #4]
 800b0ca:	9b01      	ldr	r3, [sp, #4]
 800b0cc:	61a3      	str	r3, [r4, #24]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	bf14      	ite	ne
 800b0d2:	2202      	movne	r2, #2
 800b0d4:	2201      	moveq	r2, #1
 800b0d6:	6122      	str	r2, [r4, #16]
 800b0d8:	b1d5      	cbz	r5, 800b110 <__d2b+0x98>
 800b0da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b0de:	4405      	add	r5, r0
 800b0e0:	f8c9 5000 	str.w	r5, [r9]
 800b0e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b0e8:	f8c8 0000 	str.w	r0, [r8]
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	b003      	add	sp, #12
 800b0f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0f8:	e7d5      	b.n	800b0a6 <__d2b+0x2e>
 800b0fa:	6161      	str	r1, [r4, #20]
 800b0fc:	e7e5      	b.n	800b0ca <__d2b+0x52>
 800b0fe:	a801      	add	r0, sp, #4
 800b100:	f7ff fd5a 	bl	800abb8 <__lo0bits>
 800b104:	9b01      	ldr	r3, [sp, #4]
 800b106:	6163      	str	r3, [r4, #20]
 800b108:	2201      	movs	r2, #1
 800b10a:	6122      	str	r2, [r4, #16]
 800b10c:	3020      	adds	r0, #32
 800b10e:	e7e3      	b.n	800b0d8 <__d2b+0x60>
 800b110:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b114:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b118:	f8c9 0000 	str.w	r0, [r9]
 800b11c:	6918      	ldr	r0, [r3, #16]
 800b11e:	f7ff fd2b 	bl	800ab78 <__hi0bits>
 800b122:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b126:	e7df      	b.n	800b0e8 <__d2b+0x70>
 800b128:	0800c453 	.word	0x0800c453
 800b12c:	0800c464 	.word	0x0800c464

0800b130 <_calloc_r>:
 800b130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b132:	fba1 2402 	umull	r2, r4, r1, r2
 800b136:	b94c      	cbnz	r4, 800b14c <_calloc_r+0x1c>
 800b138:	4611      	mov	r1, r2
 800b13a:	9201      	str	r2, [sp, #4]
 800b13c:	f000 f87a 	bl	800b234 <_malloc_r>
 800b140:	9a01      	ldr	r2, [sp, #4]
 800b142:	4605      	mov	r5, r0
 800b144:	b930      	cbnz	r0, 800b154 <_calloc_r+0x24>
 800b146:	4628      	mov	r0, r5
 800b148:	b003      	add	sp, #12
 800b14a:	bd30      	pop	{r4, r5, pc}
 800b14c:	220c      	movs	r2, #12
 800b14e:	6002      	str	r2, [r0, #0]
 800b150:	2500      	movs	r5, #0
 800b152:	e7f8      	b.n	800b146 <_calloc_r+0x16>
 800b154:	4621      	mov	r1, r4
 800b156:	f7fe f9e7 	bl	8009528 <memset>
 800b15a:	e7f4      	b.n	800b146 <_calloc_r+0x16>

0800b15c <_free_r>:
 800b15c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b15e:	2900      	cmp	r1, #0
 800b160:	d044      	beq.n	800b1ec <_free_r+0x90>
 800b162:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b166:	9001      	str	r0, [sp, #4]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	f1a1 0404 	sub.w	r4, r1, #4
 800b16e:	bfb8      	it	lt
 800b170:	18e4      	addlt	r4, r4, r3
 800b172:	f000 fa9b 	bl	800b6ac <__malloc_lock>
 800b176:	4a1e      	ldr	r2, [pc, #120]	; (800b1f0 <_free_r+0x94>)
 800b178:	9801      	ldr	r0, [sp, #4]
 800b17a:	6813      	ldr	r3, [r2, #0]
 800b17c:	b933      	cbnz	r3, 800b18c <_free_r+0x30>
 800b17e:	6063      	str	r3, [r4, #4]
 800b180:	6014      	str	r4, [r2, #0]
 800b182:	b003      	add	sp, #12
 800b184:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b188:	f000 ba96 	b.w	800b6b8 <__malloc_unlock>
 800b18c:	42a3      	cmp	r3, r4
 800b18e:	d908      	bls.n	800b1a2 <_free_r+0x46>
 800b190:	6825      	ldr	r5, [r4, #0]
 800b192:	1961      	adds	r1, r4, r5
 800b194:	428b      	cmp	r3, r1
 800b196:	bf01      	itttt	eq
 800b198:	6819      	ldreq	r1, [r3, #0]
 800b19a:	685b      	ldreq	r3, [r3, #4]
 800b19c:	1949      	addeq	r1, r1, r5
 800b19e:	6021      	streq	r1, [r4, #0]
 800b1a0:	e7ed      	b.n	800b17e <_free_r+0x22>
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	b10b      	cbz	r3, 800b1ac <_free_r+0x50>
 800b1a8:	42a3      	cmp	r3, r4
 800b1aa:	d9fa      	bls.n	800b1a2 <_free_r+0x46>
 800b1ac:	6811      	ldr	r1, [r2, #0]
 800b1ae:	1855      	adds	r5, r2, r1
 800b1b0:	42a5      	cmp	r5, r4
 800b1b2:	d10b      	bne.n	800b1cc <_free_r+0x70>
 800b1b4:	6824      	ldr	r4, [r4, #0]
 800b1b6:	4421      	add	r1, r4
 800b1b8:	1854      	adds	r4, r2, r1
 800b1ba:	42a3      	cmp	r3, r4
 800b1bc:	6011      	str	r1, [r2, #0]
 800b1be:	d1e0      	bne.n	800b182 <_free_r+0x26>
 800b1c0:	681c      	ldr	r4, [r3, #0]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	6053      	str	r3, [r2, #4]
 800b1c6:	4421      	add	r1, r4
 800b1c8:	6011      	str	r1, [r2, #0]
 800b1ca:	e7da      	b.n	800b182 <_free_r+0x26>
 800b1cc:	d902      	bls.n	800b1d4 <_free_r+0x78>
 800b1ce:	230c      	movs	r3, #12
 800b1d0:	6003      	str	r3, [r0, #0]
 800b1d2:	e7d6      	b.n	800b182 <_free_r+0x26>
 800b1d4:	6825      	ldr	r5, [r4, #0]
 800b1d6:	1961      	adds	r1, r4, r5
 800b1d8:	428b      	cmp	r3, r1
 800b1da:	bf04      	itt	eq
 800b1dc:	6819      	ldreq	r1, [r3, #0]
 800b1de:	685b      	ldreq	r3, [r3, #4]
 800b1e0:	6063      	str	r3, [r4, #4]
 800b1e2:	bf04      	itt	eq
 800b1e4:	1949      	addeq	r1, r1, r5
 800b1e6:	6021      	streq	r1, [r4, #0]
 800b1e8:	6054      	str	r4, [r2, #4]
 800b1ea:	e7ca      	b.n	800b182 <_free_r+0x26>
 800b1ec:	b003      	add	sp, #12
 800b1ee:	bd30      	pop	{r4, r5, pc}
 800b1f0:	24000800 	.word	0x24000800

0800b1f4 <sbrk_aligned>:
 800b1f4:	b570      	push	{r4, r5, r6, lr}
 800b1f6:	4e0e      	ldr	r6, [pc, #56]	; (800b230 <sbrk_aligned+0x3c>)
 800b1f8:	460c      	mov	r4, r1
 800b1fa:	6831      	ldr	r1, [r6, #0]
 800b1fc:	4605      	mov	r5, r0
 800b1fe:	b911      	cbnz	r1, 800b206 <sbrk_aligned+0x12>
 800b200:	f000 f9e8 	bl	800b5d4 <_sbrk_r>
 800b204:	6030      	str	r0, [r6, #0]
 800b206:	4621      	mov	r1, r4
 800b208:	4628      	mov	r0, r5
 800b20a:	f000 f9e3 	bl	800b5d4 <_sbrk_r>
 800b20e:	1c43      	adds	r3, r0, #1
 800b210:	d00a      	beq.n	800b228 <sbrk_aligned+0x34>
 800b212:	1cc4      	adds	r4, r0, #3
 800b214:	f024 0403 	bic.w	r4, r4, #3
 800b218:	42a0      	cmp	r0, r4
 800b21a:	d007      	beq.n	800b22c <sbrk_aligned+0x38>
 800b21c:	1a21      	subs	r1, r4, r0
 800b21e:	4628      	mov	r0, r5
 800b220:	f000 f9d8 	bl	800b5d4 <_sbrk_r>
 800b224:	3001      	adds	r0, #1
 800b226:	d101      	bne.n	800b22c <sbrk_aligned+0x38>
 800b228:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b22c:	4620      	mov	r0, r4
 800b22e:	bd70      	pop	{r4, r5, r6, pc}
 800b230:	24000804 	.word	0x24000804

0800b234 <_malloc_r>:
 800b234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b238:	1ccd      	adds	r5, r1, #3
 800b23a:	f025 0503 	bic.w	r5, r5, #3
 800b23e:	3508      	adds	r5, #8
 800b240:	2d0c      	cmp	r5, #12
 800b242:	bf38      	it	cc
 800b244:	250c      	movcc	r5, #12
 800b246:	2d00      	cmp	r5, #0
 800b248:	4607      	mov	r7, r0
 800b24a:	db01      	blt.n	800b250 <_malloc_r+0x1c>
 800b24c:	42a9      	cmp	r1, r5
 800b24e:	d905      	bls.n	800b25c <_malloc_r+0x28>
 800b250:	230c      	movs	r3, #12
 800b252:	603b      	str	r3, [r7, #0]
 800b254:	2600      	movs	r6, #0
 800b256:	4630      	mov	r0, r6
 800b258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b25c:	4e2e      	ldr	r6, [pc, #184]	; (800b318 <_malloc_r+0xe4>)
 800b25e:	f000 fa25 	bl	800b6ac <__malloc_lock>
 800b262:	6833      	ldr	r3, [r6, #0]
 800b264:	461c      	mov	r4, r3
 800b266:	bb34      	cbnz	r4, 800b2b6 <_malloc_r+0x82>
 800b268:	4629      	mov	r1, r5
 800b26a:	4638      	mov	r0, r7
 800b26c:	f7ff ffc2 	bl	800b1f4 <sbrk_aligned>
 800b270:	1c43      	adds	r3, r0, #1
 800b272:	4604      	mov	r4, r0
 800b274:	d14d      	bne.n	800b312 <_malloc_r+0xde>
 800b276:	6834      	ldr	r4, [r6, #0]
 800b278:	4626      	mov	r6, r4
 800b27a:	2e00      	cmp	r6, #0
 800b27c:	d140      	bne.n	800b300 <_malloc_r+0xcc>
 800b27e:	6823      	ldr	r3, [r4, #0]
 800b280:	4631      	mov	r1, r6
 800b282:	4638      	mov	r0, r7
 800b284:	eb04 0803 	add.w	r8, r4, r3
 800b288:	f000 f9a4 	bl	800b5d4 <_sbrk_r>
 800b28c:	4580      	cmp	r8, r0
 800b28e:	d13a      	bne.n	800b306 <_malloc_r+0xd2>
 800b290:	6821      	ldr	r1, [r4, #0]
 800b292:	3503      	adds	r5, #3
 800b294:	1a6d      	subs	r5, r5, r1
 800b296:	f025 0503 	bic.w	r5, r5, #3
 800b29a:	3508      	adds	r5, #8
 800b29c:	2d0c      	cmp	r5, #12
 800b29e:	bf38      	it	cc
 800b2a0:	250c      	movcc	r5, #12
 800b2a2:	4629      	mov	r1, r5
 800b2a4:	4638      	mov	r0, r7
 800b2a6:	f7ff ffa5 	bl	800b1f4 <sbrk_aligned>
 800b2aa:	3001      	adds	r0, #1
 800b2ac:	d02b      	beq.n	800b306 <_malloc_r+0xd2>
 800b2ae:	6823      	ldr	r3, [r4, #0]
 800b2b0:	442b      	add	r3, r5
 800b2b2:	6023      	str	r3, [r4, #0]
 800b2b4:	e00e      	b.n	800b2d4 <_malloc_r+0xa0>
 800b2b6:	6822      	ldr	r2, [r4, #0]
 800b2b8:	1b52      	subs	r2, r2, r5
 800b2ba:	d41e      	bmi.n	800b2fa <_malloc_r+0xc6>
 800b2bc:	2a0b      	cmp	r2, #11
 800b2be:	d916      	bls.n	800b2ee <_malloc_r+0xba>
 800b2c0:	1961      	adds	r1, r4, r5
 800b2c2:	42a3      	cmp	r3, r4
 800b2c4:	6025      	str	r5, [r4, #0]
 800b2c6:	bf18      	it	ne
 800b2c8:	6059      	strne	r1, [r3, #4]
 800b2ca:	6863      	ldr	r3, [r4, #4]
 800b2cc:	bf08      	it	eq
 800b2ce:	6031      	streq	r1, [r6, #0]
 800b2d0:	5162      	str	r2, [r4, r5]
 800b2d2:	604b      	str	r3, [r1, #4]
 800b2d4:	4638      	mov	r0, r7
 800b2d6:	f104 060b 	add.w	r6, r4, #11
 800b2da:	f000 f9ed 	bl	800b6b8 <__malloc_unlock>
 800b2de:	f026 0607 	bic.w	r6, r6, #7
 800b2e2:	1d23      	adds	r3, r4, #4
 800b2e4:	1af2      	subs	r2, r6, r3
 800b2e6:	d0b6      	beq.n	800b256 <_malloc_r+0x22>
 800b2e8:	1b9b      	subs	r3, r3, r6
 800b2ea:	50a3      	str	r3, [r4, r2]
 800b2ec:	e7b3      	b.n	800b256 <_malloc_r+0x22>
 800b2ee:	6862      	ldr	r2, [r4, #4]
 800b2f0:	42a3      	cmp	r3, r4
 800b2f2:	bf0c      	ite	eq
 800b2f4:	6032      	streq	r2, [r6, #0]
 800b2f6:	605a      	strne	r2, [r3, #4]
 800b2f8:	e7ec      	b.n	800b2d4 <_malloc_r+0xa0>
 800b2fa:	4623      	mov	r3, r4
 800b2fc:	6864      	ldr	r4, [r4, #4]
 800b2fe:	e7b2      	b.n	800b266 <_malloc_r+0x32>
 800b300:	4634      	mov	r4, r6
 800b302:	6876      	ldr	r6, [r6, #4]
 800b304:	e7b9      	b.n	800b27a <_malloc_r+0x46>
 800b306:	230c      	movs	r3, #12
 800b308:	603b      	str	r3, [r7, #0]
 800b30a:	4638      	mov	r0, r7
 800b30c:	f000 f9d4 	bl	800b6b8 <__malloc_unlock>
 800b310:	e7a1      	b.n	800b256 <_malloc_r+0x22>
 800b312:	6025      	str	r5, [r4, #0]
 800b314:	e7de      	b.n	800b2d4 <_malloc_r+0xa0>
 800b316:	bf00      	nop
 800b318:	24000800 	.word	0x24000800

0800b31c <__ssputs_r>:
 800b31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b320:	688e      	ldr	r6, [r1, #8]
 800b322:	429e      	cmp	r6, r3
 800b324:	4682      	mov	sl, r0
 800b326:	460c      	mov	r4, r1
 800b328:	4690      	mov	r8, r2
 800b32a:	461f      	mov	r7, r3
 800b32c:	d838      	bhi.n	800b3a0 <__ssputs_r+0x84>
 800b32e:	898a      	ldrh	r2, [r1, #12]
 800b330:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b334:	d032      	beq.n	800b39c <__ssputs_r+0x80>
 800b336:	6825      	ldr	r5, [r4, #0]
 800b338:	6909      	ldr	r1, [r1, #16]
 800b33a:	eba5 0901 	sub.w	r9, r5, r1
 800b33e:	6965      	ldr	r5, [r4, #20]
 800b340:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b344:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b348:	3301      	adds	r3, #1
 800b34a:	444b      	add	r3, r9
 800b34c:	106d      	asrs	r5, r5, #1
 800b34e:	429d      	cmp	r5, r3
 800b350:	bf38      	it	cc
 800b352:	461d      	movcc	r5, r3
 800b354:	0553      	lsls	r3, r2, #21
 800b356:	d531      	bpl.n	800b3bc <__ssputs_r+0xa0>
 800b358:	4629      	mov	r1, r5
 800b35a:	f7ff ff6b 	bl	800b234 <_malloc_r>
 800b35e:	4606      	mov	r6, r0
 800b360:	b950      	cbnz	r0, 800b378 <__ssputs_r+0x5c>
 800b362:	230c      	movs	r3, #12
 800b364:	f8ca 3000 	str.w	r3, [sl]
 800b368:	89a3      	ldrh	r3, [r4, #12]
 800b36a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b36e:	81a3      	strh	r3, [r4, #12]
 800b370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b378:	6921      	ldr	r1, [r4, #16]
 800b37a:	464a      	mov	r2, r9
 800b37c:	f7ff fb46 	bl	800aa0c <memcpy>
 800b380:	89a3      	ldrh	r3, [r4, #12]
 800b382:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b38a:	81a3      	strh	r3, [r4, #12]
 800b38c:	6126      	str	r6, [r4, #16]
 800b38e:	6165      	str	r5, [r4, #20]
 800b390:	444e      	add	r6, r9
 800b392:	eba5 0509 	sub.w	r5, r5, r9
 800b396:	6026      	str	r6, [r4, #0]
 800b398:	60a5      	str	r5, [r4, #8]
 800b39a:	463e      	mov	r6, r7
 800b39c:	42be      	cmp	r6, r7
 800b39e:	d900      	bls.n	800b3a2 <__ssputs_r+0x86>
 800b3a0:	463e      	mov	r6, r7
 800b3a2:	6820      	ldr	r0, [r4, #0]
 800b3a4:	4632      	mov	r2, r6
 800b3a6:	4641      	mov	r1, r8
 800b3a8:	f000 f966 	bl	800b678 <memmove>
 800b3ac:	68a3      	ldr	r3, [r4, #8]
 800b3ae:	1b9b      	subs	r3, r3, r6
 800b3b0:	60a3      	str	r3, [r4, #8]
 800b3b2:	6823      	ldr	r3, [r4, #0]
 800b3b4:	4433      	add	r3, r6
 800b3b6:	6023      	str	r3, [r4, #0]
 800b3b8:	2000      	movs	r0, #0
 800b3ba:	e7db      	b.n	800b374 <__ssputs_r+0x58>
 800b3bc:	462a      	mov	r2, r5
 800b3be:	f000 f981 	bl	800b6c4 <_realloc_r>
 800b3c2:	4606      	mov	r6, r0
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	d1e1      	bne.n	800b38c <__ssputs_r+0x70>
 800b3c8:	6921      	ldr	r1, [r4, #16]
 800b3ca:	4650      	mov	r0, sl
 800b3cc:	f7ff fec6 	bl	800b15c <_free_r>
 800b3d0:	e7c7      	b.n	800b362 <__ssputs_r+0x46>
	...

0800b3d4 <_svfiprintf_r>:
 800b3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d8:	4698      	mov	r8, r3
 800b3da:	898b      	ldrh	r3, [r1, #12]
 800b3dc:	061b      	lsls	r3, r3, #24
 800b3de:	b09d      	sub	sp, #116	; 0x74
 800b3e0:	4607      	mov	r7, r0
 800b3e2:	460d      	mov	r5, r1
 800b3e4:	4614      	mov	r4, r2
 800b3e6:	d50e      	bpl.n	800b406 <_svfiprintf_r+0x32>
 800b3e8:	690b      	ldr	r3, [r1, #16]
 800b3ea:	b963      	cbnz	r3, 800b406 <_svfiprintf_r+0x32>
 800b3ec:	2140      	movs	r1, #64	; 0x40
 800b3ee:	f7ff ff21 	bl	800b234 <_malloc_r>
 800b3f2:	6028      	str	r0, [r5, #0]
 800b3f4:	6128      	str	r0, [r5, #16]
 800b3f6:	b920      	cbnz	r0, 800b402 <_svfiprintf_r+0x2e>
 800b3f8:	230c      	movs	r3, #12
 800b3fa:	603b      	str	r3, [r7, #0]
 800b3fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b400:	e0d1      	b.n	800b5a6 <_svfiprintf_r+0x1d2>
 800b402:	2340      	movs	r3, #64	; 0x40
 800b404:	616b      	str	r3, [r5, #20]
 800b406:	2300      	movs	r3, #0
 800b408:	9309      	str	r3, [sp, #36]	; 0x24
 800b40a:	2320      	movs	r3, #32
 800b40c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b410:	f8cd 800c 	str.w	r8, [sp, #12]
 800b414:	2330      	movs	r3, #48	; 0x30
 800b416:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b5c0 <_svfiprintf_r+0x1ec>
 800b41a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b41e:	f04f 0901 	mov.w	r9, #1
 800b422:	4623      	mov	r3, r4
 800b424:	469a      	mov	sl, r3
 800b426:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b42a:	b10a      	cbz	r2, 800b430 <_svfiprintf_r+0x5c>
 800b42c:	2a25      	cmp	r2, #37	; 0x25
 800b42e:	d1f9      	bne.n	800b424 <_svfiprintf_r+0x50>
 800b430:	ebba 0b04 	subs.w	fp, sl, r4
 800b434:	d00b      	beq.n	800b44e <_svfiprintf_r+0x7a>
 800b436:	465b      	mov	r3, fp
 800b438:	4622      	mov	r2, r4
 800b43a:	4629      	mov	r1, r5
 800b43c:	4638      	mov	r0, r7
 800b43e:	f7ff ff6d 	bl	800b31c <__ssputs_r>
 800b442:	3001      	adds	r0, #1
 800b444:	f000 80aa 	beq.w	800b59c <_svfiprintf_r+0x1c8>
 800b448:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b44a:	445a      	add	r2, fp
 800b44c:	9209      	str	r2, [sp, #36]	; 0x24
 800b44e:	f89a 3000 	ldrb.w	r3, [sl]
 800b452:	2b00      	cmp	r3, #0
 800b454:	f000 80a2 	beq.w	800b59c <_svfiprintf_r+0x1c8>
 800b458:	2300      	movs	r3, #0
 800b45a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b45e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b462:	f10a 0a01 	add.w	sl, sl, #1
 800b466:	9304      	str	r3, [sp, #16]
 800b468:	9307      	str	r3, [sp, #28]
 800b46a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b46e:	931a      	str	r3, [sp, #104]	; 0x68
 800b470:	4654      	mov	r4, sl
 800b472:	2205      	movs	r2, #5
 800b474:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b478:	4851      	ldr	r0, [pc, #324]	; (800b5c0 <_svfiprintf_r+0x1ec>)
 800b47a:	f7f4 ff51 	bl	8000320 <memchr>
 800b47e:	9a04      	ldr	r2, [sp, #16]
 800b480:	b9d8      	cbnz	r0, 800b4ba <_svfiprintf_r+0xe6>
 800b482:	06d0      	lsls	r0, r2, #27
 800b484:	bf44      	itt	mi
 800b486:	2320      	movmi	r3, #32
 800b488:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b48c:	0711      	lsls	r1, r2, #28
 800b48e:	bf44      	itt	mi
 800b490:	232b      	movmi	r3, #43	; 0x2b
 800b492:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b496:	f89a 3000 	ldrb.w	r3, [sl]
 800b49a:	2b2a      	cmp	r3, #42	; 0x2a
 800b49c:	d015      	beq.n	800b4ca <_svfiprintf_r+0xf6>
 800b49e:	9a07      	ldr	r2, [sp, #28]
 800b4a0:	4654      	mov	r4, sl
 800b4a2:	2000      	movs	r0, #0
 800b4a4:	f04f 0c0a 	mov.w	ip, #10
 800b4a8:	4621      	mov	r1, r4
 800b4aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4ae:	3b30      	subs	r3, #48	; 0x30
 800b4b0:	2b09      	cmp	r3, #9
 800b4b2:	d94e      	bls.n	800b552 <_svfiprintf_r+0x17e>
 800b4b4:	b1b0      	cbz	r0, 800b4e4 <_svfiprintf_r+0x110>
 800b4b6:	9207      	str	r2, [sp, #28]
 800b4b8:	e014      	b.n	800b4e4 <_svfiprintf_r+0x110>
 800b4ba:	eba0 0308 	sub.w	r3, r0, r8
 800b4be:	fa09 f303 	lsl.w	r3, r9, r3
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	9304      	str	r3, [sp, #16]
 800b4c6:	46a2      	mov	sl, r4
 800b4c8:	e7d2      	b.n	800b470 <_svfiprintf_r+0x9c>
 800b4ca:	9b03      	ldr	r3, [sp, #12]
 800b4cc:	1d19      	adds	r1, r3, #4
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	9103      	str	r1, [sp, #12]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	bfbb      	ittet	lt
 800b4d6:	425b      	neglt	r3, r3
 800b4d8:	f042 0202 	orrlt.w	r2, r2, #2
 800b4dc:	9307      	strge	r3, [sp, #28]
 800b4de:	9307      	strlt	r3, [sp, #28]
 800b4e0:	bfb8      	it	lt
 800b4e2:	9204      	strlt	r2, [sp, #16]
 800b4e4:	7823      	ldrb	r3, [r4, #0]
 800b4e6:	2b2e      	cmp	r3, #46	; 0x2e
 800b4e8:	d10c      	bne.n	800b504 <_svfiprintf_r+0x130>
 800b4ea:	7863      	ldrb	r3, [r4, #1]
 800b4ec:	2b2a      	cmp	r3, #42	; 0x2a
 800b4ee:	d135      	bne.n	800b55c <_svfiprintf_r+0x188>
 800b4f0:	9b03      	ldr	r3, [sp, #12]
 800b4f2:	1d1a      	adds	r2, r3, #4
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	9203      	str	r2, [sp, #12]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	bfb8      	it	lt
 800b4fc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b500:	3402      	adds	r4, #2
 800b502:	9305      	str	r3, [sp, #20]
 800b504:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b5d0 <_svfiprintf_r+0x1fc>
 800b508:	7821      	ldrb	r1, [r4, #0]
 800b50a:	2203      	movs	r2, #3
 800b50c:	4650      	mov	r0, sl
 800b50e:	f7f4 ff07 	bl	8000320 <memchr>
 800b512:	b140      	cbz	r0, 800b526 <_svfiprintf_r+0x152>
 800b514:	2340      	movs	r3, #64	; 0x40
 800b516:	eba0 000a 	sub.w	r0, r0, sl
 800b51a:	fa03 f000 	lsl.w	r0, r3, r0
 800b51e:	9b04      	ldr	r3, [sp, #16]
 800b520:	4303      	orrs	r3, r0
 800b522:	3401      	adds	r4, #1
 800b524:	9304      	str	r3, [sp, #16]
 800b526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b52a:	4826      	ldr	r0, [pc, #152]	; (800b5c4 <_svfiprintf_r+0x1f0>)
 800b52c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b530:	2206      	movs	r2, #6
 800b532:	f7f4 fef5 	bl	8000320 <memchr>
 800b536:	2800      	cmp	r0, #0
 800b538:	d038      	beq.n	800b5ac <_svfiprintf_r+0x1d8>
 800b53a:	4b23      	ldr	r3, [pc, #140]	; (800b5c8 <_svfiprintf_r+0x1f4>)
 800b53c:	bb1b      	cbnz	r3, 800b586 <_svfiprintf_r+0x1b2>
 800b53e:	9b03      	ldr	r3, [sp, #12]
 800b540:	3307      	adds	r3, #7
 800b542:	f023 0307 	bic.w	r3, r3, #7
 800b546:	3308      	adds	r3, #8
 800b548:	9303      	str	r3, [sp, #12]
 800b54a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b54c:	4433      	add	r3, r6
 800b54e:	9309      	str	r3, [sp, #36]	; 0x24
 800b550:	e767      	b.n	800b422 <_svfiprintf_r+0x4e>
 800b552:	fb0c 3202 	mla	r2, ip, r2, r3
 800b556:	460c      	mov	r4, r1
 800b558:	2001      	movs	r0, #1
 800b55a:	e7a5      	b.n	800b4a8 <_svfiprintf_r+0xd4>
 800b55c:	2300      	movs	r3, #0
 800b55e:	3401      	adds	r4, #1
 800b560:	9305      	str	r3, [sp, #20]
 800b562:	4619      	mov	r1, r3
 800b564:	f04f 0c0a 	mov.w	ip, #10
 800b568:	4620      	mov	r0, r4
 800b56a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b56e:	3a30      	subs	r2, #48	; 0x30
 800b570:	2a09      	cmp	r2, #9
 800b572:	d903      	bls.n	800b57c <_svfiprintf_r+0x1a8>
 800b574:	2b00      	cmp	r3, #0
 800b576:	d0c5      	beq.n	800b504 <_svfiprintf_r+0x130>
 800b578:	9105      	str	r1, [sp, #20]
 800b57a:	e7c3      	b.n	800b504 <_svfiprintf_r+0x130>
 800b57c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b580:	4604      	mov	r4, r0
 800b582:	2301      	movs	r3, #1
 800b584:	e7f0      	b.n	800b568 <_svfiprintf_r+0x194>
 800b586:	ab03      	add	r3, sp, #12
 800b588:	9300      	str	r3, [sp, #0]
 800b58a:	462a      	mov	r2, r5
 800b58c:	4b0f      	ldr	r3, [pc, #60]	; (800b5cc <_svfiprintf_r+0x1f8>)
 800b58e:	a904      	add	r1, sp, #16
 800b590:	4638      	mov	r0, r7
 800b592:	f7fe f861 	bl	8009658 <_printf_float>
 800b596:	1c42      	adds	r2, r0, #1
 800b598:	4606      	mov	r6, r0
 800b59a:	d1d6      	bne.n	800b54a <_svfiprintf_r+0x176>
 800b59c:	89ab      	ldrh	r3, [r5, #12]
 800b59e:	065b      	lsls	r3, r3, #25
 800b5a0:	f53f af2c 	bmi.w	800b3fc <_svfiprintf_r+0x28>
 800b5a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5a6:	b01d      	add	sp, #116	; 0x74
 800b5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ac:	ab03      	add	r3, sp, #12
 800b5ae:	9300      	str	r3, [sp, #0]
 800b5b0:	462a      	mov	r2, r5
 800b5b2:	4b06      	ldr	r3, [pc, #24]	; (800b5cc <_svfiprintf_r+0x1f8>)
 800b5b4:	a904      	add	r1, sp, #16
 800b5b6:	4638      	mov	r0, r7
 800b5b8:	f7fe fada 	bl	8009b70 <_printf_i>
 800b5bc:	e7eb      	b.n	800b596 <_svfiprintf_r+0x1c2>
 800b5be:	bf00      	nop
 800b5c0:	0800c5bc 	.word	0x0800c5bc
 800b5c4:	0800c5c6 	.word	0x0800c5c6
 800b5c8:	08009659 	.word	0x08009659
 800b5cc:	0800b31d 	.word	0x0800b31d
 800b5d0:	0800c5c2 	.word	0x0800c5c2

0800b5d4 <_sbrk_r>:
 800b5d4:	b538      	push	{r3, r4, r5, lr}
 800b5d6:	4d06      	ldr	r5, [pc, #24]	; (800b5f0 <_sbrk_r+0x1c>)
 800b5d8:	2300      	movs	r3, #0
 800b5da:	4604      	mov	r4, r0
 800b5dc:	4608      	mov	r0, r1
 800b5de:	602b      	str	r3, [r5, #0]
 800b5e0:	f7f6 f91e 	bl	8001820 <_sbrk>
 800b5e4:	1c43      	adds	r3, r0, #1
 800b5e6:	d102      	bne.n	800b5ee <_sbrk_r+0x1a>
 800b5e8:	682b      	ldr	r3, [r5, #0]
 800b5ea:	b103      	cbz	r3, 800b5ee <_sbrk_r+0x1a>
 800b5ec:	6023      	str	r3, [r4, #0]
 800b5ee:	bd38      	pop	{r3, r4, r5, pc}
 800b5f0:	24000808 	.word	0x24000808

0800b5f4 <__assert_func>:
 800b5f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5f6:	4614      	mov	r4, r2
 800b5f8:	461a      	mov	r2, r3
 800b5fa:	4b09      	ldr	r3, [pc, #36]	; (800b620 <__assert_func+0x2c>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4605      	mov	r5, r0
 800b600:	68d8      	ldr	r0, [r3, #12]
 800b602:	b14c      	cbz	r4, 800b618 <__assert_func+0x24>
 800b604:	4b07      	ldr	r3, [pc, #28]	; (800b624 <__assert_func+0x30>)
 800b606:	9100      	str	r1, [sp, #0]
 800b608:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b60c:	4906      	ldr	r1, [pc, #24]	; (800b628 <__assert_func+0x34>)
 800b60e:	462b      	mov	r3, r5
 800b610:	f000 f80e 	bl	800b630 <fiprintf>
 800b614:	f000 faac 	bl	800bb70 <abort>
 800b618:	4b04      	ldr	r3, [pc, #16]	; (800b62c <__assert_func+0x38>)
 800b61a:	461c      	mov	r4, r3
 800b61c:	e7f3      	b.n	800b606 <__assert_func+0x12>
 800b61e:	bf00      	nop
 800b620:	24000014 	.word	0x24000014
 800b624:	0800c5cd 	.word	0x0800c5cd
 800b628:	0800c5da 	.word	0x0800c5da
 800b62c:	0800c608 	.word	0x0800c608

0800b630 <fiprintf>:
 800b630:	b40e      	push	{r1, r2, r3}
 800b632:	b503      	push	{r0, r1, lr}
 800b634:	4601      	mov	r1, r0
 800b636:	ab03      	add	r3, sp, #12
 800b638:	4805      	ldr	r0, [pc, #20]	; (800b650 <fiprintf+0x20>)
 800b63a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b63e:	6800      	ldr	r0, [r0, #0]
 800b640:	9301      	str	r3, [sp, #4]
 800b642:	f000 f897 	bl	800b774 <_vfiprintf_r>
 800b646:	b002      	add	sp, #8
 800b648:	f85d eb04 	ldr.w	lr, [sp], #4
 800b64c:	b003      	add	sp, #12
 800b64e:	4770      	bx	lr
 800b650:	24000014 	.word	0x24000014

0800b654 <__ascii_mbtowc>:
 800b654:	b082      	sub	sp, #8
 800b656:	b901      	cbnz	r1, 800b65a <__ascii_mbtowc+0x6>
 800b658:	a901      	add	r1, sp, #4
 800b65a:	b142      	cbz	r2, 800b66e <__ascii_mbtowc+0x1a>
 800b65c:	b14b      	cbz	r3, 800b672 <__ascii_mbtowc+0x1e>
 800b65e:	7813      	ldrb	r3, [r2, #0]
 800b660:	600b      	str	r3, [r1, #0]
 800b662:	7812      	ldrb	r2, [r2, #0]
 800b664:	1e10      	subs	r0, r2, #0
 800b666:	bf18      	it	ne
 800b668:	2001      	movne	r0, #1
 800b66a:	b002      	add	sp, #8
 800b66c:	4770      	bx	lr
 800b66e:	4610      	mov	r0, r2
 800b670:	e7fb      	b.n	800b66a <__ascii_mbtowc+0x16>
 800b672:	f06f 0001 	mvn.w	r0, #1
 800b676:	e7f8      	b.n	800b66a <__ascii_mbtowc+0x16>

0800b678 <memmove>:
 800b678:	4288      	cmp	r0, r1
 800b67a:	b510      	push	{r4, lr}
 800b67c:	eb01 0402 	add.w	r4, r1, r2
 800b680:	d902      	bls.n	800b688 <memmove+0x10>
 800b682:	4284      	cmp	r4, r0
 800b684:	4623      	mov	r3, r4
 800b686:	d807      	bhi.n	800b698 <memmove+0x20>
 800b688:	1e43      	subs	r3, r0, #1
 800b68a:	42a1      	cmp	r1, r4
 800b68c:	d008      	beq.n	800b6a0 <memmove+0x28>
 800b68e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b692:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b696:	e7f8      	b.n	800b68a <memmove+0x12>
 800b698:	4402      	add	r2, r0
 800b69a:	4601      	mov	r1, r0
 800b69c:	428a      	cmp	r2, r1
 800b69e:	d100      	bne.n	800b6a2 <memmove+0x2a>
 800b6a0:	bd10      	pop	{r4, pc}
 800b6a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6aa:	e7f7      	b.n	800b69c <memmove+0x24>

0800b6ac <__malloc_lock>:
 800b6ac:	4801      	ldr	r0, [pc, #4]	; (800b6b4 <__malloc_lock+0x8>)
 800b6ae:	f000 bc1f 	b.w	800bef0 <__retarget_lock_acquire_recursive>
 800b6b2:	bf00      	nop
 800b6b4:	2400080c 	.word	0x2400080c

0800b6b8 <__malloc_unlock>:
 800b6b8:	4801      	ldr	r0, [pc, #4]	; (800b6c0 <__malloc_unlock+0x8>)
 800b6ba:	f000 bc1a 	b.w	800bef2 <__retarget_lock_release_recursive>
 800b6be:	bf00      	nop
 800b6c0:	2400080c 	.word	0x2400080c

0800b6c4 <_realloc_r>:
 800b6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6c8:	4680      	mov	r8, r0
 800b6ca:	4614      	mov	r4, r2
 800b6cc:	460e      	mov	r6, r1
 800b6ce:	b921      	cbnz	r1, 800b6da <_realloc_r+0x16>
 800b6d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6d4:	4611      	mov	r1, r2
 800b6d6:	f7ff bdad 	b.w	800b234 <_malloc_r>
 800b6da:	b92a      	cbnz	r2, 800b6e8 <_realloc_r+0x24>
 800b6dc:	f7ff fd3e 	bl	800b15c <_free_r>
 800b6e0:	4625      	mov	r5, r4
 800b6e2:	4628      	mov	r0, r5
 800b6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6e8:	f000 fc6a 	bl	800bfc0 <_malloc_usable_size_r>
 800b6ec:	4284      	cmp	r4, r0
 800b6ee:	4607      	mov	r7, r0
 800b6f0:	d802      	bhi.n	800b6f8 <_realloc_r+0x34>
 800b6f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b6f6:	d812      	bhi.n	800b71e <_realloc_r+0x5a>
 800b6f8:	4621      	mov	r1, r4
 800b6fa:	4640      	mov	r0, r8
 800b6fc:	f7ff fd9a 	bl	800b234 <_malloc_r>
 800b700:	4605      	mov	r5, r0
 800b702:	2800      	cmp	r0, #0
 800b704:	d0ed      	beq.n	800b6e2 <_realloc_r+0x1e>
 800b706:	42bc      	cmp	r4, r7
 800b708:	4622      	mov	r2, r4
 800b70a:	4631      	mov	r1, r6
 800b70c:	bf28      	it	cs
 800b70e:	463a      	movcs	r2, r7
 800b710:	f7ff f97c 	bl	800aa0c <memcpy>
 800b714:	4631      	mov	r1, r6
 800b716:	4640      	mov	r0, r8
 800b718:	f7ff fd20 	bl	800b15c <_free_r>
 800b71c:	e7e1      	b.n	800b6e2 <_realloc_r+0x1e>
 800b71e:	4635      	mov	r5, r6
 800b720:	e7df      	b.n	800b6e2 <_realloc_r+0x1e>

0800b722 <__sfputc_r>:
 800b722:	6893      	ldr	r3, [r2, #8]
 800b724:	3b01      	subs	r3, #1
 800b726:	2b00      	cmp	r3, #0
 800b728:	b410      	push	{r4}
 800b72a:	6093      	str	r3, [r2, #8]
 800b72c:	da08      	bge.n	800b740 <__sfputc_r+0x1e>
 800b72e:	6994      	ldr	r4, [r2, #24]
 800b730:	42a3      	cmp	r3, r4
 800b732:	db01      	blt.n	800b738 <__sfputc_r+0x16>
 800b734:	290a      	cmp	r1, #10
 800b736:	d103      	bne.n	800b740 <__sfputc_r+0x1e>
 800b738:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b73c:	f000 b94a 	b.w	800b9d4 <__swbuf_r>
 800b740:	6813      	ldr	r3, [r2, #0]
 800b742:	1c58      	adds	r0, r3, #1
 800b744:	6010      	str	r0, [r2, #0]
 800b746:	7019      	strb	r1, [r3, #0]
 800b748:	4608      	mov	r0, r1
 800b74a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <__sfputs_r>:
 800b750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b752:	4606      	mov	r6, r0
 800b754:	460f      	mov	r7, r1
 800b756:	4614      	mov	r4, r2
 800b758:	18d5      	adds	r5, r2, r3
 800b75a:	42ac      	cmp	r4, r5
 800b75c:	d101      	bne.n	800b762 <__sfputs_r+0x12>
 800b75e:	2000      	movs	r0, #0
 800b760:	e007      	b.n	800b772 <__sfputs_r+0x22>
 800b762:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b766:	463a      	mov	r2, r7
 800b768:	4630      	mov	r0, r6
 800b76a:	f7ff ffda 	bl	800b722 <__sfputc_r>
 800b76e:	1c43      	adds	r3, r0, #1
 800b770:	d1f3      	bne.n	800b75a <__sfputs_r+0xa>
 800b772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b774 <_vfiprintf_r>:
 800b774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b778:	460d      	mov	r5, r1
 800b77a:	b09d      	sub	sp, #116	; 0x74
 800b77c:	4614      	mov	r4, r2
 800b77e:	4698      	mov	r8, r3
 800b780:	4606      	mov	r6, r0
 800b782:	b118      	cbz	r0, 800b78c <_vfiprintf_r+0x18>
 800b784:	6983      	ldr	r3, [r0, #24]
 800b786:	b90b      	cbnz	r3, 800b78c <_vfiprintf_r+0x18>
 800b788:	f000 fb14 	bl	800bdb4 <__sinit>
 800b78c:	4b89      	ldr	r3, [pc, #548]	; (800b9b4 <_vfiprintf_r+0x240>)
 800b78e:	429d      	cmp	r5, r3
 800b790:	d11b      	bne.n	800b7ca <_vfiprintf_r+0x56>
 800b792:	6875      	ldr	r5, [r6, #4]
 800b794:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b796:	07d9      	lsls	r1, r3, #31
 800b798:	d405      	bmi.n	800b7a6 <_vfiprintf_r+0x32>
 800b79a:	89ab      	ldrh	r3, [r5, #12]
 800b79c:	059a      	lsls	r2, r3, #22
 800b79e:	d402      	bmi.n	800b7a6 <_vfiprintf_r+0x32>
 800b7a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7a2:	f000 fba5 	bl	800bef0 <__retarget_lock_acquire_recursive>
 800b7a6:	89ab      	ldrh	r3, [r5, #12]
 800b7a8:	071b      	lsls	r3, r3, #28
 800b7aa:	d501      	bpl.n	800b7b0 <_vfiprintf_r+0x3c>
 800b7ac:	692b      	ldr	r3, [r5, #16]
 800b7ae:	b9eb      	cbnz	r3, 800b7ec <_vfiprintf_r+0x78>
 800b7b0:	4629      	mov	r1, r5
 800b7b2:	4630      	mov	r0, r6
 800b7b4:	f000 f96e 	bl	800ba94 <__swsetup_r>
 800b7b8:	b1c0      	cbz	r0, 800b7ec <_vfiprintf_r+0x78>
 800b7ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7bc:	07dc      	lsls	r4, r3, #31
 800b7be:	d50e      	bpl.n	800b7de <_vfiprintf_r+0x6a>
 800b7c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7c4:	b01d      	add	sp, #116	; 0x74
 800b7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ca:	4b7b      	ldr	r3, [pc, #492]	; (800b9b8 <_vfiprintf_r+0x244>)
 800b7cc:	429d      	cmp	r5, r3
 800b7ce:	d101      	bne.n	800b7d4 <_vfiprintf_r+0x60>
 800b7d0:	68b5      	ldr	r5, [r6, #8]
 800b7d2:	e7df      	b.n	800b794 <_vfiprintf_r+0x20>
 800b7d4:	4b79      	ldr	r3, [pc, #484]	; (800b9bc <_vfiprintf_r+0x248>)
 800b7d6:	429d      	cmp	r5, r3
 800b7d8:	bf08      	it	eq
 800b7da:	68f5      	ldreq	r5, [r6, #12]
 800b7dc:	e7da      	b.n	800b794 <_vfiprintf_r+0x20>
 800b7de:	89ab      	ldrh	r3, [r5, #12]
 800b7e0:	0598      	lsls	r0, r3, #22
 800b7e2:	d4ed      	bmi.n	800b7c0 <_vfiprintf_r+0x4c>
 800b7e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7e6:	f000 fb84 	bl	800bef2 <__retarget_lock_release_recursive>
 800b7ea:	e7e9      	b.n	800b7c0 <_vfiprintf_r+0x4c>
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	9309      	str	r3, [sp, #36]	; 0x24
 800b7f0:	2320      	movs	r3, #32
 800b7f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7fa:	2330      	movs	r3, #48	; 0x30
 800b7fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b9c0 <_vfiprintf_r+0x24c>
 800b800:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b804:	f04f 0901 	mov.w	r9, #1
 800b808:	4623      	mov	r3, r4
 800b80a:	469a      	mov	sl, r3
 800b80c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b810:	b10a      	cbz	r2, 800b816 <_vfiprintf_r+0xa2>
 800b812:	2a25      	cmp	r2, #37	; 0x25
 800b814:	d1f9      	bne.n	800b80a <_vfiprintf_r+0x96>
 800b816:	ebba 0b04 	subs.w	fp, sl, r4
 800b81a:	d00b      	beq.n	800b834 <_vfiprintf_r+0xc0>
 800b81c:	465b      	mov	r3, fp
 800b81e:	4622      	mov	r2, r4
 800b820:	4629      	mov	r1, r5
 800b822:	4630      	mov	r0, r6
 800b824:	f7ff ff94 	bl	800b750 <__sfputs_r>
 800b828:	3001      	adds	r0, #1
 800b82a:	f000 80aa 	beq.w	800b982 <_vfiprintf_r+0x20e>
 800b82e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b830:	445a      	add	r2, fp
 800b832:	9209      	str	r2, [sp, #36]	; 0x24
 800b834:	f89a 3000 	ldrb.w	r3, [sl]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	f000 80a2 	beq.w	800b982 <_vfiprintf_r+0x20e>
 800b83e:	2300      	movs	r3, #0
 800b840:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b844:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b848:	f10a 0a01 	add.w	sl, sl, #1
 800b84c:	9304      	str	r3, [sp, #16]
 800b84e:	9307      	str	r3, [sp, #28]
 800b850:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b854:	931a      	str	r3, [sp, #104]	; 0x68
 800b856:	4654      	mov	r4, sl
 800b858:	2205      	movs	r2, #5
 800b85a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b85e:	4858      	ldr	r0, [pc, #352]	; (800b9c0 <_vfiprintf_r+0x24c>)
 800b860:	f7f4 fd5e 	bl	8000320 <memchr>
 800b864:	9a04      	ldr	r2, [sp, #16]
 800b866:	b9d8      	cbnz	r0, 800b8a0 <_vfiprintf_r+0x12c>
 800b868:	06d1      	lsls	r1, r2, #27
 800b86a:	bf44      	itt	mi
 800b86c:	2320      	movmi	r3, #32
 800b86e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b872:	0713      	lsls	r3, r2, #28
 800b874:	bf44      	itt	mi
 800b876:	232b      	movmi	r3, #43	; 0x2b
 800b878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b87c:	f89a 3000 	ldrb.w	r3, [sl]
 800b880:	2b2a      	cmp	r3, #42	; 0x2a
 800b882:	d015      	beq.n	800b8b0 <_vfiprintf_r+0x13c>
 800b884:	9a07      	ldr	r2, [sp, #28]
 800b886:	4654      	mov	r4, sl
 800b888:	2000      	movs	r0, #0
 800b88a:	f04f 0c0a 	mov.w	ip, #10
 800b88e:	4621      	mov	r1, r4
 800b890:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b894:	3b30      	subs	r3, #48	; 0x30
 800b896:	2b09      	cmp	r3, #9
 800b898:	d94e      	bls.n	800b938 <_vfiprintf_r+0x1c4>
 800b89a:	b1b0      	cbz	r0, 800b8ca <_vfiprintf_r+0x156>
 800b89c:	9207      	str	r2, [sp, #28]
 800b89e:	e014      	b.n	800b8ca <_vfiprintf_r+0x156>
 800b8a0:	eba0 0308 	sub.w	r3, r0, r8
 800b8a4:	fa09 f303 	lsl.w	r3, r9, r3
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	9304      	str	r3, [sp, #16]
 800b8ac:	46a2      	mov	sl, r4
 800b8ae:	e7d2      	b.n	800b856 <_vfiprintf_r+0xe2>
 800b8b0:	9b03      	ldr	r3, [sp, #12]
 800b8b2:	1d19      	adds	r1, r3, #4
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	9103      	str	r1, [sp, #12]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	bfbb      	ittet	lt
 800b8bc:	425b      	neglt	r3, r3
 800b8be:	f042 0202 	orrlt.w	r2, r2, #2
 800b8c2:	9307      	strge	r3, [sp, #28]
 800b8c4:	9307      	strlt	r3, [sp, #28]
 800b8c6:	bfb8      	it	lt
 800b8c8:	9204      	strlt	r2, [sp, #16]
 800b8ca:	7823      	ldrb	r3, [r4, #0]
 800b8cc:	2b2e      	cmp	r3, #46	; 0x2e
 800b8ce:	d10c      	bne.n	800b8ea <_vfiprintf_r+0x176>
 800b8d0:	7863      	ldrb	r3, [r4, #1]
 800b8d2:	2b2a      	cmp	r3, #42	; 0x2a
 800b8d4:	d135      	bne.n	800b942 <_vfiprintf_r+0x1ce>
 800b8d6:	9b03      	ldr	r3, [sp, #12]
 800b8d8:	1d1a      	adds	r2, r3, #4
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	9203      	str	r2, [sp, #12]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	bfb8      	it	lt
 800b8e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b8e6:	3402      	adds	r4, #2
 800b8e8:	9305      	str	r3, [sp, #20]
 800b8ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b9d0 <_vfiprintf_r+0x25c>
 800b8ee:	7821      	ldrb	r1, [r4, #0]
 800b8f0:	2203      	movs	r2, #3
 800b8f2:	4650      	mov	r0, sl
 800b8f4:	f7f4 fd14 	bl	8000320 <memchr>
 800b8f8:	b140      	cbz	r0, 800b90c <_vfiprintf_r+0x198>
 800b8fa:	2340      	movs	r3, #64	; 0x40
 800b8fc:	eba0 000a 	sub.w	r0, r0, sl
 800b900:	fa03 f000 	lsl.w	r0, r3, r0
 800b904:	9b04      	ldr	r3, [sp, #16]
 800b906:	4303      	orrs	r3, r0
 800b908:	3401      	adds	r4, #1
 800b90a:	9304      	str	r3, [sp, #16]
 800b90c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b910:	482c      	ldr	r0, [pc, #176]	; (800b9c4 <_vfiprintf_r+0x250>)
 800b912:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b916:	2206      	movs	r2, #6
 800b918:	f7f4 fd02 	bl	8000320 <memchr>
 800b91c:	2800      	cmp	r0, #0
 800b91e:	d03f      	beq.n	800b9a0 <_vfiprintf_r+0x22c>
 800b920:	4b29      	ldr	r3, [pc, #164]	; (800b9c8 <_vfiprintf_r+0x254>)
 800b922:	bb1b      	cbnz	r3, 800b96c <_vfiprintf_r+0x1f8>
 800b924:	9b03      	ldr	r3, [sp, #12]
 800b926:	3307      	adds	r3, #7
 800b928:	f023 0307 	bic.w	r3, r3, #7
 800b92c:	3308      	adds	r3, #8
 800b92e:	9303      	str	r3, [sp, #12]
 800b930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b932:	443b      	add	r3, r7
 800b934:	9309      	str	r3, [sp, #36]	; 0x24
 800b936:	e767      	b.n	800b808 <_vfiprintf_r+0x94>
 800b938:	fb0c 3202 	mla	r2, ip, r2, r3
 800b93c:	460c      	mov	r4, r1
 800b93e:	2001      	movs	r0, #1
 800b940:	e7a5      	b.n	800b88e <_vfiprintf_r+0x11a>
 800b942:	2300      	movs	r3, #0
 800b944:	3401      	adds	r4, #1
 800b946:	9305      	str	r3, [sp, #20]
 800b948:	4619      	mov	r1, r3
 800b94a:	f04f 0c0a 	mov.w	ip, #10
 800b94e:	4620      	mov	r0, r4
 800b950:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b954:	3a30      	subs	r2, #48	; 0x30
 800b956:	2a09      	cmp	r2, #9
 800b958:	d903      	bls.n	800b962 <_vfiprintf_r+0x1ee>
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d0c5      	beq.n	800b8ea <_vfiprintf_r+0x176>
 800b95e:	9105      	str	r1, [sp, #20]
 800b960:	e7c3      	b.n	800b8ea <_vfiprintf_r+0x176>
 800b962:	fb0c 2101 	mla	r1, ip, r1, r2
 800b966:	4604      	mov	r4, r0
 800b968:	2301      	movs	r3, #1
 800b96a:	e7f0      	b.n	800b94e <_vfiprintf_r+0x1da>
 800b96c:	ab03      	add	r3, sp, #12
 800b96e:	9300      	str	r3, [sp, #0]
 800b970:	462a      	mov	r2, r5
 800b972:	4b16      	ldr	r3, [pc, #88]	; (800b9cc <_vfiprintf_r+0x258>)
 800b974:	a904      	add	r1, sp, #16
 800b976:	4630      	mov	r0, r6
 800b978:	f7fd fe6e 	bl	8009658 <_printf_float>
 800b97c:	4607      	mov	r7, r0
 800b97e:	1c78      	adds	r0, r7, #1
 800b980:	d1d6      	bne.n	800b930 <_vfiprintf_r+0x1bc>
 800b982:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b984:	07d9      	lsls	r1, r3, #31
 800b986:	d405      	bmi.n	800b994 <_vfiprintf_r+0x220>
 800b988:	89ab      	ldrh	r3, [r5, #12]
 800b98a:	059a      	lsls	r2, r3, #22
 800b98c:	d402      	bmi.n	800b994 <_vfiprintf_r+0x220>
 800b98e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b990:	f000 faaf 	bl	800bef2 <__retarget_lock_release_recursive>
 800b994:	89ab      	ldrh	r3, [r5, #12]
 800b996:	065b      	lsls	r3, r3, #25
 800b998:	f53f af12 	bmi.w	800b7c0 <_vfiprintf_r+0x4c>
 800b99c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b99e:	e711      	b.n	800b7c4 <_vfiprintf_r+0x50>
 800b9a0:	ab03      	add	r3, sp, #12
 800b9a2:	9300      	str	r3, [sp, #0]
 800b9a4:	462a      	mov	r2, r5
 800b9a6:	4b09      	ldr	r3, [pc, #36]	; (800b9cc <_vfiprintf_r+0x258>)
 800b9a8:	a904      	add	r1, sp, #16
 800b9aa:	4630      	mov	r0, r6
 800b9ac:	f7fe f8e0 	bl	8009b70 <_printf_i>
 800b9b0:	e7e4      	b.n	800b97c <_vfiprintf_r+0x208>
 800b9b2:	bf00      	nop
 800b9b4:	0800c734 	.word	0x0800c734
 800b9b8:	0800c754 	.word	0x0800c754
 800b9bc:	0800c714 	.word	0x0800c714
 800b9c0:	0800c5bc 	.word	0x0800c5bc
 800b9c4:	0800c5c6 	.word	0x0800c5c6
 800b9c8:	08009659 	.word	0x08009659
 800b9cc:	0800b751 	.word	0x0800b751
 800b9d0:	0800c5c2 	.word	0x0800c5c2

0800b9d4 <__swbuf_r>:
 800b9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9d6:	460e      	mov	r6, r1
 800b9d8:	4614      	mov	r4, r2
 800b9da:	4605      	mov	r5, r0
 800b9dc:	b118      	cbz	r0, 800b9e6 <__swbuf_r+0x12>
 800b9de:	6983      	ldr	r3, [r0, #24]
 800b9e0:	b90b      	cbnz	r3, 800b9e6 <__swbuf_r+0x12>
 800b9e2:	f000 f9e7 	bl	800bdb4 <__sinit>
 800b9e6:	4b21      	ldr	r3, [pc, #132]	; (800ba6c <__swbuf_r+0x98>)
 800b9e8:	429c      	cmp	r4, r3
 800b9ea:	d12b      	bne.n	800ba44 <__swbuf_r+0x70>
 800b9ec:	686c      	ldr	r4, [r5, #4]
 800b9ee:	69a3      	ldr	r3, [r4, #24]
 800b9f0:	60a3      	str	r3, [r4, #8]
 800b9f2:	89a3      	ldrh	r3, [r4, #12]
 800b9f4:	071a      	lsls	r2, r3, #28
 800b9f6:	d52f      	bpl.n	800ba58 <__swbuf_r+0x84>
 800b9f8:	6923      	ldr	r3, [r4, #16]
 800b9fa:	b36b      	cbz	r3, 800ba58 <__swbuf_r+0x84>
 800b9fc:	6923      	ldr	r3, [r4, #16]
 800b9fe:	6820      	ldr	r0, [r4, #0]
 800ba00:	1ac0      	subs	r0, r0, r3
 800ba02:	6963      	ldr	r3, [r4, #20]
 800ba04:	b2f6      	uxtb	r6, r6
 800ba06:	4283      	cmp	r3, r0
 800ba08:	4637      	mov	r7, r6
 800ba0a:	dc04      	bgt.n	800ba16 <__swbuf_r+0x42>
 800ba0c:	4621      	mov	r1, r4
 800ba0e:	4628      	mov	r0, r5
 800ba10:	f000 f93c 	bl	800bc8c <_fflush_r>
 800ba14:	bb30      	cbnz	r0, 800ba64 <__swbuf_r+0x90>
 800ba16:	68a3      	ldr	r3, [r4, #8]
 800ba18:	3b01      	subs	r3, #1
 800ba1a:	60a3      	str	r3, [r4, #8]
 800ba1c:	6823      	ldr	r3, [r4, #0]
 800ba1e:	1c5a      	adds	r2, r3, #1
 800ba20:	6022      	str	r2, [r4, #0]
 800ba22:	701e      	strb	r6, [r3, #0]
 800ba24:	6963      	ldr	r3, [r4, #20]
 800ba26:	3001      	adds	r0, #1
 800ba28:	4283      	cmp	r3, r0
 800ba2a:	d004      	beq.n	800ba36 <__swbuf_r+0x62>
 800ba2c:	89a3      	ldrh	r3, [r4, #12]
 800ba2e:	07db      	lsls	r3, r3, #31
 800ba30:	d506      	bpl.n	800ba40 <__swbuf_r+0x6c>
 800ba32:	2e0a      	cmp	r6, #10
 800ba34:	d104      	bne.n	800ba40 <__swbuf_r+0x6c>
 800ba36:	4621      	mov	r1, r4
 800ba38:	4628      	mov	r0, r5
 800ba3a:	f000 f927 	bl	800bc8c <_fflush_r>
 800ba3e:	b988      	cbnz	r0, 800ba64 <__swbuf_r+0x90>
 800ba40:	4638      	mov	r0, r7
 800ba42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba44:	4b0a      	ldr	r3, [pc, #40]	; (800ba70 <__swbuf_r+0x9c>)
 800ba46:	429c      	cmp	r4, r3
 800ba48:	d101      	bne.n	800ba4e <__swbuf_r+0x7a>
 800ba4a:	68ac      	ldr	r4, [r5, #8]
 800ba4c:	e7cf      	b.n	800b9ee <__swbuf_r+0x1a>
 800ba4e:	4b09      	ldr	r3, [pc, #36]	; (800ba74 <__swbuf_r+0xa0>)
 800ba50:	429c      	cmp	r4, r3
 800ba52:	bf08      	it	eq
 800ba54:	68ec      	ldreq	r4, [r5, #12]
 800ba56:	e7ca      	b.n	800b9ee <__swbuf_r+0x1a>
 800ba58:	4621      	mov	r1, r4
 800ba5a:	4628      	mov	r0, r5
 800ba5c:	f000 f81a 	bl	800ba94 <__swsetup_r>
 800ba60:	2800      	cmp	r0, #0
 800ba62:	d0cb      	beq.n	800b9fc <__swbuf_r+0x28>
 800ba64:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ba68:	e7ea      	b.n	800ba40 <__swbuf_r+0x6c>
 800ba6a:	bf00      	nop
 800ba6c:	0800c734 	.word	0x0800c734
 800ba70:	0800c754 	.word	0x0800c754
 800ba74:	0800c714 	.word	0x0800c714

0800ba78 <__ascii_wctomb>:
 800ba78:	b149      	cbz	r1, 800ba8e <__ascii_wctomb+0x16>
 800ba7a:	2aff      	cmp	r2, #255	; 0xff
 800ba7c:	bf85      	ittet	hi
 800ba7e:	238a      	movhi	r3, #138	; 0x8a
 800ba80:	6003      	strhi	r3, [r0, #0]
 800ba82:	700a      	strbls	r2, [r1, #0]
 800ba84:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ba88:	bf98      	it	ls
 800ba8a:	2001      	movls	r0, #1
 800ba8c:	4770      	bx	lr
 800ba8e:	4608      	mov	r0, r1
 800ba90:	4770      	bx	lr
	...

0800ba94 <__swsetup_r>:
 800ba94:	4b32      	ldr	r3, [pc, #200]	; (800bb60 <__swsetup_r+0xcc>)
 800ba96:	b570      	push	{r4, r5, r6, lr}
 800ba98:	681d      	ldr	r5, [r3, #0]
 800ba9a:	4606      	mov	r6, r0
 800ba9c:	460c      	mov	r4, r1
 800ba9e:	b125      	cbz	r5, 800baaa <__swsetup_r+0x16>
 800baa0:	69ab      	ldr	r3, [r5, #24]
 800baa2:	b913      	cbnz	r3, 800baaa <__swsetup_r+0x16>
 800baa4:	4628      	mov	r0, r5
 800baa6:	f000 f985 	bl	800bdb4 <__sinit>
 800baaa:	4b2e      	ldr	r3, [pc, #184]	; (800bb64 <__swsetup_r+0xd0>)
 800baac:	429c      	cmp	r4, r3
 800baae:	d10f      	bne.n	800bad0 <__swsetup_r+0x3c>
 800bab0:	686c      	ldr	r4, [r5, #4]
 800bab2:	89a3      	ldrh	r3, [r4, #12]
 800bab4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bab8:	0719      	lsls	r1, r3, #28
 800baba:	d42c      	bmi.n	800bb16 <__swsetup_r+0x82>
 800babc:	06dd      	lsls	r5, r3, #27
 800babe:	d411      	bmi.n	800bae4 <__swsetup_r+0x50>
 800bac0:	2309      	movs	r3, #9
 800bac2:	6033      	str	r3, [r6, #0]
 800bac4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bac8:	81a3      	strh	r3, [r4, #12]
 800baca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bace:	e03e      	b.n	800bb4e <__swsetup_r+0xba>
 800bad0:	4b25      	ldr	r3, [pc, #148]	; (800bb68 <__swsetup_r+0xd4>)
 800bad2:	429c      	cmp	r4, r3
 800bad4:	d101      	bne.n	800bada <__swsetup_r+0x46>
 800bad6:	68ac      	ldr	r4, [r5, #8]
 800bad8:	e7eb      	b.n	800bab2 <__swsetup_r+0x1e>
 800bada:	4b24      	ldr	r3, [pc, #144]	; (800bb6c <__swsetup_r+0xd8>)
 800badc:	429c      	cmp	r4, r3
 800bade:	bf08      	it	eq
 800bae0:	68ec      	ldreq	r4, [r5, #12]
 800bae2:	e7e6      	b.n	800bab2 <__swsetup_r+0x1e>
 800bae4:	0758      	lsls	r0, r3, #29
 800bae6:	d512      	bpl.n	800bb0e <__swsetup_r+0x7a>
 800bae8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800baea:	b141      	cbz	r1, 800bafe <__swsetup_r+0x6a>
 800baec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800baf0:	4299      	cmp	r1, r3
 800baf2:	d002      	beq.n	800bafa <__swsetup_r+0x66>
 800baf4:	4630      	mov	r0, r6
 800baf6:	f7ff fb31 	bl	800b15c <_free_r>
 800bafa:	2300      	movs	r3, #0
 800bafc:	6363      	str	r3, [r4, #52]	; 0x34
 800bafe:	89a3      	ldrh	r3, [r4, #12]
 800bb00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb04:	81a3      	strh	r3, [r4, #12]
 800bb06:	2300      	movs	r3, #0
 800bb08:	6063      	str	r3, [r4, #4]
 800bb0a:	6923      	ldr	r3, [r4, #16]
 800bb0c:	6023      	str	r3, [r4, #0]
 800bb0e:	89a3      	ldrh	r3, [r4, #12]
 800bb10:	f043 0308 	orr.w	r3, r3, #8
 800bb14:	81a3      	strh	r3, [r4, #12]
 800bb16:	6923      	ldr	r3, [r4, #16]
 800bb18:	b94b      	cbnz	r3, 800bb2e <__swsetup_r+0x9a>
 800bb1a:	89a3      	ldrh	r3, [r4, #12]
 800bb1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb24:	d003      	beq.n	800bb2e <__swsetup_r+0x9a>
 800bb26:	4621      	mov	r1, r4
 800bb28:	4630      	mov	r0, r6
 800bb2a:	f000 fa09 	bl	800bf40 <__smakebuf_r>
 800bb2e:	89a0      	ldrh	r0, [r4, #12]
 800bb30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb34:	f010 0301 	ands.w	r3, r0, #1
 800bb38:	d00a      	beq.n	800bb50 <__swsetup_r+0xbc>
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	60a3      	str	r3, [r4, #8]
 800bb3e:	6963      	ldr	r3, [r4, #20]
 800bb40:	425b      	negs	r3, r3
 800bb42:	61a3      	str	r3, [r4, #24]
 800bb44:	6923      	ldr	r3, [r4, #16]
 800bb46:	b943      	cbnz	r3, 800bb5a <__swsetup_r+0xc6>
 800bb48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bb4c:	d1ba      	bne.n	800bac4 <__swsetup_r+0x30>
 800bb4e:	bd70      	pop	{r4, r5, r6, pc}
 800bb50:	0781      	lsls	r1, r0, #30
 800bb52:	bf58      	it	pl
 800bb54:	6963      	ldrpl	r3, [r4, #20]
 800bb56:	60a3      	str	r3, [r4, #8]
 800bb58:	e7f4      	b.n	800bb44 <__swsetup_r+0xb0>
 800bb5a:	2000      	movs	r0, #0
 800bb5c:	e7f7      	b.n	800bb4e <__swsetup_r+0xba>
 800bb5e:	bf00      	nop
 800bb60:	24000014 	.word	0x24000014
 800bb64:	0800c734 	.word	0x0800c734
 800bb68:	0800c754 	.word	0x0800c754
 800bb6c:	0800c714 	.word	0x0800c714

0800bb70 <abort>:
 800bb70:	b508      	push	{r3, lr}
 800bb72:	2006      	movs	r0, #6
 800bb74:	f000 fa54 	bl	800c020 <raise>
 800bb78:	2001      	movs	r0, #1
 800bb7a:	f7f5 fdd9 	bl	8001730 <_exit>
	...

0800bb80 <__sflush_r>:
 800bb80:	898a      	ldrh	r2, [r1, #12]
 800bb82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb86:	4605      	mov	r5, r0
 800bb88:	0710      	lsls	r0, r2, #28
 800bb8a:	460c      	mov	r4, r1
 800bb8c:	d458      	bmi.n	800bc40 <__sflush_r+0xc0>
 800bb8e:	684b      	ldr	r3, [r1, #4]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	dc05      	bgt.n	800bba0 <__sflush_r+0x20>
 800bb94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	dc02      	bgt.n	800bba0 <__sflush_r+0x20>
 800bb9a:	2000      	movs	r0, #0
 800bb9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bba2:	2e00      	cmp	r6, #0
 800bba4:	d0f9      	beq.n	800bb9a <__sflush_r+0x1a>
 800bba6:	2300      	movs	r3, #0
 800bba8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bbac:	682f      	ldr	r7, [r5, #0]
 800bbae:	602b      	str	r3, [r5, #0]
 800bbb0:	d032      	beq.n	800bc18 <__sflush_r+0x98>
 800bbb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bbb4:	89a3      	ldrh	r3, [r4, #12]
 800bbb6:	075a      	lsls	r2, r3, #29
 800bbb8:	d505      	bpl.n	800bbc6 <__sflush_r+0x46>
 800bbba:	6863      	ldr	r3, [r4, #4]
 800bbbc:	1ac0      	subs	r0, r0, r3
 800bbbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbc0:	b10b      	cbz	r3, 800bbc6 <__sflush_r+0x46>
 800bbc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bbc4:	1ac0      	subs	r0, r0, r3
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	4602      	mov	r2, r0
 800bbca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbcc:	6a21      	ldr	r1, [r4, #32]
 800bbce:	4628      	mov	r0, r5
 800bbd0:	47b0      	blx	r6
 800bbd2:	1c43      	adds	r3, r0, #1
 800bbd4:	89a3      	ldrh	r3, [r4, #12]
 800bbd6:	d106      	bne.n	800bbe6 <__sflush_r+0x66>
 800bbd8:	6829      	ldr	r1, [r5, #0]
 800bbda:	291d      	cmp	r1, #29
 800bbdc:	d82c      	bhi.n	800bc38 <__sflush_r+0xb8>
 800bbde:	4a2a      	ldr	r2, [pc, #168]	; (800bc88 <__sflush_r+0x108>)
 800bbe0:	40ca      	lsrs	r2, r1
 800bbe2:	07d6      	lsls	r6, r2, #31
 800bbe4:	d528      	bpl.n	800bc38 <__sflush_r+0xb8>
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	6062      	str	r2, [r4, #4]
 800bbea:	04d9      	lsls	r1, r3, #19
 800bbec:	6922      	ldr	r2, [r4, #16]
 800bbee:	6022      	str	r2, [r4, #0]
 800bbf0:	d504      	bpl.n	800bbfc <__sflush_r+0x7c>
 800bbf2:	1c42      	adds	r2, r0, #1
 800bbf4:	d101      	bne.n	800bbfa <__sflush_r+0x7a>
 800bbf6:	682b      	ldr	r3, [r5, #0]
 800bbf8:	b903      	cbnz	r3, 800bbfc <__sflush_r+0x7c>
 800bbfa:	6560      	str	r0, [r4, #84]	; 0x54
 800bbfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbfe:	602f      	str	r7, [r5, #0]
 800bc00:	2900      	cmp	r1, #0
 800bc02:	d0ca      	beq.n	800bb9a <__sflush_r+0x1a>
 800bc04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc08:	4299      	cmp	r1, r3
 800bc0a:	d002      	beq.n	800bc12 <__sflush_r+0x92>
 800bc0c:	4628      	mov	r0, r5
 800bc0e:	f7ff faa5 	bl	800b15c <_free_r>
 800bc12:	2000      	movs	r0, #0
 800bc14:	6360      	str	r0, [r4, #52]	; 0x34
 800bc16:	e7c1      	b.n	800bb9c <__sflush_r+0x1c>
 800bc18:	6a21      	ldr	r1, [r4, #32]
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	4628      	mov	r0, r5
 800bc1e:	47b0      	blx	r6
 800bc20:	1c41      	adds	r1, r0, #1
 800bc22:	d1c7      	bne.n	800bbb4 <__sflush_r+0x34>
 800bc24:	682b      	ldr	r3, [r5, #0]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d0c4      	beq.n	800bbb4 <__sflush_r+0x34>
 800bc2a:	2b1d      	cmp	r3, #29
 800bc2c:	d001      	beq.n	800bc32 <__sflush_r+0xb2>
 800bc2e:	2b16      	cmp	r3, #22
 800bc30:	d101      	bne.n	800bc36 <__sflush_r+0xb6>
 800bc32:	602f      	str	r7, [r5, #0]
 800bc34:	e7b1      	b.n	800bb9a <__sflush_r+0x1a>
 800bc36:	89a3      	ldrh	r3, [r4, #12]
 800bc38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc3c:	81a3      	strh	r3, [r4, #12]
 800bc3e:	e7ad      	b.n	800bb9c <__sflush_r+0x1c>
 800bc40:	690f      	ldr	r7, [r1, #16]
 800bc42:	2f00      	cmp	r7, #0
 800bc44:	d0a9      	beq.n	800bb9a <__sflush_r+0x1a>
 800bc46:	0793      	lsls	r3, r2, #30
 800bc48:	680e      	ldr	r6, [r1, #0]
 800bc4a:	bf08      	it	eq
 800bc4c:	694b      	ldreq	r3, [r1, #20]
 800bc4e:	600f      	str	r7, [r1, #0]
 800bc50:	bf18      	it	ne
 800bc52:	2300      	movne	r3, #0
 800bc54:	eba6 0807 	sub.w	r8, r6, r7
 800bc58:	608b      	str	r3, [r1, #8]
 800bc5a:	f1b8 0f00 	cmp.w	r8, #0
 800bc5e:	dd9c      	ble.n	800bb9a <__sflush_r+0x1a>
 800bc60:	6a21      	ldr	r1, [r4, #32]
 800bc62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc64:	4643      	mov	r3, r8
 800bc66:	463a      	mov	r2, r7
 800bc68:	4628      	mov	r0, r5
 800bc6a:	47b0      	blx	r6
 800bc6c:	2800      	cmp	r0, #0
 800bc6e:	dc06      	bgt.n	800bc7e <__sflush_r+0xfe>
 800bc70:	89a3      	ldrh	r3, [r4, #12]
 800bc72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc76:	81a3      	strh	r3, [r4, #12]
 800bc78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc7c:	e78e      	b.n	800bb9c <__sflush_r+0x1c>
 800bc7e:	4407      	add	r7, r0
 800bc80:	eba8 0800 	sub.w	r8, r8, r0
 800bc84:	e7e9      	b.n	800bc5a <__sflush_r+0xda>
 800bc86:	bf00      	nop
 800bc88:	20400001 	.word	0x20400001

0800bc8c <_fflush_r>:
 800bc8c:	b538      	push	{r3, r4, r5, lr}
 800bc8e:	690b      	ldr	r3, [r1, #16]
 800bc90:	4605      	mov	r5, r0
 800bc92:	460c      	mov	r4, r1
 800bc94:	b913      	cbnz	r3, 800bc9c <_fflush_r+0x10>
 800bc96:	2500      	movs	r5, #0
 800bc98:	4628      	mov	r0, r5
 800bc9a:	bd38      	pop	{r3, r4, r5, pc}
 800bc9c:	b118      	cbz	r0, 800bca6 <_fflush_r+0x1a>
 800bc9e:	6983      	ldr	r3, [r0, #24]
 800bca0:	b90b      	cbnz	r3, 800bca6 <_fflush_r+0x1a>
 800bca2:	f000 f887 	bl	800bdb4 <__sinit>
 800bca6:	4b14      	ldr	r3, [pc, #80]	; (800bcf8 <_fflush_r+0x6c>)
 800bca8:	429c      	cmp	r4, r3
 800bcaa:	d11b      	bne.n	800bce4 <_fflush_r+0x58>
 800bcac:	686c      	ldr	r4, [r5, #4]
 800bcae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d0ef      	beq.n	800bc96 <_fflush_r+0xa>
 800bcb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bcb8:	07d0      	lsls	r0, r2, #31
 800bcba:	d404      	bmi.n	800bcc6 <_fflush_r+0x3a>
 800bcbc:	0599      	lsls	r1, r3, #22
 800bcbe:	d402      	bmi.n	800bcc6 <_fflush_r+0x3a>
 800bcc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcc2:	f000 f915 	bl	800bef0 <__retarget_lock_acquire_recursive>
 800bcc6:	4628      	mov	r0, r5
 800bcc8:	4621      	mov	r1, r4
 800bcca:	f7ff ff59 	bl	800bb80 <__sflush_r>
 800bcce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bcd0:	07da      	lsls	r2, r3, #31
 800bcd2:	4605      	mov	r5, r0
 800bcd4:	d4e0      	bmi.n	800bc98 <_fflush_r+0xc>
 800bcd6:	89a3      	ldrh	r3, [r4, #12]
 800bcd8:	059b      	lsls	r3, r3, #22
 800bcda:	d4dd      	bmi.n	800bc98 <_fflush_r+0xc>
 800bcdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcde:	f000 f908 	bl	800bef2 <__retarget_lock_release_recursive>
 800bce2:	e7d9      	b.n	800bc98 <_fflush_r+0xc>
 800bce4:	4b05      	ldr	r3, [pc, #20]	; (800bcfc <_fflush_r+0x70>)
 800bce6:	429c      	cmp	r4, r3
 800bce8:	d101      	bne.n	800bcee <_fflush_r+0x62>
 800bcea:	68ac      	ldr	r4, [r5, #8]
 800bcec:	e7df      	b.n	800bcae <_fflush_r+0x22>
 800bcee:	4b04      	ldr	r3, [pc, #16]	; (800bd00 <_fflush_r+0x74>)
 800bcf0:	429c      	cmp	r4, r3
 800bcf2:	bf08      	it	eq
 800bcf4:	68ec      	ldreq	r4, [r5, #12]
 800bcf6:	e7da      	b.n	800bcae <_fflush_r+0x22>
 800bcf8:	0800c734 	.word	0x0800c734
 800bcfc:	0800c754 	.word	0x0800c754
 800bd00:	0800c714 	.word	0x0800c714

0800bd04 <std>:
 800bd04:	2300      	movs	r3, #0
 800bd06:	b510      	push	{r4, lr}
 800bd08:	4604      	mov	r4, r0
 800bd0a:	e9c0 3300 	strd	r3, r3, [r0]
 800bd0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd12:	6083      	str	r3, [r0, #8]
 800bd14:	8181      	strh	r1, [r0, #12]
 800bd16:	6643      	str	r3, [r0, #100]	; 0x64
 800bd18:	81c2      	strh	r2, [r0, #14]
 800bd1a:	6183      	str	r3, [r0, #24]
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	2208      	movs	r2, #8
 800bd20:	305c      	adds	r0, #92	; 0x5c
 800bd22:	f7fd fc01 	bl	8009528 <memset>
 800bd26:	4b05      	ldr	r3, [pc, #20]	; (800bd3c <std+0x38>)
 800bd28:	6263      	str	r3, [r4, #36]	; 0x24
 800bd2a:	4b05      	ldr	r3, [pc, #20]	; (800bd40 <std+0x3c>)
 800bd2c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bd2e:	4b05      	ldr	r3, [pc, #20]	; (800bd44 <std+0x40>)
 800bd30:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd32:	4b05      	ldr	r3, [pc, #20]	; (800bd48 <std+0x44>)
 800bd34:	6224      	str	r4, [r4, #32]
 800bd36:	6323      	str	r3, [r4, #48]	; 0x30
 800bd38:	bd10      	pop	{r4, pc}
 800bd3a:	bf00      	nop
 800bd3c:	0800c059 	.word	0x0800c059
 800bd40:	0800c07b 	.word	0x0800c07b
 800bd44:	0800c0b3 	.word	0x0800c0b3
 800bd48:	0800c0d7 	.word	0x0800c0d7

0800bd4c <_cleanup_r>:
 800bd4c:	4901      	ldr	r1, [pc, #4]	; (800bd54 <_cleanup_r+0x8>)
 800bd4e:	f000 b8af 	b.w	800beb0 <_fwalk_reent>
 800bd52:	bf00      	nop
 800bd54:	0800bc8d 	.word	0x0800bc8d

0800bd58 <__sfmoreglue>:
 800bd58:	b570      	push	{r4, r5, r6, lr}
 800bd5a:	2268      	movs	r2, #104	; 0x68
 800bd5c:	1e4d      	subs	r5, r1, #1
 800bd5e:	4355      	muls	r5, r2
 800bd60:	460e      	mov	r6, r1
 800bd62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bd66:	f7ff fa65 	bl	800b234 <_malloc_r>
 800bd6a:	4604      	mov	r4, r0
 800bd6c:	b140      	cbz	r0, 800bd80 <__sfmoreglue+0x28>
 800bd6e:	2100      	movs	r1, #0
 800bd70:	e9c0 1600 	strd	r1, r6, [r0]
 800bd74:	300c      	adds	r0, #12
 800bd76:	60a0      	str	r0, [r4, #8]
 800bd78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bd7c:	f7fd fbd4 	bl	8009528 <memset>
 800bd80:	4620      	mov	r0, r4
 800bd82:	bd70      	pop	{r4, r5, r6, pc}

0800bd84 <__sfp_lock_acquire>:
 800bd84:	4801      	ldr	r0, [pc, #4]	; (800bd8c <__sfp_lock_acquire+0x8>)
 800bd86:	f000 b8b3 	b.w	800bef0 <__retarget_lock_acquire_recursive>
 800bd8a:	bf00      	nop
 800bd8c:	2400080d 	.word	0x2400080d

0800bd90 <__sfp_lock_release>:
 800bd90:	4801      	ldr	r0, [pc, #4]	; (800bd98 <__sfp_lock_release+0x8>)
 800bd92:	f000 b8ae 	b.w	800bef2 <__retarget_lock_release_recursive>
 800bd96:	bf00      	nop
 800bd98:	2400080d 	.word	0x2400080d

0800bd9c <__sinit_lock_acquire>:
 800bd9c:	4801      	ldr	r0, [pc, #4]	; (800bda4 <__sinit_lock_acquire+0x8>)
 800bd9e:	f000 b8a7 	b.w	800bef0 <__retarget_lock_acquire_recursive>
 800bda2:	bf00      	nop
 800bda4:	2400080e 	.word	0x2400080e

0800bda8 <__sinit_lock_release>:
 800bda8:	4801      	ldr	r0, [pc, #4]	; (800bdb0 <__sinit_lock_release+0x8>)
 800bdaa:	f000 b8a2 	b.w	800bef2 <__retarget_lock_release_recursive>
 800bdae:	bf00      	nop
 800bdb0:	2400080e 	.word	0x2400080e

0800bdb4 <__sinit>:
 800bdb4:	b510      	push	{r4, lr}
 800bdb6:	4604      	mov	r4, r0
 800bdb8:	f7ff fff0 	bl	800bd9c <__sinit_lock_acquire>
 800bdbc:	69a3      	ldr	r3, [r4, #24]
 800bdbe:	b11b      	cbz	r3, 800bdc8 <__sinit+0x14>
 800bdc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdc4:	f7ff bff0 	b.w	800bda8 <__sinit_lock_release>
 800bdc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bdcc:	6523      	str	r3, [r4, #80]	; 0x50
 800bdce:	4b13      	ldr	r3, [pc, #76]	; (800be1c <__sinit+0x68>)
 800bdd0:	4a13      	ldr	r2, [pc, #76]	; (800be20 <__sinit+0x6c>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	62a2      	str	r2, [r4, #40]	; 0x28
 800bdd6:	42a3      	cmp	r3, r4
 800bdd8:	bf04      	itt	eq
 800bdda:	2301      	moveq	r3, #1
 800bddc:	61a3      	streq	r3, [r4, #24]
 800bdde:	4620      	mov	r0, r4
 800bde0:	f000 f820 	bl	800be24 <__sfp>
 800bde4:	6060      	str	r0, [r4, #4]
 800bde6:	4620      	mov	r0, r4
 800bde8:	f000 f81c 	bl	800be24 <__sfp>
 800bdec:	60a0      	str	r0, [r4, #8]
 800bdee:	4620      	mov	r0, r4
 800bdf0:	f000 f818 	bl	800be24 <__sfp>
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	60e0      	str	r0, [r4, #12]
 800bdf8:	2104      	movs	r1, #4
 800bdfa:	6860      	ldr	r0, [r4, #4]
 800bdfc:	f7ff ff82 	bl	800bd04 <std>
 800be00:	68a0      	ldr	r0, [r4, #8]
 800be02:	2201      	movs	r2, #1
 800be04:	2109      	movs	r1, #9
 800be06:	f7ff ff7d 	bl	800bd04 <std>
 800be0a:	68e0      	ldr	r0, [r4, #12]
 800be0c:	2202      	movs	r2, #2
 800be0e:	2112      	movs	r1, #18
 800be10:	f7ff ff78 	bl	800bd04 <std>
 800be14:	2301      	movs	r3, #1
 800be16:	61a3      	str	r3, [r4, #24]
 800be18:	e7d2      	b.n	800bdc0 <__sinit+0xc>
 800be1a:	bf00      	nop
 800be1c:	0800c39c 	.word	0x0800c39c
 800be20:	0800bd4d 	.word	0x0800bd4d

0800be24 <__sfp>:
 800be24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be26:	4607      	mov	r7, r0
 800be28:	f7ff ffac 	bl	800bd84 <__sfp_lock_acquire>
 800be2c:	4b1e      	ldr	r3, [pc, #120]	; (800bea8 <__sfp+0x84>)
 800be2e:	681e      	ldr	r6, [r3, #0]
 800be30:	69b3      	ldr	r3, [r6, #24]
 800be32:	b913      	cbnz	r3, 800be3a <__sfp+0x16>
 800be34:	4630      	mov	r0, r6
 800be36:	f7ff ffbd 	bl	800bdb4 <__sinit>
 800be3a:	3648      	adds	r6, #72	; 0x48
 800be3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800be40:	3b01      	subs	r3, #1
 800be42:	d503      	bpl.n	800be4c <__sfp+0x28>
 800be44:	6833      	ldr	r3, [r6, #0]
 800be46:	b30b      	cbz	r3, 800be8c <__sfp+0x68>
 800be48:	6836      	ldr	r6, [r6, #0]
 800be4a:	e7f7      	b.n	800be3c <__sfp+0x18>
 800be4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800be50:	b9d5      	cbnz	r5, 800be88 <__sfp+0x64>
 800be52:	4b16      	ldr	r3, [pc, #88]	; (800beac <__sfp+0x88>)
 800be54:	60e3      	str	r3, [r4, #12]
 800be56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be5a:	6665      	str	r5, [r4, #100]	; 0x64
 800be5c:	f000 f847 	bl	800beee <__retarget_lock_init_recursive>
 800be60:	f7ff ff96 	bl	800bd90 <__sfp_lock_release>
 800be64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800be68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800be6c:	6025      	str	r5, [r4, #0]
 800be6e:	61a5      	str	r5, [r4, #24]
 800be70:	2208      	movs	r2, #8
 800be72:	4629      	mov	r1, r5
 800be74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800be78:	f7fd fb56 	bl	8009528 <memset>
 800be7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800be80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800be84:	4620      	mov	r0, r4
 800be86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be88:	3468      	adds	r4, #104	; 0x68
 800be8a:	e7d9      	b.n	800be40 <__sfp+0x1c>
 800be8c:	2104      	movs	r1, #4
 800be8e:	4638      	mov	r0, r7
 800be90:	f7ff ff62 	bl	800bd58 <__sfmoreglue>
 800be94:	4604      	mov	r4, r0
 800be96:	6030      	str	r0, [r6, #0]
 800be98:	2800      	cmp	r0, #0
 800be9a:	d1d5      	bne.n	800be48 <__sfp+0x24>
 800be9c:	f7ff ff78 	bl	800bd90 <__sfp_lock_release>
 800bea0:	230c      	movs	r3, #12
 800bea2:	603b      	str	r3, [r7, #0]
 800bea4:	e7ee      	b.n	800be84 <__sfp+0x60>
 800bea6:	bf00      	nop
 800bea8:	0800c39c 	.word	0x0800c39c
 800beac:	ffff0001 	.word	0xffff0001

0800beb0 <_fwalk_reent>:
 800beb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800beb4:	4606      	mov	r6, r0
 800beb6:	4688      	mov	r8, r1
 800beb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bebc:	2700      	movs	r7, #0
 800bebe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bec2:	f1b9 0901 	subs.w	r9, r9, #1
 800bec6:	d505      	bpl.n	800bed4 <_fwalk_reent+0x24>
 800bec8:	6824      	ldr	r4, [r4, #0]
 800beca:	2c00      	cmp	r4, #0
 800becc:	d1f7      	bne.n	800bebe <_fwalk_reent+0xe>
 800bece:	4638      	mov	r0, r7
 800bed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bed4:	89ab      	ldrh	r3, [r5, #12]
 800bed6:	2b01      	cmp	r3, #1
 800bed8:	d907      	bls.n	800beea <_fwalk_reent+0x3a>
 800beda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bede:	3301      	adds	r3, #1
 800bee0:	d003      	beq.n	800beea <_fwalk_reent+0x3a>
 800bee2:	4629      	mov	r1, r5
 800bee4:	4630      	mov	r0, r6
 800bee6:	47c0      	blx	r8
 800bee8:	4307      	orrs	r7, r0
 800beea:	3568      	adds	r5, #104	; 0x68
 800beec:	e7e9      	b.n	800bec2 <_fwalk_reent+0x12>

0800beee <__retarget_lock_init_recursive>:
 800beee:	4770      	bx	lr

0800bef0 <__retarget_lock_acquire_recursive>:
 800bef0:	4770      	bx	lr

0800bef2 <__retarget_lock_release_recursive>:
 800bef2:	4770      	bx	lr

0800bef4 <__swhatbuf_r>:
 800bef4:	b570      	push	{r4, r5, r6, lr}
 800bef6:	460e      	mov	r6, r1
 800bef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800befc:	2900      	cmp	r1, #0
 800befe:	b096      	sub	sp, #88	; 0x58
 800bf00:	4614      	mov	r4, r2
 800bf02:	461d      	mov	r5, r3
 800bf04:	da08      	bge.n	800bf18 <__swhatbuf_r+0x24>
 800bf06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	602a      	str	r2, [r5, #0]
 800bf0e:	061a      	lsls	r2, r3, #24
 800bf10:	d410      	bmi.n	800bf34 <__swhatbuf_r+0x40>
 800bf12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf16:	e00e      	b.n	800bf36 <__swhatbuf_r+0x42>
 800bf18:	466a      	mov	r2, sp
 800bf1a:	f000 f903 	bl	800c124 <_fstat_r>
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	dbf1      	blt.n	800bf06 <__swhatbuf_r+0x12>
 800bf22:	9a01      	ldr	r2, [sp, #4]
 800bf24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bf28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bf2c:	425a      	negs	r2, r3
 800bf2e:	415a      	adcs	r2, r3
 800bf30:	602a      	str	r2, [r5, #0]
 800bf32:	e7ee      	b.n	800bf12 <__swhatbuf_r+0x1e>
 800bf34:	2340      	movs	r3, #64	; 0x40
 800bf36:	2000      	movs	r0, #0
 800bf38:	6023      	str	r3, [r4, #0]
 800bf3a:	b016      	add	sp, #88	; 0x58
 800bf3c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bf40 <__smakebuf_r>:
 800bf40:	898b      	ldrh	r3, [r1, #12]
 800bf42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf44:	079d      	lsls	r5, r3, #30
 800bf46:	4606      	mov	r6, r0
 800bf48:	460c      	mov	r4, r1
 800bf4a:	d507      	bpl.n	800bf5c <__smakebuf_r+0x1c>
 800bf4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf50:	6023      	str	r3, [r4, #0]
 800bf52:	6123      	str	r3, [r4, #16]
 800bf54:	2301      	movs	r3, #1
 800bf56:	6163      	str	r3, [r4, #20]
 800bf58:	b002      	add	sp, #8
 800bf5a:	bd70      	pop	{r4, r5, r6, pc}
 800bf5c:	ab01      	add	r3, sp, #4
 800bf5e:	466a      	mov	r2, sp
 800bf60:	f7ff ffc8 	bl	800bef4 <__swhatbuf_r>
 800bf64:	9900      	ldr	r1, [sp, #0]
 800bf66:	4605      	mov	r5, r0
 800bf68:	4630      	mov	r0, r6
 800bf6a:	f7ff f963 	bl	800b234 <_malloc_r>
 800bf6e:	b948      	cbnz	r0, 800bf84 <__smakebuf_r+0x44>
 800bf70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf74:	059a      	lsls	r2, r3, #22
 800bf76:	d4ef      	bmi.n	800bf58 <__smakebuf_r+0x18>
 800bf78:	f023 0303 	bic.w	r3, r3, #3
 800bf7c:	f043 0302 	orr.w	r3, r3, #2
 800bf80:	81a3      	strh	r3, [r4, #12]
 800bf82:	e7e3      	b.n	800bf4c <__smakebuf_r+0xc>
 800bf84:	4b0d      	ldr	r3, [pc, #52]	; (800bfbc <__smakebuf_r+0x7c>)
 800bf86:	62b3      	str	r3, [r6, #40]	; 0x28
 800bf88:	89a3      	ldrh	r3, [r4, #12]
 800bf8a:	6020      	str	r0, [r4, #0]
 800bf8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf90:	81a3      	strh	r3, [r4, #12]
 800bf92:	9b00      	ldr	r3, [sp, #0]
 800bf94:	6163      	str	r3, [r4, #20]
 800bf96:	9b01      	ldr	r3, [sp, #4]
 800bf98:	6120      	str	r0, [r4, #16]
 800bf9a:	b15b      	cbz	r3, 800bfb4 <__smakebuf_r+0x74>
 800bf9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfa0:	4630      	mov	r0, r6
 800bfa2:	f000 f8d1 	bl	800c148 <_isatty_r>
 800bfa6:	b128      	cbz	r0, 800bfb4 <__smakebuf_r+0x74>
 800bfa8:	89a3      	ldrh	r3, [r4, #12]
 800bfaa:	f023 0303 	bic.w	r3, r3, #3
 800bfae:	f043 0301 	orr.w	r3, r3, #1
 800bfb2:	81a3      	strh	r3, [r4, #12]
 800bfb4:	89a0      	ldrh	r0, [r4, #12]
 800bfb6:	4305      	orrs	r5, r0
 800bfb8:	81a5      	strh	r5, [r4, #12]
 800bfba:	e7cd      	b.n	800bf58 <__smakebuf_r+0x18>
 800bfbc:	0800bd4d 	.word	0x0800bd4d

0800bfc0 <_malloc_usable_size_r>:
 800bfc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfc4:	1f18      	subs	r0, r3, #4
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	bfbc      	itt	lt
 800bfca:	580b      	ldrlt	r3, [r1, r0]
 800bfcc:	18c0      	addlt	r0, r0, r3
 800bfce:	4770      	bx	lr

0800bfd0 <_raise_r>:
 800bfd0:	291f      	cmp	r1, #31
 800bfd2:	b538      	push	{r3, r4, r5, lr}
 800bfd4:	4604      	mov	r4, r0
 800bfd6:	460d      	mov	r5, r1
 800bfd8:	d904      	bls.n	800bfe4 <_raise_r+0x14>
 800bfda:	2316      	movs	r3, #22
 800bfdc:	6003      	str	r3, [r0, #0]
 800bfde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bfe2:	bd38      	pop	{r3, r4, r5, pc}
 800bfe4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bfe6:	b112      	cbz	r2, 800bfee <_raise_r+0x1e>
 800bfe8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bfec:	b94b      	cbnz	r3, 800c002 <_raise_r+0x32>
 800bfee:	4620      	mov	r0, r4
 800bff0:	f000 f830 	bl	800c054 <_getpid_r>
 800bff4:	462a      	mov	r2, r5
 800bff6:	4601      	mov	r1, r0
 800bff8:	4620      	mov	r0, r4
 800bffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bffe:	f000 b817 	b.w	800c030 <_kill_r>
 800c002:	2b01      	cmp	r3, #1
 800c004:	d00a      	beq.n	800c01c <_raise_r+0x4c>
 800c006:	1c59      	adds	r1, r3, #1
 800c008:	d103      	bne.n	800c012 <_raise_r+0x42>
 800c00a:	2316      	movs	r3, #22
 800c00c:	6003      	str	r3, [r0, #0]
 800c00e:	2001      	movs	r0, #1
 800c010:	e7e7      	b.n	800bfe2 <_raise_r+0x12>
 800c012:	2400      	movs	r4, #0
 800c014:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c018:	4628      	mov	r0, r5
 800c01a:	4798      	blx	r3
 800c01c:	2000      	movs	r0, #0
 800c01e:	e7e0      	b.n	800bfe2 <_raise_r+0x12>

0800c020 <raise>:
 800c020:	4b02      	ldr	r3, [pc, #8]	; (800c02c <raise+0xc>)
 800c022:	4601      	mov	r1, r0
 800c024:	6818      	ldr	r0, [r3, #0]
 800c026:	f7ff bfd3 	b.w	800bfd0 <_raise_r>
 800c02a:	bf00      	nop
 800c02c:	24000014 	.word	0x24000014

0800c030 <_kill_r>:
 800c030:	b538      	push	{r3, r4, r5, lr}
 800c032:	4d07      	ldr	r5, [pc, #28]	; (800c050 <_kill_r+0x20>)
 800c034:	2300      	movs	r3, #0
 800c036:	4604      	mov	r4, r0
 800c038:	4608      	mov	r0, r1
 800c03a:	4611      	mov	r1, r2
 800c03c:	602b      	str	r3, [r5, #0]
 800c03e:	f7f5 fb67 	bl	8001710 <_kill>
 800c042:	1c43      	adds	r3, r0, #1
 800c044:	d102      	bne.n	800c04c <_kill_r+0x1c>
 800c046:	682b      	ldr	r3, [r5, #0]
 800c048:	b103      	cbz	r3, 800c04c <_kill_r+0x1c>
 800c04a:	6023      	str	r3, [r4, #0]
 800c04c:	bd38      	pop	{r3, r4, r5, pc}
 800c04e:	bf00      	nop
 800c050:	24000808 	.word	0x24000808

0800c054 <_getpid_r>:
 800c054:	f7f5 bb54 	b.w	8001700 <_getpid>

0800c058 <__sread>:
 800c058:	b510      	push	{r4, lr}
 800c05a:	460c      	mov	r4, r1
 800c05c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c060:	f000 f894 	bl	800c18c <_read_r>
 800c064:	2800      	cmp	r0, #0
 800c066:	bfab      	itete	ge
 800c068:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c06a:	89a3      	ldrhlt	r3, [r4, #12]
 800c06c:	181b      	addge	r3, r3, r0
 800c06e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c072:	bfac      	ite	ge
 800c074:	6563      	strge	r3, [r4, #84]	; 0x54
 800c076:	81a3      	strhlt	r3, [r4, #12]
 800c078:	bd10      	pop	{r4, pc}

0800c07a <__swrite>:
 800c07a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c07e:	461f      	mov	r7, r3
 800c080:	898b      	ldrh	r3, [r1, #12]
 800c082:	05db      	lsls	r3, r3, #23
 800c084:	4605      	mov	r5, r0
 800c086:	460c      	mov	r4, r1
 800c088:	4616      	mov	r6, r2
 800c08a:	d505      	bpl.n	800c098 <__swrite+0x1e>
 800c08c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c090:	2302      	movs	r3, #2
 800c092:	2200      	movs	r2, #0
 800c094:	f000 f868 	bl	800c168 <_lseek_r>
 800c098:	89a3      	ldrh	r3, [r4, #12]
 800c09a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c09e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c0a2:	81a3      	strh	r3, [r4, #12]
 800c0a4:	4632      	mov	r2, r6
 800c0a6:	463b      	mov	r3, r7
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ae:	f000 b817 	b.w	800c0e0 <_write_r>

0800c0b2 <__sseek>:
 800c0b2:	b510      	push	{r4, lr}
 800c0b4:	460c      	mov	r4, r1
 800c0b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0ba:	f000 f855 	bl	800c168 <_lseek_r>
 800c0be:	1c43      	adds	r3, r0, #1
 800c0c0:	89a3      	ldrh	r3, [r4, #12]
 800c0c2:	bf15      	itete	ne
 800c0c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c0c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c0ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c0ce:	81a3      	strheq	r3, [r4, #12]
 800c0d0:	bf18      	it	ne
 800c0d2:	81a3      	strhne	r3, [r4, #12]
 800c0d4:	bd10      	pop	{r4, pc}

0800c0d6 <__sclose>:
 800c0d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0da:	f000 b813 	b.w	800c104 <_close_r>
	...

0800c0e0 <_write_r>:
 800c0e0:	b538      	push	{r3, r4, r5, lr}
 800c0e2:	4d07      	ldr	r5, [pc, #28]	; (800c100 <_write_r+0x20>)
 800c0e4:	4604      	mov	r4, r0
 800c0e6:	4608      	mov	r0, r1
 800c0e8:	4611      	mov	r1, r2
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	602a      	str	r2, [r5, #0]
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	f7f5 fb45 	bl	800177e <_write>
 800c0f4:	1c43      	adds	r3, r0, #1
 800c0f6:	d102      	bne.n	800c0fe <_write_r+0x1e>
 800c0f8:	682b      	ldr	r3, [r5, #0]
 800c0fa:	b103      	cbz	r3, 800c0fe <_write_r+0x1e>
 800c0fc:	6023      	str	r3, [r4, #0]
 800c0fe:	bd38      	pop	{r3, r4, r5, pc}
 800c100:	24000808 	.word	0x24000808

0800c104 <_close_r>:
 800c104:	b538      	push	{r3, r4, r5, lr}
 800c106:	4d06      	ldr	r5, [pc, #24]	; (800c120 <_close_r+0x1c>)
 800c108:	2300      	movs	r3, #0
 800c10a:	4604      	mov	r4, r0
 800c10c:	4608      	mov	r0, r1
 800c10e:	602b      	str	r3, [r5, #0]
 800c110:	f7f5 fb51 	bl	80017b6 <_close>
 800c114:	1c43      	adds	r3, r0, #1
 800c116:	d102      	bne.n	800c11e <_close_r+0x1a>
 800c118:	682b      	ldr	r3, [r5, #0]
 800c11a:	b103      	cbz	r3, 800c11e <_close_r+0x1a>
 800c11c:	6023      	str	r3, [r4, #0]
 800c11e:	bd38      	pop	{r3, r4, r5, pc}
 800c120:	24000808 	.word	0x24000808

0800c124 <_fstat_r>:
 800c124:	b538      	push	{r3, r4, r5, lr}
 800c126:	4d07      	ldr	r5, [pc, #28]	; (800c144 <_fstat_r+0x20>)
 800c128:	2300      	movs	r3, #0
 800c12a:	4604      	mov	r4, r0
 800c12c:	4608      	mov	r0, r1
 800c12e:	4611      	mov	r1, r2
 800c130:	602b      	str	r3, [r5, #0]
 800c132:	f7f5 fb4c 	bl	80017ce <_fstat>
 800c136:	1c43      	adds	r3, r0, #1
 800c138:	d102      	bne.n	800c140 <_fstat_r+0x1c>
 800c13a:	682b      	ldr	r3, [r5, #0]
 800c13c:	b103      	cbz	r3, 800c140 <_fstat_r+0x1c>
 800c13e:	6023      	str	r3, [r4, #0]
 800c140:	bd38      	pop	{r3, r4, r5, pc}
 800c142:	bf00      	nop
 800c144:	24000808 	.word	0x24000808

0800c148 <_isatty_r>:
 800c148:	b538      	push	{r3, r4, r5, lr}
 800c14a:	4d06      	ldr	r5, [pc, #24]	; (800c164 <_isatty_r+0x1c>)
 800c14c:	2300      	movs	r3, #0
 800c14e:	4604      	mov	r4, r0
 800c150:	4608      	mov	r0, r1
 800c152:	602b      	str	r3, [r5, #0]
 800c154:	f7f5 fb4b 	bl	80017ee <_isatty>
 800c158:	1c43      	adds	r3, r0, #1
 800c15a:	d102      	bne.n	800c162 <_isatty_r+0x1a>
 800c15c:	682b      	ldr	r3, [r5, #0]
 800c15e:	b103      	cbz	r3, 800c162 <_isatty_r+0x1a>
 800c160:	6023      	str	r3, [r4, #0]
 800c162:	bd38      	pop	{r3, r4, r5, pc}
 800c164:	24000808 	.word	0x24000808

0800c168 <_lseek_r>:
 800c168:	b538      	push	{r3, r4, r5, lr}
 800c16a:	4d07      	ldr	r5, [pc, #28]	; (800c188 <_lseek_r+0x20>)
 800c16c:	4604      	mov	r4, r0
 800c16e:	4608      	mov	r0, r1
 800c170:	4611      	mov	r1, r2
 800c172:	2200      	movs	r2, #0
 800c174:	602a      	str	r2, [r5, #0]
 800c176:	461a      	mov	r2, r3
 800c178:	f7f5 fb44 	bl	8001804 <_lseek>
 800c17c:	1c43      	adds	r3, r0, #1
 800c17e:	d102      	bne.n	800c186 <_lseek_r+0x1e>
 800c180:	682b      	ldr	r3, [r5, #0]
 800c182:	b103      	cbz	r3, 800c186 <_lseek_r+0x1e>
 800c184:	6023      	str	r3, [r4, #0]
 800c186:	bd38      	pop	{r3, r4, r5, pc}
 800c188:	24000808 	.word	0x24000808

0800c18c <_read_r>:
 800c18c:	b538      	push	{r3, r4, r5, lr}
 800c18e:	4d07      	ldr	r5, [pc, #28]	; (800c1ac <_read_r+0x20>)
 800c190:	4604      	mov	r4, r0
 800c192:	4608      	mov	r0, r1
 800c194:	4611      	mov	r1, r2
 800c196:	2200      	movs	r2, #0
 800c198:	602a      	str	r2, [r5, #0]
 800c19a:	461a      	mov	r2, r3
 800c19c:	f7f5 fad2 	bl	8001744 <_read>
 800c1a0:	1c43      	adds	r3, r0, #1
 800c1a2:	d102      	bne.n	800c1aa <_read_r+0x1e>
 800c1a4:	682b      	ldr	r3, [r5, #0]
 800c1a6:	b103      	cbz	r3, 800c1aa <_read_r+0x1e>
 800c1a8:	6023      	str	r3, [r4, #0]
 800c1aa:	bd38      	pop	{r3, r4, r5, pc}
 800c1ac:	24000808 	.word	0x24000808

0800c1b0 <_init>:
 800c1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b2:	bf00      	nop
 800c1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1b6:	bc08      	pop	{r3}
 800c1b8:	469e      	mov	lr, r3
 800c1ba:	4770      	bx	lr

0800c1bc <_fini>:
 800c1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1be:	bf00      	nop
 800c1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1c2:	bc08      	pop	{r3}
 800c1c4:	469e      	mov	lr, r3
 800c1c6:	4770      	bx	lr
